
FW_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080090a8  080090a8  000190a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009608  08009608  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800960c  0800960c  0001960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009610  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  200001e8  080097f8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c48  080097f8  00020c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b19  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237c  00000000  00000000  00037d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001026  00000000  00000000  0003b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018190  00000000  00000000  0003c616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141f5  00000000  00000000  000547a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090c13  00000000  00000000  0006899b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dec  00000000  00000000  000f95b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800908c 	.word	0x0800908c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800908c 	.word	0x0800908c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <MX_GPIO_Init+0xd4>)
 8000fe0:	f000 fdea 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_GPIO_Init+0xd8>)
 8000ffc:	f000 fc58 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001000:	2320      	movs	r3, #32
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_GPIO_Init+0xd4>)
 8001018:	f000 fc4a 	bl	80018b0 <HAL_GPIO_Init>

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020800 	.word	0x40020800

08001030 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_I2C1_Init+0x50>)
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <MX_I2C1_Init+0x54>)
 8001038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_I2C1_Init+0x50>)
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_I2C1_Init+0x58>)
 800103e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_I2C1_Init+0x50>)
 800104e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001052:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MX_I2C1_Init+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_I2C1_Init+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_I2C1_Init+0x50>)
 800106e:	f000 fdbd 	bl	8001bec <HAL_I2C_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001078:	f000 f8d2 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000204 	.word	0x20000204
 8001084:	40005400 	.word	0x40005400
 8001088:	000186a0 	.word	0x000186a0

0800108c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_I2C_MspInit+0x84>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12c      	bne.n	8001108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010dc:	2304      	movs	r3, #4
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <HAL_I2C_MspInit+0x8c>)
 80010e8:	f000 fbe2 	bl	80018b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0x88>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8001122:	f000 fa49 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f80f 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f7ff ff13 	bl	8000f54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112e:	f000 f9a7 	bl	8001480 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001132:	f7ff ff7d 	bl	8001030 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lsm6dsr_read_data_polling();
 8001136:	f003 faff 	bl	8004738 <lsm6dsr_read_data_polling>
	  lsm6dsr_read_data_polling_2();
 800113a:	f003 fd8d 	bl	8004c58 <lsm6dsr_read_data_polling_2>
	  HAL_Delay(500);
 800113e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001142:	f000 faab 	bl	800169c <HAL_Delay>
  {
 8001146:	e7f6      	b.n	8001136 <main+0x1a>

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fd97 	bl	8005c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <SystemClock_Config+0xd0>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a28      	ldr	r2, [pc, #160]	; (8001218 <SystemClock_Config+0xd0>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <SystemClock_Config+0xd0>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <SystemClock_Config+0xd4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <SystemClock_Config+0xd4>)
 8001196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <SystemClock_Config+0xd4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a8:	2302      	movs	r3, #2
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b0:	2310      	movs	r3, #16
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b4:	2302      	movs	r3, #2
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011bc:	2310      	movs	r3, #16
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011c6:	2304      	movs	r3, #4
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ca:	2307      	movs	r3, #7
 80011cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fcca 	bl	8002b6c <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011de:	f000 f81f 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2302      	movs	r3, #2
 80011e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2102      	movs	r1, #2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 ff2c 	bl	800305c <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800120a:	f000 f809 	bl	8001220 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	; 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <HAL_MspInit+0x4c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126a:	2007      	movs	r0, #7
 800126c:	f000 faec 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f9c8 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return 1;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_kill>:

int _kill(int pid, int sig)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ea:	f004 fd21 	bl	8005d30 <__errno>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2216      	movs	r2, #22
 80012f2:	601a      	str	r2, [r3, #0]
  return -1;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_exit>:

void _exit (int status)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffe7 	bl	80012e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001312:	e7fe      	b.n	8001312 <_exit+0x12>

08001314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00a      	b.n	800133c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001326:	f3af 8000 	nop.w
 800132a:	4601      	mov	r1, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	b2ca      	uxtb	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf0      	blt.n	8001326 <_read+0x12>
  }

  return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e009      	b.n	8001374 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbf1      	blt.n	8001360 <_write+0x12>
  }
  return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_close>:

int _close(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ae:	605a      	str	r2, [r3, #4]
  return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_isatty>:

int _isatty(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f004 fc86 	bl	8005d30 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20018000 	.word	0x20018000
 8001450:	00000400 	.word	0x00000400
 8001454:	20000258 	.word	0x20000258
 8001458:	20000c48 	.word	0x20000c48

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_USART2_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART2_UART_Init+0x4c>)
 80014b8:	f001 fff0 	bl	800349c <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f7ff fead 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000025c 	.word	0x2000025c
 80014d0:	40004400 	.word	0x40004400

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_UART_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <HAL_UART_MspInit+0x88>)
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x88>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_UART_MspInit+0x88>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_UART_MspInit+0x88>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800152e:	230c      	movs	r3, #12
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153e:	2307      	movs	r3, #7
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_UART_MspInit+0x8c>)
 800154a:	f000 f9b1 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40004400 	.word	0x40004400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001580:	4c0b      	ldr	r4, [pc, #44]	; (80015b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158e:	f7ff ff65 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001592:	f004 fbd3 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fdc1 	bl	800111c <main>
  bx  lr    
 800159a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800159c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80015a8:	08009610 	.word	0x08009610
  ldr r2, =_sbss
 80015ac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80015b0:	20000c48 	.word	0x20000c48

080015b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <HAL_Init+0x40>)
 80015c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_Init+0x40>)
 80015ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_Init+0x40>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 f931 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 f808 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ec:	f7ff fe1e 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f93b 	bl	8001896 <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f000 f911 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	200002a0 	.word	0x200002a0

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	200002a0 	.word	0x200002a0

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff47 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff5c 	bl	800172c <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffb0 	bl	8001804 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e159      	b.n	8001b80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 8148 	bne.w	8001b7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d005      	beq.n	8001902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b03      	cmp	r3, #3
 800196e:	d017      	beq.n	80019a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80a2 	beq.w	8001b7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_Init+0x2ec>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0x202>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_GPIO_Init+0x2f4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x1fe>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a47      	ldr	r2, [pc, #284]	; (8001ba8 <HAL_GPIO_Init+0x2f8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a46      	ldr	r2, [pc, #280]	; (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1f6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a45      	ldr	r2, [pc, #276]	; (8001bb0 <HAL_GPIO_Init+0x300>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1f2>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e008      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e004      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x204>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f002 0203 	and.w	r2, r2, #3
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4093      	lsls	r3, r2
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac4:	4935      	ldr	r1, [pc, #212]	; (8001b9c <HAL_GPIO_Init+0x2ec>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001af6:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b20:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4a:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_GPIO_Init+0x304>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	f67f aea2 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40013800 	.word	0x40013800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020c00 	.word	0x40020c00
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	619a      	str	r2, [r3, #24]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e12b      	b.n	8001e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fa3a 	bl	800108c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c50:	f001 fbfc 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 8001c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a81      	ldr	r2, [pc, #516]	; (8001e60 <HAL_I2C_Init+0x274>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d807      	bhi.n	8001c70 <HAL_I2C_Init+0x84>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4a80      	ldr	r2, [pc, #512]	; (8001e64 <HAL_I2C_Init+0x278>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	bf94      	ite	ls
 8001c68:	2301      	movls	r3, #1
 8001c6a:	2300      	movhi	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e006      	b.n	8001c7e <HAL_I2C_Init+0x92>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a7d      	ldr	r2, [pc, #500]	; (8001e68 <HAL_I2C_Init+0x27c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bf94      	ite	ls
 8001c78:	2301      	movls	r3, #1
 8001c7a:	2300      	movhi	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0e7      	b.n	8001e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4a78      	ldr	r2, [pc, #480]	; (8001e6c <HAL_I2C_Init+0x280>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0c9b      	lsrs	r3, r3, #18
 8001c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	; (8001e60 <HAL_I2C_Init+0x274>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d802      	bhi.n	8001cc0 <HAL_I2C_Init+0xd4>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	e009      	b.n	8001cd4 <HAL_I2C_Init+0xe8>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_I2C_Init+0x284>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	495c      	ldr	r1, [pc, #368]	; (8001e60 <HAL_I2C_Init+0x274>)
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	d819      	bhi.n	8001d28 <HAL_I2C_Init+0x13c>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e59      	subs	r1, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d02:	1c59      	adds	r1, r3, #1
 8001d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d08:	400b      	ands	r3, r1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00a      	beq.n	8001d24 <HAL_I2C_Init+0x138>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1e59      	subs	r1, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d22:	e051      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e04f      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d111      	bne.n	8001d54 <HAL_I2C_Init+0x168>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	e012      	b.n	8001d7a <HAL_I2C_Init+0x18e>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Init+0x196>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e022      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10e      	bne.n	8001da8 <HAL_I2C_Init+0x1bc>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e58      	subs	r0, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	440b      	add	r3, r1
 8001d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da6:	e00f      	b.n	8001dc8 <HAL_I2C_Init+0x1dc>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	6809      	ldr	r1, [r1, #0]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6911      	ldr	r1, [r2, #16]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68d2      	ldr	r2, [r2, #12]
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	000186a0 	.word	0x000186a0
 8001e64:	001e847f 	.word	0x001e847f
 8001e68:	003d08ff 	.word	0x003d08ff
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	10624dd3 	.word	0x10624dd3

08001e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	817b      	strh	r3, [r7, #10]
 8001e86:	460b      	mov	r3, r1
 8001e88:	813b      	strh	r3, [r7, #8]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e8e:	f7ff fbf9 	bl	8001684 <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	f040 80d9 	bne.w	8002054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2319      	movs	r3, #25
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	496d      	ldr	r1, [pc, #436]	; (8002060 <HAL_I2C_Mem_Write+0x1ec>)
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fc7f 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e0cc      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2C_Mem_Write+0x56>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e0c5      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d007      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2221      	movs	r2, #33	; 0x21
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6a3a      	ldr	r2, [r7, #32]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a4d      	ldr	r2, [pc, #308]	; (8002064 <HAL_I2C_Mem_Write+0x1f0>)
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f32:	88f8      	ldrh	r0, [r7, #6]
 8001f34:	893a      	ldrh	r2, [r7, #8]
 8001f36:	8979      	ldrh	r1, [r7, #10]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4603      	mov	r3, r0
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fab6 	bl	80024b4 <I2C_RequestMemoryWrite>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d052      	beq.n	8001ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e081      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fd00 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d107      	bne.n	8001f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06b      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d11b      	bne.n	8001ff4 <HAL_I2C_Mem_Write+0x180>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d017      	beq.n	8001ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1aa      	bne.n	8001f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fcec 	bl	80029de <I2C_WaitOnBTFFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b04      	cmp	r3, #4
 8002012:	d107      	bne.n	8002024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e016      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	00100002 	.word	0x00100002
 8002064:	ffff0000 	.word	0xffff0000

08002068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002082:	f7ff faff 	bl	8001684 <HAL_GetTick>
 8002086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b20      	cmp	r3, #32
 8002092:	f040 8208 	bne.w	80024a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2319      	movs	r3, #25
 800209c:	2201      	movs	r2, #1
 800209e:	497b      	ldr	r1, [pc, #492]	; (800228c <HAL_I2C_Mem_Read+0x224>)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fb85 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
 80020ae:	e1fb      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Mem_Read+0x56>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e1f4      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d007      	beq.n	80020e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2222      	movs	r2, #34	; 0x22
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_I2C_Mem_Read+0x228>)
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002126:	88f8      	ldrh	r0, [r7, #6]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	8979      	ldrh	r1, [r7, #10]
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4603      	mov	r3, r0
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fa52 	bl	80025e0 <I2C_RequestMemoryRead>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1b0      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	2b00      	cmp	r3, #0
 800214c:	d113      	bne.n	8002176 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e184      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	2b01      	cmp	r3, #1
 800217c:	d11b      	bne.n	80021b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e164      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d11b      	bne.n	80021f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	e144      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800220c:	e138      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	2b03      	cmp	r3, #3
 8002214:	f200 80f1 	bhi.w	80023fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b01      	cmp	r3, #1
 800221e:	d123      	bne.n	8002268 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fc1b 	bl	8002a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e139      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002266:	e10b      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b02      	cmp	r3, #2
 800226e:	d14e      	bne.n	800230e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	2200      	movs	r2, #0
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <HAL_I2C_Mem_Read+0x22c>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fa98 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e10e      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
 800228a:	bf00      	nop
 800228c:	00100002 	.word	0x00100002
 8002290:	ffff0000 	.word	0xffff0000
 8002294:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800230c:	e0b8      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	2200      	movs	r2, #0
 8002316:	4966      	ldr	r1, [pc, #408]	; (80024b0 <HAL_I2C_Mem_Read+0x448>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fa49 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0bf      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	2200      	movs	r2, #0
 8002372:	494f      	ldr	r1, [pc, #316]	; (80024b0 <HAL_I2C_Mem_Read+0x448>)
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fa1b 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e091      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023f8:	e042      	b.n	8002480 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fb2e 	bl	8002a60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e04c      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d118      	bne.n	8002480 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	2b00      	cmp	r3, #0
 8002486:	f47f aec2 	bne.w	800220e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	00010004 	.word	0x00010004

080024b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f960 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00d      	beq.n	8002512 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002504:	d103      	bne.n	800250e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e05f      	b.n	80025d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002512:	897b      	ldrh	r3, [r7, #10]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002520:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	492d      	ldr	r1, [pc, #180]	; (80025dc <I2C_RequestMemoryWrite+0x128>)
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f998 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e04c      	b.n	80025d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002550:	6a39      	ldr	r1, [r7, #32]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa02 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b04      	cmp	r3, #4
 8002564:	d107      	bne.n	8002576 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002574:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e02b      	b.n	80025d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	b2da      	uxtb	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	e021      	b.n	80025d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800258c:	893b      	ldrh	r3, [r7, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	6a39      	ldr	r1, [r7, #32]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f9dc 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d107      	bne.n	80025c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e005      	b.n	80025d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025c6:	893b      	ldrh	r3, [r7, #8]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00010002 	.word	0x00010002

080025e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	460b      	mov	r3, r1
 80025f4:	813b      	strh	r3, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002608:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2200      	movs	r2, #0
 8002622:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f8c2 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002640:	d103      	bne.n	800264a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0aa      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800265c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	4952      	ldr	r1, [pc, #328]	; (80027ac <I2C_RequestMemoryRead+0x1cc>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f8fa 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e097      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f964 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e076      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d105      	bne.n	80026c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	e021      	b.n	800270c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026c8:	893b      	ldrh	r3, [r7, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f93e 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d107      	bne.n	80026fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e050      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002702:	893b      	ldrh	r3, [r7, #8]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	6a39      	ldr	r1, [r7, #32]
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f923 	bl	800295c <I2C_WaitOnTXEFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b04      	cmp	r3, #4
 8002722:	d107      	bne.n	8002734 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002732:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e035      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002746:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2200      	movs	r2, #0
 8002750:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f82b 	bl	80027b0 <I2C_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276e:	d103      	bne.n	8002778 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e013      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800277c:	897b      	ldrh	r3, [r7, #10]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	4906      	ldr	r1, [pc, #24]	; (80027ac <I2C_RequestMemoryRead+0x1cc>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f863 	bl	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	00010002 	.word	0x00010002

080027b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c0:	e025      	b.n	800280e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d021      	beq.n	800280e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe ff5b 	bl	8001684 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d116      	bne.n	800280e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e023      	b.n	8002856 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10d      	bne.n	8002834 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	e00c      	b.n	800284e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	429a      	cmp	r2, r3
 8002852:	d0b6      	beq.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800286c:	e051      	b.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d123      	bne.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002896:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f043 0204 	orr.w	r2, r3, #4
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e046      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d021      	beq.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7fe fed9 	bl	8001684 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e020      	b.n	8002954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10c      	bne.n	8002936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e00b      	b.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	43da      	mvns	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d18d      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002968:	e02d      	b.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f8ce 	bl	8002b0c <I2C_IsAcknowledgeFailed>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e02d      	b.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d021      	beq.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7fe fe7f 	bl	8001684 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e007      	b.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d1ca      	bne.n	800296a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ea:	e02d      	b.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f88d 	bl	8002b0c <I2C_IsAcknowledgeFailed>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e02d      	b.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d021      	beq.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a04:	f7fe fe3e 	bl	8001684 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e007      	b.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d1ca      	bne.n	80029ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a6c:	e042      	b.n	8002af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d119      	bne.n	8002ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0210 	mvn.w	r2, #16
 8002a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e029      	b.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7fe fde8 	bl	8001684 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d302      	bcc.n	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e007      	b.n	8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afe:	2b40      	cmp	r3, #64	; 0x40
 8002b00:	d1b5      	bne.n	8002a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b22:	d11b      	bne.n	8002b5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e267      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d075      	beq.n	8002c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8a:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d00c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4b85      	ldr	r3, [pc, #532]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d112      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba2:	4b82      	ldr	r3, [pc, #520]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bae:	d10b      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	4b7e      	ldr	r3, [pc, #504]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05b      	beq.n	8002c74 <HAL_RCC_OscConfig+0x108>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d157      	bne.n	8002c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e242      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x74>
 8002bd2:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a75      	ldr	r2, [pc, #468]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b70      	ldr	r3, [pc, #448]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6f      	ldr	r2, [pc, #444]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b6d      	ldr	r3, [pc, #436]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a6c      	ldr	r2, [pc, #432]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002c04:	4b69      	ldr	r3, [pc, #420]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a68      	ldr	r2, [pc, #416]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b66      	ldr	r3, [pc, #408]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a65      	ldr	r2, [pc, #404]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fd2e 	bl	8001684 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fd2a 	bl	8001684 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e207      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0xc0>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fd1a 	bl	8001684 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe fd16 	bl	8001684 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1f3      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	4b51      	ldr	r3, [pc, #324]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0xe8>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c82:	4b4a      	ldr	r3, [pc, #296]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b44      	ldr	r3, [pc, #272]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b41      	ldr	r3, [pc, #260]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1c7      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4937      	ldr	r1, [pc, #220]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <HAL_RCC_OscConfig+0x244>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fccf 	bl	8001684 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe fccb 	bl	8001684 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1a8      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b28      	ldr	r3, [pc, #160]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4925      	ldr	r1, [pc, #148]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCC_OscConfig+0x244>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fcae 	bl	8001684 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fcaa 	bl	8001684 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e187      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d036      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_RCC_OscConfig+0x248>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fc8e 	bl	8001684 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fc8a 	bl	8001684 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e167      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_OscConfig+0x240>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x200>
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_OscConfig+0x248>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fc77 	bl	8001684 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e00e      	b.n	8002db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe fc73 	bl	8001684 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d907      	bls.n	8002db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e150      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ea      	bne.n	8002d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd6:	4b81      	ldr	r3, [pc, #516]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	4b7d      	ldr	r3, [pc, #500]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	4a7c      	ldr	r2, [pc, #496]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6413      	str	r3, [r2, #64]	; 0x40
 8002df2:	4b7a      	ldr	r3, [pc, #488]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b77      	ldr	r3, [pc, #476]	; (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d118      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0e:	4b74      	ldr	r3, [pc, #464]	; (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a73      	ldr	r2, [pc, #460]	; (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fc33 	bl	8001684 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe fc2f 	bl	8001684 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e10c      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <HAL_RCC_OscConfig+0x474>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x2ea>
 8002e48:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e01c      	b.n	8002e90 <HAL_RCC_OscConfig+0x324>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x30c>
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a5e      	ldr	r2, [pc, #376]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e64:	f043 0304 	orr.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	4b5c      	ldr	r3, [pc, #368]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a5b      	ldr	r2, [pc, #364]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0x324>
 8002e78:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a57      	ldr	r2, [pc, #348]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	4b55      	ldr	r3, [pc, #340]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a54      	ldr	r2, [pc, #336]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe fbf4 	bl	8001684 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fbf0 	bl	8001684 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0cb      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	4b49      	ldr	r3, [pc, #292]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0ee      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x334>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fbde 	bl	8001684 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fbda 	bl	8001684 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e0b5      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1ee      	bne.n	8002ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a1 	beq.w	800304c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0a:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d05c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d141      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_OscConfig+0x478>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fe fbae 	bl	8001684 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fbaa 	bl	8001684 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e087      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	491b      	ldr	r1, [pc, #108]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x478>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fe fb83 	bl	8001684 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fe fb7f 	bl	8001684 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e05c      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x416>
 8002fa0:	e054      	b.n	800304c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCC_OscConfig+0x478>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fb6c 	bl	8001684 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fb68 	bl	8001684 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e045      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCC_OscConfig+0x470>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x444>
 8002fce:	e03d      	b.n	800304c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e038      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d028      	beq.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d121      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d11a      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	3b01      	subs	r3, #1
 8003032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d107      	bne.n	8003048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0cc      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b68      	ldr	r3, [pc, #416]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d90c      	bls.n	8003098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d044      	beq.n	800317c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d119      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d003      	beq.n	800311a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003116:	2b03      	cmp	r3, #3
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e067      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4934      	ldr	r1, [pc, #208]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe fa9a 	bl	8001684 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fa96 	bl	8001684 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e04f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d20c      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe f9fa 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	08009200 	.word	0x08009200
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322c:	b094      	sub	sp, #80	; 0x50
 800322e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
 8003234:	2300      	movs	r3, #0
 8003236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003238:	2300      	movs	r3, #0
 800323a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003240:	4b79      	ldr	r3, [pc, #484]	; (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d00d      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 800324c:	2b08      	cmp	r3, #8
 800324e:	f200 80e1 	bhi.w	8003414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x34>
 8003256:	2b04      	cmp	r3, #4
 8003258:	d003      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x3a>
 800325a:	e0db      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_RCC_GetSysClockFreq+0x204>)
 800325e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003260:	e0db      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <HAL_RCC_GetSysClockFreq+0x208>)
 8003264:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003266:	e0d8      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003268:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003272:	4b6d      	ldr	r3, [pc, #436]	; (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d063      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327e:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	2200      	movs	r2, #0
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38
 8003288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
 8003292:	2300      	movs	r3, #0
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
 8003296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800329a:	4622      	mov	r2, r4
 800329c:	462b      	mov	r3, r5
 800329e:	f04f 0000 	mov.w	r0, #0
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	0159      	lsls	r1, r3, #5
 80032a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ac:	0150      	lsls	r0, r2, #5
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4621      	mov	r1, r4
 80032b4:	1a51      	subs	r1, r2, r1
 80032b6:	6139      	str	r1, [r7, #16]
 80032b8:	4629      	mov	r1, r5
 80032ba:	eb63 0301 	sbc.w	r3, r3, r1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032cc:	4659      	mov	r1, fp
 80032ce:	018b      	lsls	r3, r1, #6
 80032d0:	4651      	mov	r1, sl
 80032d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032d6:	4651      	mov	r1, sl
 80032d8:	018a      	lsls	r2, r1, #6
 80032da:	4651      	mov	r1, sl
 80032dc:	ebb2 0801 	subs.w	r8, r2, r1
 80032e0:	4659      	mov	r1, fp
 80032e2:	eb63 0901 	sbc.w	r9, r3, r1
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032fa:	4690      	mov	r8, r2
 80032fc:	4699      	mov	r9, r3
 80032fe:	4623      	mov	r3, r4
 8003300:	eb18 0303 	adds.w	r3, r8, r3
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	462b      	mov	r3, r5
 8003308:	eb49 0303 	adc.w	r3, r9, r3
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800331a:	4629      	mov	r1, r5
 800331c:	024b      	lsls	r3, r1, #9
 800331e:	4621      	mov	r1, r4
 8003320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003324:	4621      	mov	r1, r4
 8003326:	024a      	lsls	r2, r1, #9
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332e:	2200      	movs	r2, #0
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
 8003332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003338:	f7fd fc8e 	bl	8000c58 <__aeabi_uldivmod>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4613      	mov	r3, r2
 8003342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003344:	e058      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003346:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	099b      	lsrs	r3, r3, #6
 800334c:	2200      	movs	r2, #0
 800334e:	4618      	mov	r0, r3
 8003350:	4611      	mov	r1, r2
 8003352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	f04f 0000 	mov.w	r0, #0
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	0159      	lsls	r1, r3, #5
 800336e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003372:	0150      	lsls	r0, r2, #5
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4641      	mov	r1, r8
 800337a:	ebb2 0a01 	subs.w	sl, r2, r1
 800337e:	4649      	mov	r1, r9
 8003380:	eb63 0b01 	sbc.w	fp, r3, r1
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003398:	ebb2 040a 	subs.w	r4, r2, sl
 800339c:	eb63 050b 	sbc.w	r5, r3, fp
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	00eb      	lsls	r3, r5, #3
 80033aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ae:	00e2      	lsls	r2, r4, #3
 80033b0:	4614      	mov	r4, r2
 80033b2:	461d      	mov	r5, r3
 80033b4:	4643      	mov	r3, r8
 80033b6:	18e3      	adds	r3, r4, r3
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	464b      	mov	r3, r9
 80033bc:	eb45 0303 	adc.w	r3, r5, r3
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ce:	4629      	mov	r1, r5
 80033d0:	028b      	lsls	r3, r1, #10
 80033d2:	4621      	mov	r1, r4
 80033d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d8:	4621      	mov	r1, r4
 80033da:	028a      	lsls	r2, r1, #10
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e2:	2200      	movs	r2, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	61fa      	str	r2, [r7, #28]
 80033e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ec:	f7fd fc34 	bl	8000c58 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003412:	e002      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetSysClockFreq+0x204>)
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800341c:	4618      	mov	r0, r3
 800341e:	3750      	adds	r7, #80	; 0x50
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_RCC_GetHCLKFreq+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000000 	.word	0x20000000

0800344c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003450:	f7ff fff0 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0a9b      	lsrs	r3, r3, #10
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	08009210 	.word	0x08009210

08003474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003478:	f7ff ffdc 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0b5b      	lsrs	r3, r3, #13
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	08009210 	.word	0x08009210

0800349c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e03f      	b.n	800352e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe f806 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f929 	bl	8003738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08a      	sub	sp, #40	; 0x28
 800353a:	af02      	add	r7, sp, #8
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b20      	cmp	r3, #32
 8003554:	d17c      	bne.n	8003650 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_UART_Transmit+0x2c>
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e075      	b.n	8003652 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_UART_Transmit+0x3e>
 8003570:	2302      	movs	r3, #2
 8003572:	e06e      	b.n	8003652 <HAL_UART_Transmit+0x11c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2221      	movs	r2, #33	; 0x21
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358a:	f7fe f87b 	bl	8001684 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d108      	bne.n	80035b8 <HAL_UART_Transmit+0x82>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	e003      	b.n	80035c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035c8:	e02a      	b.n	8003620 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f840 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e036      	b.n	8003652 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e007      	b.n	8003612 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1cf      	bne.n	80035ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f810 	bl	800365a <UART_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b090      	sub	sp, #64	; 0x40
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	e050      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d04c      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <UART_WaitOnFlagUntilTimeout+0x30>
 800367a:	f7fe f803 	bl	8001684 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003686:	429a      	cmp	r2, r3
 8003688:	d241      	bcs.n	800370e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036aa:	637a      	str	r2, [r7, #52]	; 0x34
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b2:	e841 2300 	strex	r3, r2, [r1]
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e5      	bne.n	800368a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3314      	adds	r3, #20
 80036c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	613b      	str	r3, [r7, #16]
   return(result);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3314      	adds	r3, #20
 80036dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036de:	623a      	str	r2, [r7, #32]
 80036e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	69f9      	ldr	r1, [r7, #28]
 80036e4:	6a3a      	ldr	r2, [r7, #32]
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e5      	bne.n	80036be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00f      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d09f      	beq.n	800366c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3740      	adds	r7, #64	; 0x40
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	b0c0      	sub	sp, #256	; 0x100
 800373e:	af00      	add	r7, sp, #0
 8003740:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003754:	68d9      	ldr	r1, [r3, #12]
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	ea40 0301 	orr.w	r3, r0, r1
 8003760:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	431a      	orrs	r2, r3
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	431a      	orrs	r2, r3
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003790:	f021 010c 	bic.w	r1, r1, #12
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800379e:	430b      	orrs	r3, r1
 80037a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	6999      	ldr	r1, [r3, #24]
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	ea40 0301 	orr.w	r3, r0, r1
 80037be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4b8f      	ldr	r3, [pc, #572]	; (8003a04 <UART_SetConfig+0x2cc>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d005      	beq.n	80037d8 <UART_SetConfig+0xa0>
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b8d      	ldr	r3, [pc, #564]	; (8003a08 <UART_SetConfig+0x2d0>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d104      	bne.n	80037e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037d8:	f7ff fe4c 	bl	8003474 <HAL_RCC_GetPCLK2Freq>
 80037dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037e0:	e003      	b.n	80037ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037e2:	f7ff fe33 	bl	800344c <HAL_RCC_GetPCLK1Freq>
 80037e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f4:	f040 810c 	bne.w	8003a10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003802:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003806:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800380a:	4622      	mov	r2, r4
 800380c:	462b      	mov	r3, r5
 800380e:	1891      	adds	r1, r2, r2
 8003810:	65b9      	str	r1, [r7, #88]	; 0x58
 8003812:	415b      	adcs	r3, r3
 8003814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003816:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800381a:	4621      	mov	r1, r4
 800381c:	eb12 0801 	adds.w	r8, r2, r1
 8003820:	4629      	mov	r1, r5
 8003822:	eb43 0901 	adc.w	r9, r3, r1
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383a:	4690      	mov	r8, r2
 800383c:	4699      	mov	r9, r3
 800383e:	4623      	mov	r3, r4
 8003840:	eb18 0303 	adds.w	r3, r8, r3
 8003844:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003848:	462b      	mov	r3, r5
 800384a:	eb49 0303 	adc.w	r3, r9, r3
 800384e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800385e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003862:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003866:	460b      	mov	r3, r1
 8003868:	18db      	adds	r3, r3, r3
 800386a:	653b      	str	r3, [r7, #80]	; 0x50
 800386c:	4613      	mov	r3, r2
 800386e:	eb42 0303 	adc.w	r3, r2, r3
 8003872:	657b      	str	r3, [r7, #84]	; 0x54
 8003874:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003878:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800387c:	f7fd f9ec 	bl	8000c58 <__aeabi_uldivmod>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4b61      	ldr	r3, [pc, #388]	; (8003a0c <UART_SetConfig+0x2d4>)
 8003886:	fba3 2302 	umull	r2, r3, r3, r2
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	011c      	lsls	r4, r3, #4
 800388e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003898:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800389c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038a0:	4642      	mov	r2, r8
 80038a2:	464b      	mov	r3, r9
 80038a4:	1891      	adds	r1, r2, r2
 80038a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038a8:	415b      	adcs	r3, r3
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038b0:	4641      	mov	r1, r8
 80038b2:	eb12 0a01 	adds.w	sl, r2, r1
 80038b6:	4649      	mov	r1, r9
 80038b8:	eb43 0b01 	adc.w	fp, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d0:	4692      	mov	sl, r2
 80038d2:	469b      	mov	fp, r3
 80038d4:	4643      	mov	r3, r8
 80038d6:	eb1a 0303 	adds.w	r3, sl, r3
 80038da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038de:	464b      	mov	r3, r9
 80038e0:	eb4b 0303 	adc.w	r3, fp, r3
 80038e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038fc:	460b      	mov	r3, r1
 80038fe:	18db      	adds	r3, r3, r3
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
 8003902:	4613      	mov	r3, r2
 8003904:	eb42 0303 	adc.w	r3, r2, r3
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
 800390a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800390e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003912:	f7fd f9a1 	bl	8000c58 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4611      	mov	r1, r2
 800391c:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <UART_SetConfig+0x2d4>)
 800391e:	fba3 2301 	umull	r2, r3, r3, r1
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2264      	movs	r2, #100	; 0x64
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	1acb      	subs	r3, r1, r3
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <UART_SetConfig+0x2d4>)
 8003934:	fba3 2302 	umull	r2, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003940:	441c      	add	r4, r3
 8003942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003946:	2200      	movs	r2, #0
 8003948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800394c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003950:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003954:	4642      	mov	r2, r8
 8003956:	464b      	mov	r3, r9
 8003958:	1891      	adds	r1, r2, r2
 800395a:	63b9      	str	r1, [r7, #56]	; 0x38
 800395c:	415b      	adcs	r3, r3
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003964:	4641      	mov	r1, r8
 8003966:	1851      	adds	r1, r2, r1
 8003968:	6339      	str	r1, [r7, #48]	; 0x30
 800396a:	4649      	mov	r1, r9
 800396c:	414b      	adcs	r3, r1
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800397c:	4659      	mov	r1, fp
 800397e:	00cb      	lsls	r3, r1, #3
 8003980:	4651      	mov	r1, sl
 8003982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003986:	4651      	mov	r1, sl
 8003988:	00ca      	lsls	r2, r1, #3
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	4603      	mov	r3, r0
 8003990:	4642      	mov	r2, r8
 8003992:	189b      	adds	r3, r3, r2
 8003994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003998:	464b      	mov	r3, r9
 800399a:	460a      	mov	r2, r1
 800399c:	eb42 0303 	adc.w	r3, r2, r3
 80039a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039b8:	460b      	mov	r3, r1
 80039ba:	18db      	adds	r3, r3, r3
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039be:	4613      	mov	r3, r2
 80039c0:	eb42 0303 	adc.w	r3, r2, r3
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039ce:	f7fd f943 	bl	8000c58 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <UART_SetConfig+0x2d4>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	; 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	3332      	adds	r3, #50	; 0x32
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <UART_SetConfig+0x2d4>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 0207 	and.w	r2, r3, #7
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4422      	add	r2, r4
 80039fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a00:	e106      	b.n	8003c10 <UART_SetConfig+0x4d8>
 8003a02:	bf00      	nop
 8003a04:	40011000 	.word	0x40011000
 8003a08:	40011400 	.word	0x40011400
 8003a0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a22:	4642      	mov	r2, r8
 8003a24:	464b      	mov	r3, r9
 8003a26:	1891      	adds	r1, r2, r2
 8003a28:	6239      	str	r1, [r7, #32]
 8003a2a:	415b      	adcs	r3, r3
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a32:	4641      	mov	r1, r8
 8003a34:	1854      	adds	r4, r2, r1
 8003a36:	4649      	mov	r1, r9
 8003a38:	eb43 0501 	adc.w	r5, r3, r1
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	00eb      	lsls	r3, r5, #3
 8003a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4a:	00e2      	lsls	r2, r4, #3
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	461d      	mov	r5, r3
 8003a50:	4643      	mov	r3, r8
 8003a52:	18e3      	adds	r3, r4, r3
 8003a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a58:	464b      	mov	r3, r9
 8003a5a:	eb45 0303 	adc.w	r3, r5, r3
 8003a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a7e:	4629      	mov	r1, r5
 8003a80:	008b      	lsls	r3, r1, #2
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a88:	4621      	mov	r1, r4
 8003a8a:	008a      	lsls	r2, r1, #2
 8003a8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a90:	f7fd f8e2 	bl	8000c58 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4b60      	ldr	r3, [pc, #384]	; (8003c1c <UART_SetConfig+0x4e4>)
 8003a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	011c      	lsls	r4, r3, #4
 8003aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003aac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ab0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	464b      	mov	r3, r9
 8003ab8:	1891      	adds	r1, r2, r2
 8003aba:	61b9      	str	r1, [r7, #24]
 8003abc:	415b      	adcs	r3, r3
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	1851      	adds	r1, r2, r1
 8003ac8:	6139      	str	r1, [r7, #16]
 8003aca:	4649      	mov	r1, r9
 8003acc:	414b      	adcs	r3, r1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003adc:	4659      	mov	r1, fp
 8003ade:	00cb      	lsls	r3, r1, #3
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	00ca      	lsls	r2, r1, #3
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	4642      	mov	r2, r8
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003af8:	464b      	mov	r3, r9
 8003afa:	460a      	mov	r2, r1
 8003afc:	eb42 0303 	adc.w	r3, r2, r3
 8003b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	008b      	lsls	r3, r1, #2
 8003b20:	4641      	mov	r1, r8
 8003b22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b26:	4641      	mov	r1, r8
 8003b28:	008a      	lsls	r2, r1, #2
 8003b2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b2e:	f7fd f893 	bl	8000c58 <__aeabi_uldivmod>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <UART_SetConfig+0x4e4>)
 8003b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	2264      	movs	r2, #100	; 0x64
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	1acb      	subs	r3, r1, r3
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	3332      	adds	r3, #50	; 0x32
 8003b4c:	4a33      	ldr	r2, [pc, #204]	; (8003c1c <UART_SetConfig+0x4e4>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b58:	441c      	add	r4, r3
 8003b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5e:	2200      	movs	r2, #0
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
 8003b62:	677a      	str	r2, [r7, #116]	; 0x74
 8003b64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	415b      	adcs	r3, r3
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b78:	4641      	mov	r1, r8
 8003b7a:	1851      	adds	r1, r2, r1
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	4649      	mov	r1, r9
 8003b80:	414b      	adcs	r3, r1
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b90:	4659      	mov	r1, fp
 8003b92:	00cb      	lsls	r3, r1, #3
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	00ca      	lsls	r2, r1, #3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	189b      	adds	r3, r3, r2
 8003ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003baa:	464b      	mov	r3, r9
 8003bac:	460a      	mov	r2, r1
 8003bae:	eb42 0303 	adc.w	r3, r2, r3
 8003bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbe:	667a      	str	r2, [r7, #100]	; 0x64
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bcc:	4649      	mov	r1, r9
 8003bce:	008b      	lsls	r3, r1, #2
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	008a      	lsls	r2, r1, #2
 8003bda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bde:	f7fd f83b 	bl	8000c58 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <UART_SetConfig+0x4e4>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <UART_SetConfig+0x4e4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4422      	add	r2, r4
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c16:	46bd      	mov	sp, r7
 8003c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1c:	51eb851f 	.word	0x51eb851f

08003c20 <lsm6dsr_read_reg>:
  *
  */
int32_t __weak lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	72fb      	strb	r3, [r7, #11]
 8003c30:	4613      	mov	r3, r2
 8003c32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685c      	ldr	r4, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	68d8      	ldr	r0, [r3, #12]
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	7af9      	ldrb	r1, [r7, #11]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	47a0      	blx	r4
 8003c44:	6178      	str	r0, [r7, #20]

  return ret;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}

08003c50 <lsm6dsr_write_reg>:
  *
  */
int32_t __weak lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	72fb      	strb	r3, [r7, #11]
 8003c60:	4613      	mov	r3, r2
 8003c62:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681c      	ldr	r4, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68d8      	ldr	r0, [r3, #12]
 8003c6c:	893b      	ldrh	r3, [r7, #8]
 8003c6e:	7af9      	ldrb	r1, [r7, #11]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	47a0      	blx	r4
 8003c74:	6178      	str	r0, [r7, #20]

  return ret;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd90      	pop	{r4, r7, pc}

08003c80 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8e:	ee07 3a90 	vmov	s15, r3
 8003c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c96:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003cac <lsm6dsr_from_fs2g_to_mg+0x2c>
 8003c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	3d79db23 	.word	0x3d79db23

08003cb0 <lsm6dsr_from_fs4g_to_mg>:

float_t lsm6dsr_from_fs4g_to_mg(int16_t lsb)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 8003cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003cdc <lsm6dsr_from_fs4g_to_mg+0x2c>
 8003cca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003cce:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	3df9db23 	.word	0x3df9db23

08003ce0 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8003cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003d0c <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8003cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	428c0000 	.word	0x428c0000

08003d10 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8003d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003d44 <lsm6dsr_from_lsb_to_celsius+0x34>
 8003d2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d2e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003d32:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8003d36:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	43800000 	.word	0x43800000

08003d48 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003d54:	f107 0208 	add.w	r2, r7, #8
 8003d58:	2301      	movs	r3, #1
 8003d5a:	2110      	movs	r1, #16
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff ff5f 	bl	8003c20 <lsm6dsr_read_reg>
 8003d62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10f      	bne.n	8003d8a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	7a3b      	ldrb	r3, [r7, #8]
 8003d74:	f362 0383 	bfi	r3, r2, #2, #2
 8003d78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8003d7a:	f107 0208 	add.w	r2, r7, #8
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2110      	movs	r1, #16
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff64 	bl	8003c50 <lsm6dsr_write_reg>
 8003d88:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	4619      	mov	r1, r3
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fc50 	bl	8004650 <lsm6dsr_fsm_enable_get>
 8003db0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f040 80c4 	bne.w	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003dba:	7b3b      	ldrb	r3, [r7, #12]
 8003dbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003dc2:	7b3b      	ldrb	r3, [r7, #12]
 8003dc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003dc8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003dce:	7b3b      	ldrb	r3, [r7, #12]
 8003dd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003dd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003dda:	7b3b      	ldrb	r3, [r7, #12]
 8003ddc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003de0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8003de2:	4313      	orrs	r3, r2
 8003de4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003de6:	7b3b      	ldrb	r3, [r7, #12]
 8003de8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003dec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003df2:	7b3b      	ldrb	r3, [r7, #12]
 8003df4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003df8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003dfe:	7b3b      	ldrb	r3, [r7, #12]
 8003e00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003e0a:	7b3b      	ldrb	r3, [r7, #12]
 8003e0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e16:	7b7b      	ldrb	r3, [r7, #13]
 8003e18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e22:	7b7b      	ldrb	r3, [r7, #13]
 8003e24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e2e:	7b7b      	ldrb	r3, [r7, #13]
 8003e30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003e36:	4313      	orrs	r3, r2
 8003e38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e3a:	7b7b      	ldrb	r3, [r7, #13]
 8003e3c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003e40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e46:	7b7b      	ldrb	r3, [r7, #13]
 8003e48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003e4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e52:	7b7b      	ldrb	r3, [r7, #13]
 8003e54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003e58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003e5e:	7b7b      	ldrb	r3, [r7, #13]
 8003e60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003e64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003e66:	4313      	orrs	r3, r2
 8003e68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003e6a:	7b7b      	ldrb	r3, [r7, #13]
 8003e6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e70:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8003e72:	4313      	orrs	r3, r2
 8003e74:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d163      	bne.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8003e7a:	f107 030b 	add.w	r3, r7, #11
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fc11 	bl	80046a8 <lsm6dsr_fsm_data_rate_get>
 8003e86:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d159      	bne.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8003e8e:	7afb      	ldrb	r3, [r7, #11]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d853      	bhi.n	8003f3c <lsm6dsr_xl_data_rate_set+0x1a8>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <lsm6dsr_xl_data_rate_set+0x108>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003ebf 	.word	0x08003ebf
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003f07 	.word	0x08003f07
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003eb6:	e044      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	75fb      	strb	r3, [r7, #23]
            break;
 8003ebc:	e041      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003ec8:	e03b      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ed4:	e035      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	75fb      	strb	r3, [r7, #23]
            break;
 8003eda:	e032      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003ee6:	e02c      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d102      	bne.n	8003ef4 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	75fb      	strb	r3, [r7, #23]
            break;
 8003ef2:	e026      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d102      	bne.n	8003f00 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8003efa:	2303      	movs	r3, #3
 8003efc:	75fb      	strb	r3, [r7, #23]
            break;
 8003efe:	e020      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	75fb      	strb	r3, [r7, #23]
            break;
 8003f04:	e01d      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003f10:	e017      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003f18:	2304      	movs	r3, #4
 8003f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8003f1c:	e011      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d102      	bne.n	8003f2a <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003f24:	2304      	movs	r3, #4
 8003f26:	75fb      	strb	r3, [r7, #23]
            break;
 8003f28:	e00b      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d102      	bne.n	8003f36 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8003f30:	2304      	movs	r3, #4
 8003f32:	75fb      	strb	r3, [r7, #23]
            break;
 8003f34:	e005      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	75fb      	strb	r3, [r7, #23]
            break;
 8003f3a:	e002      	b.n	8003f42 <lsm6dsr_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f40:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <lsm6dsr_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003f48:	f107 0208 	add.w	r2, r7, #8
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	2110      	movs	r1, #16
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fe65 	bl	8003c20 <lsm6dsr_read_reg>
 8003f56:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <lsm6dsr_xl_data_rate_set+0x1ea>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	7a3b      	ldrb	r3, [r7, #8]
 8003f68:	f362 1307 	bfi	r3, r2, #4, #4
 8003f6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8003f6e:	f107 0208 	add.w	r2, r7, #8
 8003f72:	2301      	movs	r3, #1
 8003f74:	2110      	movs	r1, #16
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fe6a 	bl	8003c50 <lsm6dsr_write_reg>
 8003f7c:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003f7e:	693b      	ldr	r3, [r7, #16]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003f94:	f107 0208 	add.w	r2, r7, #8
 8003f98:	2301      	movs	r3, #1
 8003f9a:	2111      	movs	r1, #17
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe3f 	bl	8003c20 <lsm6dsr_read_reg>
 8003fa2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10f      	bne.n	8003fca <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	7a3b      	ldrb	r3, [r7, #8]
 8003fb4:	f362 0303 	bfi	r3, r2, #0, #4
 8003fb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003fba:	f107 0208 	add.w	r2, r7, #8
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	2111      	movs	r1, #17
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fe44 	bl	8003c50 <lsm6dsr_write_reg>
 8003fc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8003fe4:	f107 030c 	add.w	r3, r7, #12
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fb30 	bl	8004650 <lsm6dsr_fsm_enable_get>
 8003ff0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 80c4 	bne.w	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003ffa:	7b3b      	ldrb	r3, [r7, #12]
 8003ffc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004000:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004002:	7b3b      	ldrb	r3, [r7, #12]
 8004004:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004008:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800400a:	4313      	orrs	r3, r2
 800400c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800400e:	7b3b      	ldrb	r3, [r7, #12]
 8004010:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004014:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004016:	4313      	orrs	r3, r2
 8004018:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800401a:	7b3b      	ldrb	r3, [r7, #12]
 800401c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004020:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004022:	4313      	orrs	r3, r2
 8004024:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004026:	7b3b      	ldrb	r3, [r7, #12]
 8004028:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800402c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800402e:	4313      	orrs	r3, r2
 8004030:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004032:	7b3b      	ldrb	r3, [r7, #12]
 8004034:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004038:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800403a:	4313      	orrs	r3, r2
 800403c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800403e:	7b3b      	ldrb	r3, [r7, #12]
 8004040:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004044:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004046:	4313      	orrs	r3, r2
 8004048:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800404a:	7b3b      	ldrb	r3, [r7, #12]
 800404c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004050:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004052:	4313      	orrs	r3, r2
 8004054:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004056:	7b7b      	ldrb	r3, [r7, #13]
 8004058:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800405c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800405e:	4313      	orrs	r3, r2
 8004060:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004062:	7b7b      	ldrb	r3, [r7, #13]
 8004064:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004068:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800406a:	4313      	orrs	r3, r2
 800406c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800406e:	7b7b      	ldrb	r3, [r7, #13]
 8004070:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004074:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004076:	4313      	orrs	r3, r2
 8004078:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004080:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004082:	4313      	orrs	r3, r2
 8004084:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004086:	7b7b      	ldrb	r3, [r7, #13]
 8004088:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800408c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800408e:	4313      	orrs	r3, r2
 8004090:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004092:	7b7b      	ldrb	r3, [r7, #13]
 8004094:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004098:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800409a:	4313      	orrs	r3, r2
 800409c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800409e:	7b7b      	ldrb	r3, [r7, #13]
 80040a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80040a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80040aa:	7b7b      	ldrb	r3, [r7, #13]
 80040ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80040b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80040b2:	4313      	orrs	r3, r2
 80040b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d163      	bne.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80040ba:	f107 030b 	add.w	r3, r7, #11
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 faf1 	bl	80046a8 <lsm6dsr_fsm_data_rate_get>
 80040c6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d159      	bne.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80040ce:	7afb      	ldrb	r3, [r7, #11]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d853      	bhi.n	800417c <lsm6dsr_gy_data_rate_set+0x1a8>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <lsm6dsr_gy_data_rate_set+0x108>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040ff 	.word	0x080040ff
 80040e4:	0800411d 	.word	0x0800411d
 80040e8:	08004147 	.word	0x08004147
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80040f6:	e044      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	75fb      	strb	r3, [r7, #23]
            break;
 80040fc:	e041      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004104:	2302      	movs	r3, #2
 8004106:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004108:	e03b      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d102      	bne.n	8004116 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8004110:	2302      	movs	r3, #2
 8004112:	75fb      	strb	r3, [r7, #23]
            break;
 8004114:	e035      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	75fb      	strb	r3, [r7, #23]
            break;
 800411a:	e032      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8004122:	2303      	movs	r3, #3
 8004124:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004126:	e02c      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800412e:	2303      	movs	r3, #3
 8004130:	75fb      	strb	r3, [r7, #23]
            break;
 8004132:	e026      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d102      	bne.n	8004140 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800413a:	2303      	movs	r3, #3
 800413c:	75fb      	strb	r3, [r7, #23]
            break;
 800413e:	e020      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	75fb      	strb	r3, [r7, #23]
            break;
 8004144:	e01d      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800414c:	2304      	movs	r3, #4
 800414e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004150:	e017      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d102      	bne.n	800415e <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004158:	2304      	movs	r3, #4
 800415a:	75fb      	strb	r3, [r7, #23]
            break;
 800415c:	e011      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d102      	bne.n	800416a <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004164:	2304      	movs	r3, #4
 8004166:	75fb      	strb	r3, [r7, #23]
            break;
 8004168:	e00b      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d102      	bne.n	8004176 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8004170:	2304      	movs	r3, #4
 8004172:	75fb      	strb	r3, [r7, #23]
            break;
 8004174:	e005      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	75fb      	strb	r3, [r7, #23]
            break;
 800417a:	e002      	b.n	8004182 <lsm6dsr_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	75fb      	strb	r3, [r7, #23]
            break;
 8004180:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <lsm6dsr_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004188:	f107 0208 	add.w	r2, r7, #8
 800418c:	2301      	movs	r3, #1
 800418e:	2111      	movs	r1, #17
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff fd45 	bl	8003c20 <lsm6dsr_read_reg>
 8004196:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <lsm6dsr_gy_data_rate_set+0x1ea>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	7a3b      	ldrb	r3, [r7, #8]
 80041a8:	f362 1307 	bfi	r3, r2, #4, #4
 80041ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80041ae:	f107 0208 	add.w	r2, r7, #8
 80041b2:	2301      	movs	r3, #1
 80041b4:	2111      	movs	r1, #17
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff fd4a 	bl	8003c50 <lsm6dsr_write_reg>
 80041bc:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80041be:	693b      	ldr	r3, [r7, #16]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80041d4:	f107 0208 	add.w	r2, r7, #8
 80041d8:	2301      	movs	r3, #1
 80041da:	2112      	movs	r1, #18
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fd1f 	bl	8003c20 <lsm6dsr_read_reg>
 80041e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	7a3b      	ldrb	r3, [r7, #8]
 80041f4:	f362 1386 	bfi	r3, r2, #6, #1
 80041f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80041fa:	f107 0208 	add.w	r2, r7, #8
 80041fe:	2301      	movs	r3, #1
 8004200:	2112      	movs	r1, #18
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fd24 	bl	8003c50 <lsm6dsr_write_reg>
 8004208:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800421e:	f107 0208 	add.w	r2, r7, #8
 8004222:	2301      	movs	r3, #1
 8004224:	211e      	movs	r1, #30
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fcfa 	bl	8003c20 <lsm6dsr_read_reg>
 800422c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800422e:	7a3b      	ldrb	r3, [r7, #8]
 8004230:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	701a      	strb	r2, [r3, #0]

  return ret;
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004250:	f107 0208 	add.w	r2, r7, #8
 8004254:	2301      	movs	r3, #1
 8004256:	211e      	movs	r1, #30
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff fce1 	bl	8003c20 <lsm6dsr_read_reg>
 800425e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8004260:	7a3b      	ldrb	r3, [r7, #8]
 8004262:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	701a      	strb	r2, [r3, #0]

  return ret;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8004282:	f107 0208 	add.w	r2, r7, #8
 8004286:	2301      	movs	r3, #1
 8004288:	211e      	movs	r1, #30
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fcc8 	bl	8003c20 <lsm6dsr_read_reg>
 8004290:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8004292:	7a3b      	ldrb	r3, [r7, #8]
 8004294:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	701a      	strb	r2, [r3, #0]

  return ret;
 80042a0:	68fb      	ldr	r3, [r7, #12]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80042b4:	f107 0208 	add.w	r2, r7, #8
 80042b8:	2302      	movs	r3, #2
 80042ba:	2120      	movs	r1, #32
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff fcaf 	bl	8003c20 <lsm6dsr_read_reg>
 80042c2:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80042c4:	7a7b      	ldrb	r3, [r7, #9]
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	7a3b      	ldrb	r3, [r7, #8]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4413      	add	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	b21a      	sxth	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	801a      	strh	r2, [r3, #0]

  return ret;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80042fa:	f107 020c 	add.w	r2, r7, #12
 80042fe:	2306      	movs	r3, #6
 8004300:	2122      	movs	r1, #34	; 0x22
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fc8c 	bl	8003c20 <lsm6dsr_read_reg>
 8004308:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800430a:	7b7b      	ldrb	r3, [r7, #13]
 800430c:	b21a      	sxth	r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004318:	b29b      	uxth	r3, r3
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	b29a      	uxth	r2, r3
 800431e:	7b3b      	ldrb	r3, [r7, #12]
 8004320:	b29b      	uxth	r3, r3
 8004322:	4413      	add	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	b21a      	sxth	r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	3302      	adds	r3, #2
 8004332:	b212      	sxth	r2, r2
 8004334:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	3302      	adds	r3, #2
 800433a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800433e:	b29b      	uxth	r3, r3
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	b29a      	uxth	r2, r3
 8004344:	7bbb      	ldrb	r3, [r7, #14]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4413      	add	r3, r2
 800434a:	b29a      	uxth	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	3302      	adds	r3, #2
 8004350:	b212      	sxth	r2, r2
 8004352:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004354:	7c7a      	ldrb	r2, [r7, #17]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	b212      	sxth	r2, r2
 800435c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3304      	adds	r3, #4
 8004362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004366:	b29b      	uxth	r3, r3
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	b29a      	uxth	r2, r3
 800436c:	7c3b      	ldrb	r3, [r7, #16]
 800436e:	b29b      	uxth	r3, r3
 8004370:	4413      	add	r3, r2
 8004372:	b29a      	uxth	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	b212      	sxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]

  return ret;
 800437c:	697b      	ldr	r3, [r7, #20]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8004390:	f107 020c 	add.w	r2, r7, #12
 8004394:	2306      	movs	r3, #6
 8004396:	2128      	movs	r1, #40	; 0x28
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fc41 	bl	8003c20 <lsm6dsr_read_reg>
 800439e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80043a0:	7b7b      	ldrb	r3, [r7, #13]
 80043a2:	b21a      	sxth	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	7b3b      	ldrb	r3, [r7, #12]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	b21a      	sxth	r2, r3
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	3302      	adds	r3, #2
 80043c8:	b212      	sxth	r2, r2
 80043ca:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	3302      	adds	r3, #2
 80043d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	b29a      	uxth	r2, r3
 80043da:	7bbb      	ldrb	r3, [r7, #14]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4413      	add	r3, r2
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	3302      	adds	r3, #2
 80043e6:	b212      	sxth	r2, r2
 80043e8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80043ea:	7c7a      	ldrb	r2, [r7, #17]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	3304      	adds	r3, #4
 80043f0:	b212      	sxth	r2, r2
 80043f2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	3304      	adds	r3, #4
 80043f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	b29a      	uxth	r2, r3
 8004402:	7c3b      	ldrb	r3, [r7, #16]
 8004404:	b29b      	uxth	r3, r3
 8004406:	4413      	add	r3, r2
 8004408:	b29a      	uxth	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	3304      	adds	r3, #4
 800440e:	b212      	sxth	r2, r2
 8004410:	801a      	strh	r2, [r3, #0]

  return ret;
 8004412:	697b      	ldr	r3, [r7, #20]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8004428:	f107 0208 	add.w	r2, r7, #8
 800442c:	2301      	movs	r3, #1
 800442e:	2101      	movs	r1, #1
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fbf5 	bl	8003c20 <lsm6dsr_read_reg>
 8004436:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	b2da      	uxtb	r2, r3
 8004446:	7a3b      	ldrb	r3, [r7, #8]
 8004448:	f362 1387 	bfi	r3, r2, #6, #2
 800444c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800444e:	f107 0208 	add.w	r2, r7, #8
 8004452:	2301      	movs	r3, #1
 8004454:	2101      	movs	r1, #1
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fbfa 	bl	8003c50 <lsm6dsr_write_reg>
 800445c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8004472:	2301      	movs	r3, #1
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	210f      	movs	r1, #15
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fbd1 	bl	8003c20 <lsm6dsr_read_reg>
 800447e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004496:	f107 0208 	add.w	r2, r7, #8
 800449a:	2301      	movs	r3, #1
 800449c:	2112      	movs	r1, #18
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fbbe 	bl	8003c20 <lsm6dsr_read_reg>
 80044a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10f      	bne.n	80044cc <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	7a3b      	ldrb	r3, [r7, #8]
 80044b6:	f362 0300 	bfi	r3, r2, #0, #1
 80044ba:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044bc:	f107 0208 	add.w	r2, r7, #8
 80044c0:	2301      	movs	r3, #1
 80044c2:	2112      	movs	r1, #18
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fbc3 	bl	8003c50 <lsm6dsr_write_reg>
 80044ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80044e0:	f107 0208 	add.w	r2, r7, #8
 80044e4:	2301      	movs	r3, #1
 80044e6:	2112      	movs	r1, #18
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff fb99 	bl	8003c20 <lsm6dsr_read_reg>
 80044ee:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80044f0:	7a3b      	ldrb	r3, [r7, #8]
 80044f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	701a      	strb	r2, [r3, #0]

  return ret;
 80044fe:	68fb      	ldr	r3, [r7, #12]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004514:	f107 0208 	add.w	r2, r7, #8
 8004518:	2301      	movs	r3, #1
 800451a:	2110      	movs	r1, #16
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fb7f 	bl	8003c20 <lsm6dsr_read_reg>
 8004522:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	b2da      	uxtb	r2, r3
 8004532:	7a3b      	ldrb	r3, [r7, #8]
 8004534:	f362 0341 	bfi	r3, r2, #1, #1
 8004538:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800453a:	f107 0208 	add.w	r2, r7, #8
 800453e:	2301      	movs	r3, #1
 8004540:	2110      	movs	r1, #16
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff fb84 	bl	8003c50 <lsm6dsr_write_reg>
 8004548:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8004560:	f107 0208 	add.w	r2, r7, #8
 8004564:	2301      	movs	r3, #1
 8004566:	2117      	movs	r1, #23
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fb59 	bl	8003c20 <lsm6dsr_read_reg>
 800456e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d121      	bne.n	80045ba <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	7a3b      	ldrb	r3, [r7, #8]
 8004582:	f362 0382 	bfi	r3, r2, #2, #1
 8004586:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	7a3b      	ldrb	r3, [r7, #8]
 8004594:	f362 1304 	bfi	r3, r2, #4, #1
 8004598:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	7a3b      	ldrb	r3, [r7, #8]
 80045a4:	f362 1347 	bfi	r3, r2, #5, #3
 80045a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 80045aa:	f107 0208 	add.w	r2, r7, #8
 80045ae:	2301      	movs	r3, #1
 80045b0:	2117      	movs	r1, #23
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fb4c 	bl	8003c50 <lsm6dsr_write_reg>
 80045b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80045d0:	f107 0210 	add.w	r2, r7, #16
 80045d4:	2301      	movs	r3, #1
 80045d6:	2118      	movs	r1, #24
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff fb21 	bl	8003c20 <lsm6dsr_read_reg>
 80045de:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d111      	bne.n	800460a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	09db      	lsrs	r3, r3, #7
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	7c3b      	ldrb	r3, [r7, #16]
 80045f4:	f362 0341 	bfi	r3, r2, #1, #1
 80045f8:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80045fa:	f107 0210 	add.w	r2, r7, #16
 80045fe:	2301      	movs	r3, #1
 8004600:	2118      	movs	r1, #24
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fb24 	bl	8003c50 <lsm6dsr_write_reg>
 8004608:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8004610:	f107 020c 	add.w	r2, r7, #12
 8004614:	2301      	movs	r3, #1
 8004616:	2162      	movs	r1, #98	; 0x62
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff fb01 	bl	8003c20 <lsm6dsr_read_reg>
 800461e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	b2da      	uxtb	r2, r3
 800462e:	7b3b      	ldrb	r3, [r7, #12]
 8004630:	f362 03c4 	bfi	r3, r2, #3, #2
 8004634:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8004636:	f107 020c 	add.w	r2, r7, #12
 800463a:	2301      	movs	r3, #1
 800463c:	2162      	movs	r1, #98	; 0x62
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fb06 	bl	8003c50 <lsm6dsr_write_reg>
 8004644:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800465a:	2102      	movs	r1, #2
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fedd 	bl	800441c <lsm6dsr_mem_bank_set>
 8004662:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800466a:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800466c:	2301      	movs	r3, #1
 800466e:	2146      	movs	r1, #70	; 0x46
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff fad5 	bl	8003c20 <lsm6dsr_read_reg>
 8004676:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d107      	bne.n	800468e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8004682:	2301      	movs	r3, #1
 8004684:	2147      	movs	r1, #71	; 0x47
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff faca 	bl	8003c20 <lsm6dsr_read_reg>
 800468c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8004694:	2100      	movs	r1, #0
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fec0 	bl	800441c <lsm6dsr_mem_bank_set>
 800469c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800469e:	68fb      	ldr	r3, [r7, #12]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80046b2:	2102      	movs	r1, #2
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff feb1 	bl	800441c <lsm6dsr_mem_bank_set>
 80046ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80046c2:	f107 0208 	add.w	r2, r7, #8
 80046c6:	2301      	movs	r3, #1
 80046c8:	215f      	movs	r1, #95	; 0x5f
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff faa8 	bl	8003c20 <lsm6dsr_read_reg>
 80046d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80046d8:	2100      	movs	r1, #0
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fe9e 	bl	800441c <lsm6dsr_mem_bank_set>
 80046e0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80046e2:	7a3b      	ldrb	r3, [r7, #8]
 80046e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d81a      	bhi.n	8004724 <lsm6dsr_fsm_data_rate_get+0x7c>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004705 	.word	0x08004705
 80046f8:	0800470d 	.word	0x0800470d
 80046fc:	08004715 	.word	0x08004715
 8004700:	0800471d 	.word	0x0800471d
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
      break;
 800470a:	e00f      	b.n	800472c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
      break;
 8004712:	e00b      	b.n	800472c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2202      	movs	r2, #2
 8004718:	701a      	strb	r2, [r3, #0]
      break;
 800471a:	e007      	b.n	800472c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2203      	movs	r2, #3
 8004720:	701a      	strb	r2, [r3, #0]
      break;
 8004722:	e003      	b.n	800472c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
      break;
 800472a:	bf00      	nop
  }

  return ret;
 800472c:	68fb      	ldr	r3, [r7, #12]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop

08004738 <lsm6dsr_read_data_polling>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm6dsr_read_data_polling(void)
{
 8004738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800473c:	b08a      	sub	sp, #40	; 0x28
 800473e:	af04      	add	r7, sp, #16
  stmdev_ctx_t dev_ctx;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <lsm6dsr_read_data_polling+0x34>)
 8004742:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <lsm6dsr_read_data_polling+0x38>)
 8004746:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &hi2c1;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <lsm6dsr_read_data_polling+0x3c>)
 800474a:	617b      	str	r3, [r7, #20]
  /* Init test platform */
  platform_init();
 800474c:	f000 fa7b 	bl	8004c46 <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8004750:	200a      	movs	r0, #10
 8004752:	f000 fa6d 	bl	8004c30 <platform_delay>
  /* Check device ID */
  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 8004756:	f107 0308 	add.w	r3, r7, #8
 800475a:	4907      	ldr	r1, [pc, #28]	; (8004778 <lsm6dsr_read_data_polling+0x40>)
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fe83 	bl	8004468 <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <lsm6dsr_read_data_polling+0x40>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b6b      	cmp	r3, #107	; 0x6b
 8004768:	d008      	beq.n	800477c <lsm6dsr_read_data_polling+0x44>
    while(1);
 800476a:	e7fe      	b.n	800476a <lsm6dsr_read_data_polling+0x32>
 800476c:	08004b95 	.word	0x08004b95
 8004770:	08004bcf 	.word	0x08004bcf
 8004774:	20000204 	.word	0x20000204
 8004778:	200002e4 	.word	0x200002e4

  /* Restore default configuration */
  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	2101      	movs	r1, #1
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fe81 	bl	800448a <lsm6dsr_reset_set>

  do {
    lsm6dsr_reset_get(&dev_ctx, &rst);
 8004788:	f107 0308 	add.w	r3, r7, #8
 800478c:	49ca      	ldr	r1, [pc, #808]	; (8004ab8 <lsm6dsr_read_data_polling+0x380>)
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fea1 	bl	80044d6 <lsm6dsr_reset_get>
  } while (rst);
 8004794:	4bc8      	ldr	r3, [pc, #800]	; (8004ab8 <lsm6dsr_read_data_polling+0x380>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f5      	bne.n	8004788 <lsm6dsr_read_data_polling+0x50>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 800479c:	f107 0308 	add.w	r3, r7, #8
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ff0e 	bl	80045c4 <lsm6dsr_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fd0a 	bl	80041c8 <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff faea 	bl	8003d94 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	2101      	movs	r1, #1
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fc04 	bl	8003fd4 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_2g);
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fab8 	bl	8003d48 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 80047d8:	f107 0308 	add.w	r3, r7, #8
 80047dc:	210c      	movs	r1, #12
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fbd2 	bl	8003f88 <lsm6dsr_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
 80047e4:	f107 0308 	add.w	r3, r7, #8
 80047e8:	2104      	movs	r1, #4
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff feb2 	bl	8004554 <lsm6dsr_xl_hp_path_on_out_set>
  lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	2101      	movs	r1, #1
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fe86 	bl	8004508 <lsm6dsr_xl_filter_lp2_set>

  /* Read samples in polling mode */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    lsm6dsr_xl_flag_data_ready_get(&dev_ctx, &reg);
 80047fc:	1dfa      	adds	r2, r7, #7
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4611      	mov	r1, r2
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fd05 	bl	8004214 <lsm6dsr_xl_flag_data_ready_get>

    if (reg) {
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80f8 	beq.w	8004a02 <lsm6dsr_read_data_polling+0x2ca>
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004812:	2206      	movs	r2, #6
 8004814:	2100      	movs	r1, #0
 8004816:	48a9      	ldr	r0, [pc, #676]	; (8004abc <lsm6dsr_read_data_polling+0x384>)
 8004818:	f001 fa37 	bl	8005c8a <memset>
      lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	49a6      	ldr	r1, [pc, #664]	; (8004abc <lsm6dsr_read_data_polling+0x384>)
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff fdaf 	bl	8004386 <lsm6dsr_acceleration_raw_get>
     //acceleration selon l'axe x du IMU
      acceleration_mg[0] =
        lsm6dsr_from_fs4g_to_mg(data_raw_acceleration[0]);
 8004828:	4ba4      	ldr	r3, [pc, #656]	; (8004abc <lsm6dsr_read_data_polling+0x384>)
 800482a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fa3e 	bl	8003cb0 <lsm6dsr_from_fs4g_to_mg>
 8004834:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 8004838:	4ba1      	ldr	r3, [pc, #644]	; (8004ac0 <lsm6dsr_read_data_polling+0x388>)
 800483a:	edc3 7a00 	vstr	s15, [r3]
      //selon l'axe y du IMU
      acceleration_mg[1] =
        lsm6dsr_from_fs4g_to_mg(data_raw_acceleration[1]);
 800483e:	4b9f      	ldr	r3, [pc, #636]	; (8004abc <lsm6dsr_read_data_polling+0x384>)
 8004840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fa33 	bl	8003cb0 <lsm6dsr_from_fs4g_to_mg>
 800484a:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 800484e:	4b9c      	ldr	r3, [pc, #624]	; (8004ac0 <lsm6dsr_read_data_polling+0x388>)
 8004850:	edc3 7a01 	vstr	s15, [r3, #4]
      // selon l'axe z du IMU
      acceleration_mg[2] =
        lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8004854:	4b99      	ldr	r3, [pc, #612]	; (8004abc <lsm6dsr_read_data_polling+0x384>)
 8004856:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fa10 	bl	8003c80 <lsm6dsr_from_fs2g_to_mg>
 8004860:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8004864:	4b96      	ldr	r3, [pc, #600]	; (8004ac0 <lsm6dsr_read_data_polling+0x388>)
 8004866:	edc3 7a02 	vstr	s15, [r3, #8]

      /*Définition des composantes du vecteur accélération
      selon les axes principales du IMU*/
      x = acceleration_mg[0]; y = acceleration_mg[1]; z = acceleration_mg[2];
 800486a:	4b95      	ldr	r3, [pc, #596]	; (8004ac0 <lsm6dsr_read_data_polling+0x388>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a95      	ldr	r2, [pc, #596]	; (8004ac4 <lsm6dsr_read_data_polling+0x38c>)
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b93      	ldr	r3, [pc, #588]	; (8004ac0 <lsm6dsr_read_data_polling+0x388>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4a94      	ldr	r2, [pc, #592]	; (8004ac8 <lsm6dsr_read_data_polling+0x390>)
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <lsm6dsr_read_data_polling+0x388>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	4a93      	ldr	r2, [pc, #588]	; (8004acc <lsm6dsr_read_data_polling+0x394>)
 8004880:	6013      	str	r3, [r2, #0]

      sprintf((char *)tx_buffer,
 8004882:	4b90      	ldr	r3, [pc, #576]	; (8004ac4 <lsm6dsr_read_data_polling+0x38c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fb fe66 	bl	8000558 <__aeabi_f2d>
 800488c:	4680      	mov	r8, r0
 800488e:	4689      	mov	r9, r1
 8004890:	4b8d      	ldr	r3, [pc, #564]	; (8004ac8 <lsm6dsr_read_data_polling+0x390>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7fb fe5f 	bl	8000558 <__aeabi_f2d>
 800489a:	4604      	mov	r4, r0
 800489c:	460d      	mov	r5, r1
 800489e:	4b8b      	ldr	r3, [pc, #556]	; (8004acc <lsm6dsr_read_data_polling+0x394>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fb fe58 	bl	8000558 <__aeabi_f2d>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048b0:	e9cd 4500 	strd	r4, r5, [sp]
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	4985      	ldr	r1, [pc, #532]	; (8004ad0 <lsm6dsr_read_data_polling+0x398>)
 80048ba:	4886      	ldr	r0, [pc, #536]	; (8004ad4 <lsm6dsr_read_data_polling+0x39c>)
 80048bc:	f001 f982 	bl	8005bc4 <siprintf>
              "Acceleration[mg]: x:%4.2f\ty:%4.2f\tz:%4.2f\r\n",
              x, y, z);

      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80048c0:	4884      	ldr	r0, [pc, #528]	; (8004ad4 <lsm6dsr_read_data_polling+0x39c>)
 80048c2:	f7fb fcdd 	bl	8000280 <strlen>
 80048c6:	4603      	mov	r3, r0
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	4881      	ldr	r0, [pc, #516]	; (8004ad4 <lsm6dsr_read_data_polling+0x39c>)
 80048ce:	f000 f99b 	bl	8004c08 <tx_com>

      //Calcul de l'angle radiale phi et azimutale theta:
      phi_angle = (180/PI)*atan(x/y);
 80048d2:	4b7c      	ldr	r3, [pc, #496]	; (8004ac4 <lsm6dsr_read_data_polling+0x38c>)
 80048d4:	ed93 7a00 	vldr	s14, [r3]
 80048d8:	4b7b      	ldr	r3, [pc, #492]	; (8004ac8 <lsm6dsr_read_data_polling+0x390>)
 80048da:	edd3 7a00 	vldr	s15, [r3]
 80048de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048e2:	ee16 0a90 	vmov	r0, s13
 80048e6:	f7fb fe37 	bl	8000558 <__aeabi_f2d>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	ec43 2b10 	vmov	d0, r2, r3
 80048f2:	f003 fb61 	bl	8007fb8 <atan>
 80048f6:	ec51 0b10 	vmov	r0, r1, d0
 80048fa:	a36b      	add	r3, pc, #428	; (adr r3, 8004aa8 <lsm6dsr_read_data_polling+0x370>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fe82 	bl	8000608 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f954 	bl	8000bb8 <__aeabi_d2f>
 8004910:	4603      	mov	r3, r0
 8004912:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <lsm6dsr_read_data_polling+0x3a0>)
 8004914:	6013      	str	r3, [r2, #0]
      theta_angle = (180/PI)*atan(sqrt(pow(y,2)+pow(x,2))/z);
 8004916:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <lsm6dsr_read_data_polling+0x390>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fb fe1c 	bl	8000558 <__aeabi_f2d>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8004ab0 <lsm6dsr_read_data_polling+0x378>
 8004928:	ec43 2b10 	vmov	d0, r2, r3
 800492c:	f003 faa8 	bl	8007e80 <pow>
 8004930:	ec55 4b10 	vmov	r4, r5, d0
 8004934:	4b63      	ldr	r3, [pc, #396]	; (8004ac4 <lsm6dsr_read_data_polling+0x38c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fb fe0d 	bl	8000558 <__aeabi_f2d>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8004ab0 <lsm6dsr_read_data_polling+0x378>
 8004946:	ec43 2b10 	vmov	d0, r2, r3
 800494a:	f003 fa99 	bl	8007e80 <pow>
 800494e:	ec53 2b10 	vmov	r2, r3, d0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fb fca1 	bl	800029c <__adddf3>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	ec43 2b17 	vmov	d7, r2, r3
 8004962:	eeb0 0a47 	vmov.f32	s0, s14
 8004966:	eef0 0a67 	vmov.f32	s1, s15
 800496a:	f003 faf9 	bl	8007f60 <sqrt>
 800496e:	ec55 4b10 	vmov	r4, r5, d0
 8004972:	4b56      	ldr	r3, [pc, #344]	; (8004acc <lsm6dsr_read_data_polling+0x394>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fb fdee 	bl	8000558 <__aeabi_f2d>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb ff6a 	bl	800085c <__aeabi_ddiv>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	ec43 2b17 	vmov	d7, r2, r3
 8004990:	eeb0 0a47 	vmov.f32	s0, s14
 8004994:	eef0 0a67 	vmov.f32	s1, s15
 8004998:	f003 fb0e 	bl	8007fb8 <atan>
 800499c:	ec51 0b10 	vmov	r0, r1, d0
 80049a0:	a341      	add	r3, pc, #260	; (adr r3, 8004aa8 <lsm6dsr_read_data_polling+0x370>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fe2f 	bl	8000608 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fc f901 	bl	8000bb8 <__aeabi_d2f>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4a48      	ldr	r2, [pc, #288]	; (8004adc <lsm6dsr_read_data_polling+0x3a4>)
 80049ba:	6013      	str	r3, [r2, #0]

      sprintf((char *)tx_buffer,"angle phi et theta[deg]: phi=%4.2f\ttheta=%4.2f\r\n",phi_angle,theta_angle);
 80049bc:	4b46      	ldr	r3, [pc, #280]	; (8004ad8 <lsm6dsr_read_data_polling+0x3a0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fb fdc9 	bl	8000558 <__aeabi_f2d>
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	4b44      	ldr	r3, [pc, #272]	; (8004adc <lsm6dsr_read_data_polling+0x3a4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fb fdc2 	bl	8000558 <__aeabi_f2d>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	e9cd 2300 	strd	r2, r3, [sp]
 80049dc:	4622      	mov	r2, r4
 80049de:	462b      	mov	r3, r5
 80049e0:	493f      	ldr	r1, [pc, #252]	; (8004ae0 <lsm6dsr_read_data_polling+0x3a8>)
 80049e2:	483c      	ldr	r0, [pc, #240]	; (8004ad4 <lsm6dsr_read_data_polling+0x39c>)
 80049e4:	f001 f8ee 	bl	8005bc4 <siprintf>

      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80049e8:	483a      	ldr	r0, [pc, #232]	; (8004ad4 <lsm6dsr_read_data_polling+0x39c>)
 80049ea:	f7fb fc49 	bl	8000280 <strlen>
 80049ee:	4603      	mov	r3, r0
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4619      	mov	r1, r3
 80049f4:	4837      	ldr	r0, [pc, #220]	; (8004ad4 <lsm6dsr_read_data_polling+0x39c>)
 80049f6:	f000 f907 	bl	8004c08 <tx_com>

      HAL_Delay(1000);
 80049fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049fe:	f7fc fe4d 	bl	800169c <HAL_Delay>
    }

    lsm6dsr_gy_flag_data_ready_get(&dev_ctx, &reg);
 8004a02:	1dfa      	adds	r2, r7, #7
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fc1b 	bl	8004246 <lsm6dsr_gy_flag_data_ready_get>

    if (reg) {
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d07b      	beq.n	8004b0e <lsm6dsr_read_data_polling+0x3d6>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004a16:	2206      	movs	r2, #6
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4832      	ldr	r0, [pc, #200]	; (8004ae4 <lsm6dsr_read_data_polling+0x3ac>)
 8004a1c:	f001 f935 	bl	8005c8a <memset>
      lsm6dsr_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8004a20:	f107 0308 	add.w	r3, r7, #8
 8004a24:	492f      	ldr	r1, [pc, #188]	; (8004ae4 <lsm6dsr_read_data_polling+0x3ac>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fc62 	bl	80042f0 <lsm6dsr_angular_rate_raw_get>
      angular_rate_mdps[0] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <lsm6dsr_read_data_polling+0x3ac>)
 8004a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff f954 	bl	8003ce0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004a38:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[0] =
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <lsm6dsr_read_data_polling+0x3b0>)
 8004a3e:	edc3 7a00 	vstr	s15, [r3]
      angular_rate_mdps[1] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004a42:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <lsm6dsr_read_data_polling+0x3ac>)
 8004a44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff f949 	bl	8003ce0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004a4e:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[1] =
 8004a52:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <lsm6dsr_read_data_polling+0x3b0>)
 8004a54:	edc3 7a01 	vstr	s15, [r3, #4]
      angular_rate_mdps[2] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <lsm6dsr_read_data_polling+0x3ac>)
 8004a5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff f93e 	bl	8003ce0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004a64:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[2] =
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <lsm6dsr_read_data_polling+0x3b0>)
 8004a6a:	edc3 7a02 	vstr	s15, [r3, #8]

      sprintf((char *)tx_buffer,
              "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <lsm6dsr_read_data_polling+0x3b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fb fd70 	bl	8000558 <__aeabi_f2d>
 8004a78:	4680      	mov	r8, r0
 8004a7a:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <lsm6dsr_read_data_polling+0x3b0>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fb fd69 	bl	8000558 <__aeabi_f2d>
 8004a86:	4604      	mov	r4, r0
 8004a88:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <lsm6dsr_read_data_polling+0x3b0>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fb fd62 	bl	8000558 <__aeabi_f2d>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a9c:	e9cd 4500 	strd	r4, r5, [sp]
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	e022      	b.n	8004aec <lsm6dsr_read_data_polling+0x3b4>
 8004aa6:	bf00      	nop
 8004aa8:	1a63c1f8 	.word	0x1a63c1f8
 8004aac:	404ca5dc 	.word	0x404ca5dc
 8004ab0:	00000000 	.word	0x00000000
 8004ab4:	40000000 	.word	0x40000000
 8004ab8:	200002e5 	.word	0x200002e5
 8004abc:	200002a4 	.word	0x200002a4
 8004ac0:	200002c8 	.word	0x200002c8
 8004ac4:	200002bc 	.word	0x200002bc
 8004ac8:	200002c0 	.word	0x200002c0
 8004acc:	200002c4 	.word	0x200002c4
 8004ad0:	080090a8 	.word	0x080090a8
 8004ad4:	200002e8 	.word	0x200002e8
 8004ad8:	200002b8 	.word	0x200002b8
 8004adc:	200002b4 	.word	0x200002b4
 8004ae0:	080090d4 	.word	0x080090d4
 8004ae4:	200002ac 	.word	0x200002ac
 8004ae8:	200002d4 	.word	0x200002d4
 8004aec:	4924      	ldr	r1, [pc, #144]	; (8004b80 <lsm6dsr_read_data_polling+0x448>)
 8004aee:	4825      	ldr	r0, [pc, #148]	; (8004b84 <lsm6dsr_read_data_polling+0x44c>)
 8004af0:	f001 f868 	bl	8005bc4 <siprintf>

      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8004af4:	4823      	ldr	r0, [pc, #140]	; (8004b84 <lsm6dsr_read_data_polling+0x44c>)
 8004af6:	f7fb fbc3 	bl	8000280 <strlen>
 8004afa:	4603      	mov	r3, r0
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	4820      	ldr	r0, [pc, #128]	; (8004b84 <lsm6dsr_read_data_polling+0x44c>)
 8004b02:	f000 f881 	bl	8004c08 <tx_com>
      HAL_Delay(1000);
 8004b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b0a:	f7fc fdc7 	bl	800169c <HAL_Delay>
    }

    lsm6dsr_temp_flag_data_ready_get(&dev_ctx, &reg);
 8004b0e:	1dfa      	adds	r2, r7, #7
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fbae 	bl	8004278 <lsm6dsr_temp_flag_data_ready_get>

    if (reg) {
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f43f ae6c 	beq.w	80047fc <lsm6dsr_read_data_polling+0xc4>
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <lsm6dsr_read_data_polling+0x450>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	801a      	strh	r2, [r3, #0]
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      lsm6dsr_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	4916      	ldr	r1, [pc, #88]	; (8004b88 <lsm6dsr_read_data_polling+0x450>)
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fbba 	bl	80042aa <lsm6dsr_temperature_raw_get>
      temperature_degC = lsm6dsr_from_lsb_to_celsius(
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <lsm6dsr_read_data_polling+0x450>)
 8004b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff f8e7 	bl	8003d10 <lsm6dsr_from_lsb_to_celsius>
 8004b42:	eef0 7a40 	vmov.f32	s15, s0
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <lsm6dsr_read_data_polling+0x454>)
 8004b48:	edc3 7a00 	vstr	s15, [r3]
                           data_raw_temperature);


       sprintf((char *)tx_buffer,
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <lsm6dsr_read_data_polling+0x454>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fd01 	bl	8000558 <__aeabi_f2d>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	490d      	ldr	r1, [pc, #52]	; (8004b90 <lsm6dsr_read_data_polling+0x458>)
 8004b5c:	4809      	ldr	r0, [pc, #36]	; (8004b84 <lsm6dsr_read_data_polling+0x44c>)
 8004b5e:	f001 f831 	bl	8005bc4 <siprintf>
              "Temperature [degC]:%6.2f\r\n", temperature_degC);
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8004b62:	4808      	ldr	r0, [pc, #32]	; (8004b84 <lsm6dsr_read_data_polling+0x44c>)
 8004b64:	f7fb fb8c 	bl	8000280 <strlen>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <lsm6dsr_read_data_polling+0x44c>)
 8004b70:	f000 f84a 	bl	8004c08 <tx_com>
      HAL_Delay(1000);
 8004b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b78:	f7fc fd90 	bl	800169c <HAL_Delay>
  while (1) {
 8004b7c:	e63e      	b.n	80047fc <lsm6dsr_read_data_polling+0xc4>
 8004b7e:	bf00      	nop
 8004b80:	08009108 	.word	0x08009108
 8004b84:	200002e8 	.word	0x200002e8
 8004b88:	200002b2 	.word	0x200002b2
 8004b8c:	200002e0 	.word	0x200002e0
 8004b90:	08009130 	.word	0x08009130

08004b94 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af04      	add	r7, sp, #16
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	72fb      	strb	r3, [r7, #11]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg,
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	893b      	ldrh	r3, [r7, #8]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	21d5      	movs	r1, #213	; 0xd5
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7fd f958 	bl	8001e74 <HAL_I2C_Mem_Write>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  LSM6DSR_I2C_ADD_L & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af04      	add	r7, sp, #16
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	460b      	mov	r3, r1
 8004bdc:	72fb      	strb	r3, [r7, #11]
 8004bde:	4613      	mov	r3, r2
 8004be0:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8004be2:	7afb      	ldrb	r3, [r7, #11]
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bea:	9302      	str	r3, [sp, #8]
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	21d5      	movs	r1, #213	; 0xd5
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7fd fa35 	bl	8002068 <HAL_I2C_Mem_Read>
  HAL_SPI_Receive(handle, bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, LSM6DSR_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]
#if defined(NUCLEO_F401RE)
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4803      	ldr	r0, [pc, #12]	; (8004c2c <tx_com+0x24>)
 8004c1e:	f7fe fc8a 	bl	8003536 <HAL_UART_Transmit>
#elif defined(STEVAL_MKI109V3)
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	2000025c 	.word	0x2000025c

08004c30 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F401RE) | defined(STEVAL_MKI109V3)
  HAL_Delay(ms);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fd2f 	bl	800169c <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	0000      	movs	r0, r0
	...

08004c58 <lsm6dsr_read_data_polling_2>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm6dsr_read_data_polling_2(void)
{
 8004c58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c5c:	b08a      	sub	sp, #40	; 0x28
 8004c5e:	af04      	add	r7, sp, #16
  stmdev_ctx_t dev_ctx;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <lsm6dsr_read_data_polling_2+0x34>)
 8004c62:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <lsm6dsr_read_data_polling_2+0x38>)
 8004c66:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &hi2c1;
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <lsm6dsr_read_data_polling_2+0x3c>)
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Init test platform */
  platform_init();
 8004c6c:	f000 fa7b 	bl	8005166 <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8004c70:	200a      	movs	r0, #10
 8004c72:	f000 fa6d 	bl	8005150 <platform_delay>
  /* Check device ID */
  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4907      	ldr	r1, [pc, #28]	; (8004c98 <lsm6dsr_read_data_polling_2+0x40>)
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fbf3 	bl	8004468 <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <lsm6dsr_read_data_polling_2+0x40>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b6b      	cmp	r3, #107	; 0x6b
 8004c88:	d008      	beq.n	8004c9c <lsm6dsr_read_data_polling_2+0x44>
    while(1);
 8004c8a:	e7fe      	b.n	8004c8a <lsm6dsr_read_data_polling_2+0x32>
 8004c8c:	080050b5 	.word	0x080050b5
 8004c90:	080050ef 	.word	0x080050ef
 8004c94:	20000204 	.word	0x20000204
 8004c98:	20000710 	.word	0x20000710

  /* Restore default configuration */
  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fbf1 	bl	800448a <lsm6dsr_reset_set>

  do {
    lsm6dsr_reset_get(&dev_ctx, &rst);
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	49ca      	ldr	r1, [pc, #808]	; (8004fd8 <lsm6dsr_read_data_polling_2+0x380>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fc11 	bl	80044d6 <lsm6dsr_reset_get>
  } while (rst);
 8004cb4:	4bc8      	ldr	r3, [pc, #800]	; (8004fd8 <lsm6dsr_read_data_polling_2+0x380>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f5      	bne.n	8004ca8 <lsm6dsr_read_data_polling_2+0x50>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 8004cbc:	f107 0308 	add.w	r3, r7, #8
 8004cc0:	2180      	movs	r1, #128	; 0x80
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fc7e 	bl	80045c4 <lsm6dsr_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fa7a 	bl	80041c8 <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 8004cd4:	f107 0308 	add.w	r3, r7, #8
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f85a 	bl	8003d94 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff f974 	bl	8003fd4 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_2g);
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff f828 	bl	8003d48 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 8004cf8:	f107 0308 	add.w	r3, r7, #8
 8004cfc:	210c      	movs	r1, #12
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f942 	bl	8003f88 <lsm6dsr_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
 8004d04:	f107 0308 	add.w	r3, r7, #8
 8004d08:	2104      	movs	r1, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fc22 	bl	8004554 <lsm6dsr_xl_hp_path_on_out_set>
  lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	2101      	movs	r1, #1
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fbf6 	bl	8004508 <lsm6dsr_xl_filter_lp2_set>

  /* Read samples in polling mode */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    lsm6dsr_xl_flag_data_ready_get(&dev_ctx, &reg);
 8004d1c:	1dfa      	adds	r2, r7, #7
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fa75 	bl	8004214 <lsm6dsr_xl_flag_data_ready_get>

    if (reg) {
 8004d2a:	79fb      	ldrb	r3, [r7, #7]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80f8 	beq.w	8004f22 <lsm6dsr_read_data_polling_2+0x2ca>
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004d32:	2206      	movs	r2, #6
 8004d34:	2100      	movs	r1, #0
 8004d36:	48a9      	ldr	r0, [pc, #676]	; (8004fdc <lsm6dsr_read_data_polling_2+0x384>)
 8004d38:	f000 ffa7 	bl	8005c8a <memset>
      lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	49a6      	ldr	r1, [pc, #664]	; (8004fdc <lsm6dsr_read_data_polling_2+0x384>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fb1f 	bl	8004386 <lsm6dsr_acceleration_raw_get>
     //acceleration selon l'axe x du IMU
      acceleration_mg[0] =
        lsm6dsr_from_fs4g_to_mg(data_raw_acceleration[0]);
 8004d48:	4ba4      	ldr	r3, [pc, #656]	; (8004fdc <lsm6dsr_read_data_polling_2+0x384>)
 8004d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe ffae 	bl	8003cb0 <lsm6dsr_from_fs4g_to_mg>
 8004d54:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 8004d58:	4ba1      	ldr	r3, [pc, #644]	; (8004fe0 <lsm6dsr_read_data_polling_2+0x388>)
 8004d5a:	edc3 7a00 	vstr	s15, [r3]
      //selon l'axe y du IMU
      acceleration_mg[1] =
        lsm6dsr_from_fs4g_to_mg(data_raw_acceleration[1]);
 8004d5e:	4b9f      	ldr	r3, [pc, #636]	; (8004fdc <lsm6dsr_read_data_polling_2+0x384>)
 8004d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe ffa3 	bl	8003cb0 <lsm6dsr_from_fs4g_to_mg>
 8004d6a:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 8004d6e:	4b9c      	ldr	r3, [pc, #624]	; (8004fe0 <lsm6dsr_read_data_polling_2+0x388>)
 8004d70:	edc3 7a01 	vstr	s15, [r3, #4]
      // selon l'axe z du IMU
      acceleration_mg[2] =
        lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8004d74:	4b99      	ldr	r3, [pc, #612]	; (8004fdc <lsm6dsr_read_data_polling_2+0x384>)
 8004d76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe ff80 	bl	8003c80 <lsm6dsr_from_fs2g_to_mg>
 8004d80:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8004d84:	4b96      	ldr	r3, [pc, #600]	; (8004fe0 <lsm6dsr_read_data_polling_2+0x388>)
 8004d86:	edc3 7a02 	vstr	s15, [r3, #8]

      /*Définition des composantes du vecteur accélération
      selon les axes principales du IMU*/
      x = acceleration_mg[0]; y = acceleration_mg[1]; z = acceleration_mg[2];
 8004d8a:	4b95      	ldr	r3, [pc, #596]	; (8004fe0 <lsm6dsr_read_data_polling_2+0x388>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a95      	ldr	r2, [pc, #596]	; (8004fe4 <lsm6dsr_read_data_polling_2+0x38c>)
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	4b93      	ldr	r3, [pc, #588]	; (8004fe0 <lsm6dsr_read_data_polling_2+0x388>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a94      	ldr	r2, [pc, #592]	; (8004fe8 <lsm6dsr_read_data_polling_2+0x390>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <lsm6dsr_read_data_polling_2+0x388>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4a93      	ldr	r2, [pc, #588]	; (8004fec <lsm6dsr_read_data_polling_2+0x394>)
 8004da0:	6013      	str	r3, [r2, #0]

      sprintf((char *)tx_buffer,
 8004da2:	4b90      	ldr	r3, [pc, #576]	; (8004fe4 <lsm6dsr_read_data_polling_2+0x38c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fbd6 	bl	8000558 <__aeabi_f2d>
 8004dac:	4680      	mov	r8, r0
 8004dae:	4689      	mov	r9, r1
 8004db0:	4b8d      	ldr	r3, [pc, #564]	; (8004fe8 <lsm6dsr_read_data_polling_2+0x390>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb fbcf 	bl	8000558 <__aeabi_f2d>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	4b8b      	ldr	r3, [pc, #556]	; (8004fec <lsm6dsr_read_data_polling_2+0x394>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fb fbc8 	bl	8000558 <__aeabi_f2d>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dd0:	e9cd 4500 	strd	r4, r5, [sp]
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	4985      	ldr	r1, [pc, #532]	; (8004ff0 <lsm6dsr_read_data_polling_2+0x398>)
 8004dda:	4886      	ldr	r0, [pc, #536]	; (8004ff4 <lsm6dsr_read_data_polling_2+0x39c>)
 8004ddc:	f000 fef2 	bl	8005bc4 <siprintf>
              "Acceleration_2[mg]: x:%4.2f\ty:%4.2f\tz:%4.2f\r\n",
              x, y, z);

      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8004de0:	4884      	ldr	r0, [pc, #528]	; (8004ff4 <lsm6dsr_read_data_polling_2+0x39c>)
 8004de2:	f7fb fa4d 	bl	8000280 <strlen>
 8004de6:	4603      	mov	r3, r0
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	4881      	ldr	r0, [pc, #516]	; (8004ff4 <lsm6dsr_read_data_polling_2+0x39c>)
 8004dee:	f000 f99b 	bl	8005128 <tx_com>

      //Calcul de l'angle radiale phi et azimutale theta:
      phi_angle = (180/PI)*atan(x/y);
 8004df2:	4b7c      	ldr	r3, [pc, #496]	; (8004fe4 <lsm6dsr_read_data_polling_2+0x38c>)
 8004df4:	ed93 7a00 	vldr	s14, [r3]
 8004df8:	4b7b      	ldr	r3, [pc, #492]	; (8004fe8 <lsm6dsr_read_data_polling_2+0x390>)
 8004dfa:	edd3 7a00 	vldr	s15, [r3]
 8004dfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004e02:	ee16 0a90 	vmov	r0, s13
 8004e06:	f7fb fba7 	bl	8000558 <__aeabi_f2d>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	ec43 2b10 	vmov	d0, r2, r3
 8004e12:	f003 f8d1 	bl	8007fb8 <atan>
 8004e16:	ec51 0b10 	vmov	r0, r1, d0
 8004e1a:	a36b      	add	r3, pc, #428	; (adr r3, 8004fc8 <lsm6dsr_read_data_polling_2+0x370>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f7fb fbf2 	bl	8000608 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7fb fec4 	bl	8000bb8 <__aeabi_d2f>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4a71      	ldr	r2, [pc, #452]	; (8004ff8 <lsm6dsr_read_data_polling_2+0x3a0>)
 8004e34:	6013      	str	r3, [r2, #0]
      theta_angle = (180/PI)*atan(sqrt(pow(y,2)+pow(x,2))/z);
 8004e36:	4b6c      	ldr	r3, [pc, #432]	; (8004fe8 <lsm6dsr_read_data_polling_2+0x390>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fb fb8c 	bl	8000558 <__aeabi_f2d>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8004fd0 <lsm6dsr_read_data_polling_2+0x378>
 8004e48:	ec43 2b10 	vmov	d0, r2, r3
 8004e4c:	f003 f818 	bl	8007e80 <pow>
 8004e50:	ec55 4b10 	vmov	r4, r5, d0
 8004e54:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <lsm6dsr_read_data_polling_2+0x38c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fb7d 	bl	8000558 <__aeabi_f2d>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8004fd0 <lsm6dsr_read_data_polling_2+0x378>
 8004e66:	ec43 2b10 	vmov	d0, r2, r3
 8004e6a:	f003 f809 	bl	8007e80 <pow>
 8004e6e:	ec53 2b10 	vmov	r2, r3, d0
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fa11 	bl	800029c <__adddf3>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	ec43 2b17 	vmov	d7, r2, r3
 8004e82:	eeb0 0a47 	vmov.f32	s0, s14
 8004e86:	eef0 0a67 	vmov.f32	s1, s15
 8004e8a:	f003 f869 	bl	8007f60 <sqrt>
 8004e8e:	ec55 4b10 	vmov	r4, r5, d0
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <lsm6dsr_read_data_polling_2+0x394>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb5e 	bl	8000558 <__aeabi_f2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fcda 	bl	800085c <__aeabi_ddiv>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	ec43 2b17 	vmov	d7, r2, r3
 8004eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8004eb4:	eef0 0a67 	vmov.f32	s1, s15
 8004eb8:	f003 f87e 	bl	8007fb8 <atan>
 8004ebc:	ec51 0b10 	vmov	r0, r1, d0
 8004ec0:	a341      	add	r3, pc, #260	; (adr r3, 8004fc8 <lsm6dsr_read_data_polling_2+0x370>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb fb9f 	bl	8000608 <__aeabi_dmul>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	f7fb fe71 	bl	8000bb8 <__aeabi_d2f>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4a48      	ldr	r2, [pc, #288]	; (8004ffc <lsm6dsr_read_data_polling_2+0x3a4>)
 8004eda:	6013      	str	r3, [r2, #0]

      sprintf((char *)tx_buffer,"angle phi_2 et theta_2[deg]: phi=%4.2f\ttheta=%4.2f\r\n",phi_angle,theta_angle);
 8004edc:	4b46      	ldr	r3, [pc, #280]	; (8004ff8 <lsm6dsr_read_data_polling_2+0x3a0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fb fb39 	bl	8000558 <__aeabi_f2d>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	460d      	mov	r5, r1
 8004eea:	4b44      	ldr	r3, [pc, #272]	; (8004ffc <lsm6dsr_read_data_polling_2+0x3a4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fb fb32 	bl	8000558 <__aeabi_f2d>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	e9cd 2300 	strd	r2, r3, [sp]
 8004efc:	4622      	mov	r2, r4
 8004efe:	462b      	mov	r3, r5
 8004f00:	493f      	ldr	r1, [pc, #252]	; (8005000 <lsm6dsr_read_data_polling_2+0x3a8>)
 8004f02:	483c      	ldr	r0, [pc, #240]	; (8004ff4 <lsm6dsr_read_data_polling_2+0x39c>)
 8004f04:	f000 fe5e 	bl	8005bc4 <siprintf>

      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8004f08:	483a      	ldr	r0, [pc, #232]	; (8004ff4 <lsm6dsr_read_data_polling_2+0x39c>)
 8004f0a:	f7fb f9b9 	bl	8000280 <strlen>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	4619      	mov	r1, r3
 8004f14:	4837      	ldr	r0, [pc, #220]	; (8004ff4 <lsm6dsr_read_data_polling_2+0x39c>)
 8004f16:	f000 f907 	bl	8005128 <tx_com>

      HAL_Delay(1000);
 8004f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f1e:	f7fc fbbd 	bl	800169c <HAL_Delay>
    }

    lsm6dsr_gy_flag_data_ready_get(&dev_ctx, &reg);
 8004f22:	1dfa      	adds	r2, r7, #7
 8004f24:	f107 0308 	add.w	r3, r7, #8
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f98b 	bl	8004246 <lsm6dsr_gy_flag_data_ready_get>

    if (reg) {
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07b      	beq.n	800502e <lsm6dsr_read_data_polling_2+0x3d6>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004f36:	2206      	movs	r2, #6
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4832      	ldr	r0, [pc, #200]	; (8005004 <lsm6dsr_read_data_polling_2+0x3ac>)
 8004f3c:	f000 fea5 	bl	8005c8a <memset>
      lsm6dsr_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8004f40:	f107 0308 	add.w	r3, r7, #8
 8004f44:	492f      	ldr	r1, [pc, #188]	; (8005004 <lsm6dsr_read_data_polling_2+0x3ac>)
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f9d2 	bl	80042f0 <lsm6dsr_angular_rate_raw_get>
      angular_rate_mdps[0] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <lsm6dsr_read_data_polling_2+0x3ac>)
 8004f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe fec4 	bl	8003ce0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004f58:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[0] =
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <lsm6dsr_read_data_polling_2+0x3b0>)
 8004f5e:	edc3 7a00 	vstr	s15, [r3]
      angular_rate_mdps[1] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8004f62:	4b28      	ldr	r3, [pc, #160]	; (8005004 <lsm6dsr_read_data_polling_2+0x3ac>)
 8004f64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe feb9 	bl	8003ce0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004f6e:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[1] =
 8004f72:	4b25      	ldr	r3, [pc, #148]	; (8005008 <lsm6dsr_read_data_polling_2+0x3b0>)
 8004f74:	edc3 7a01 	vstr	s15, [r3, #4]
      angular_rate_mdps[2] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8004f78:	4b22      	ldr	r3, [pc, #136]	; (8005004 <lsm6dsr_read_data_polling_2+0x3ac>)
 8004f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe feae 	bl	8003ce0 <lsm6dsr_from_fs2000dps_to_mdps>
 8004f84:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[2] =
 8004f88:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <lsm6dsr_read_data_polling_2+0x3b0>)
 8004f8a:	edc3 7a02 	vstr	s15, [r3, #8]

      sprintf((char *)tx_buffer,
              "Angular rate_2 [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <lsm6dsr_read_data_polling_2+0x3b0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
      sprintf((char *)tx_buffer,
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb fae0 	bl	8000558 <__aeabi_f2d>
 8004f98:	4680      	mov	r8, r0
 8004f9a:	4689      	mov	r9, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <lsm6dsr_read_data_polling_2+0x3b0>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
      sprintf((char *)tx_buffer,
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb fad9 	bl	8000558 <__aeabi_f2d>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	460d      	mov	r5, r1
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8004faa:	4b17      	ldr	r3, [pc, #92]	; (8005008 <lsm6dsr_read_data_polling_2+0x3b0>)
 8004fac:	689b      	ldr	r3, [r3, #8]
      sprintf((char *)tx_buffer,
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb fad2 	bl	8000558 <__aeabi_f2d>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fbc:	e9cd 4500 	strd	r4, r5, [sp]
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	e022      	b.n	800500c <lsm6dsr_read_data_polling_2+0x3b4>
 8004fc6:	bf00      	nop
 8004fc8:	1a63c1f8 	.word	0x1a63c1f8
 8004fcc:	404ca5dc 	.word	0x404ca5dc
 8004fd0:	00000000 	.word	0x00000000
 8004fd4:	40000000 	.word	0x40000000
 8004fd8:	20000711 	.word	0x20000711
 8004fdc:	200006d0 	.word	0x200006d0
 8004fe0:	200006f4 	.word	0x200006f4
 8004fe4:	200006e8 	.word	0x200006e8
 8004fe8:	200006ec 	.word	0x200006ec
 8004fec:	200006f0 	.word	0x200006f0
 8004ff0:	0800914c 	.word	0x0800914c
 8004ff4:	20000714 	.word	0x20000714
 8004ff8:	200006e4 	.word	0x200006e4
 8004ffc:	200006e0 	.word	0x200006e0
 8005000:	0800917c 	.word	0x0800917c
 8005004:	200006d8 	.word	0x200006d8
 8005008:	20000700 	.word	0x20000700
 800500c:	4924      	ldr	r1, [pc, #144]	; (80050a0 <lsm6dsr_read_data_polling_2+0x448>)
 800500e:	4825      	ldr	r0, [pc, #148]	; (80050a4 <lsm6dsr_read_data_polling_2+0x44c>)
 8005010:	f000 fdd8 	bl	8005bc4 <siprintf>

      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8005014:	4823      	ldr	r0, [pc, #140]	; (80050a4 <lsm6dsr_read_data_polling_2+0x44c>)
 8005016:	f7fb f933 	bl	8000280 <strlen>
 800501a:	4603      	mov	r3, r0
 800501c:	b29b      	uxth	r3, r3
 800501e:	4619      	mov	r1, r3
 8005020:	4820      	ldr	r0, [pc, #128]	; (80050a4 <lsm6dsr_read_data_polling_2+0x44c>)
 8005022:	f000 f881 	bl	8005128 <tx_com>
      HAL_Delay(1000);
 8005026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800502a:	f7fc fb37 	bl	800169c <HAL_Delay>
    }

    lsm6dsr_temp_flag_data_ready_get(&dev_ctx, &reg);
 800502e:	1dfa      	adds	r2, r7, #7
 8005030:	f107 0308 	add.w	r3, r7, #8
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff f91e 	bl	8004278 <lsm6dsr_temp_flag_data_ready_get>

    if (reg) {
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f43f ae6c 	beq.w	8004d1c <lsm6dsr_read_data_polling_2+0xc4>
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <lsm6dsr_read_data_polling_2+0x450>)
 8005046:	2200      	movs	r2, #0
 8005048:	801a      	strh	r2, [r3, #0]
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      lsm6dsr_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	4916      	ldr	r1, [pc, #88]	; (80050a8 <lsm6dsr_read_data_polling_2+0x450>)
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff f92a 	bl	80042aa <lsm6dsr_temperature_raw_get>
      temperature_degC = lsm6dsr_from_lsb_to_celsius(
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <lsm6dsr_read_data_polling_2+0x450>)
 8005058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe fe57 	bl	8003d10 <lsm6dsr_from_lsb_to_celsius>
 8005062:	eef0 7a40 	vmov.f32	s15, s0
 8005066:	4b11      	ldr	r3, [pc, #68]	; (80050ac <lsm6dsr_read_data_polling_2+0x454>)
 8005068:	edc3 7a00 	vstr	s15, [r3]
                           data_raw_temperature);


       sprintf((char *)tx_buffer,
 800506c:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <lsm6dsr_read_data_polling_2+0x454>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb fa71 	bl	8000558 <__aeabi_f2d>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	490d      	ldr	r1, [pc, #52]	; (80050b0 <lsm6dsr_read_data_polling_2+0x458>)
 800507c:	4809      	ldr	r0, [pc, #36]	; (80050a4 <lsm6dsr_read_data_polling_2+0x44c>)
 800507e:	f000 fda1 	bl	8005bc4 <siprintf>
              "Temperature_2 [degC]:%6.2f\r\n", temperature_degC);
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8005082:	4808      	ldr	r0, [pc, #32]	; (80050a4 <lsm6dsr_read_data_polling_2+0x44c>)
 8005084:	f7fb f8fc 	bl	8000280 <strlen>
 8005088:	4603      	mov	r3, r0
 800508a:	b29b      	uxth	r3, r3
 800508c:	4619      	mov	r1, r3
 800508e:	4805      	ldr	r0, [pc, #20]	; (80050a4 <lsm6dsr_read_data_polling_2+0x44c>)
 8005090:	f000 f84a 	bl	8005128 <tx_com>
      HAL_Delay(1000);
 8005094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005098:	f7fc fb00 	bl	800169c <HAL_Delay>
  while (1) {
 800509c:	e63e      	b.n	8004d1c <lsm6dsr_read_data_polling_2+0xc4>
 800509e:	bf00      	nop
 80050a0:	080091b4 	.word	0x080091b4
 80050a4:	20000714 	.word	0x20000714
 80050a8:	200006de 	.word	0x200006de
 80050ac:	2000070c 	.word	0x2000070c
 80050b0:	080091e0 	.word	0x080091e0

080050b4 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af04      	add	r7, sp, #16
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	461a      	mov	r2, r3
 80050c0:	460b      	mov	r3, r1
 80050c2:	72fb      	strb	r3, [r7, #11]
 80050c4:	4613      	mov	r3, r2
 80050c6:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_H, reg,
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	893b      	ldrh	r3, [r7, #8]
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2301      	movs	r3, #1
 80050dc:	21d7      	movs	r1, #215	; 0xd7
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7fc fec8 	bl	8001e74 <HAL_I2C_Mem_Write>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  LSM6DSR_I2C_ADD_L & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b088      	sub	sp, #32
 80050f2:	af04      	add	r7, sp, #16
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	461a      	mov	r2, r3
 80050fa:	460b      	mov	r3, r1
 80050fc:	72fb      	strb	r3, [r7, #11]
 80050fe:	4613      	mov	r3, r2
 8005100:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	b29a      	uxth	r2, r3
 8005106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	893b      	ldrh	r3, [r7, #8]
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2301      	movs	r3, #1
 8005116:	21d5      	movs	r1, #213	; 0xd5
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7fc ffa5 	bl	8002068 <HAL_I2C_Mem_Read>
  HAL_SPI_Receive(handle, bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, LSM6DSR_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
#if defined(NUCLEO_F401RE)
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8005134:	887a      	ldrh	r2, [r7, #2]
 8005136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <tx_com+0x24>)
 800513e:	f7fe f9fa 	bl	8003536 <HAL_UART_Transmit>
#elif defined(STEVAL_MKI109V3)
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	2000025c 	.word	0x2000025c

08005150 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F401RE) | defined(STEVAL_MKI109V3)
  HAL_Delay(ms);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fc fa9f 	bl	800169c <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <__cvt>:
 8005174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	ec55 4b10 	vmov	r4, r5, d0
 800517c:	2d00      	cmp	r5, #0
 800517e:	460e      	mov	r6, r1
 8005180:	4619      	mov	r1, r3
 8005182:	462b      	mov	r3, r5
 8005184:	bfbb      	ittet	lt
 8005186:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800518a:	461d      	movlt	r5, r3
 800518c:	2300      	movge	r3, #0
 800518e:	232d      	movlt	r3, #45	; 0x2d
 8005190:	700b      	strb	r3, [r1, #0]
 8005192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005194:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005198:	4691      	mov	r9, r2
 800519a:	f023 0820 	bic.w	r8, r3, #32
 800519e:	bfbc      	itt	lt
 80051a0:	4622      	movlt	r2, r4
 80051a2:	4614      	movlt	r4, r2
 80051a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051a8:	d005      	beq.n	80051b6 <__cvt+0x42>
 80051aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051ae:	d100      	bne.n	80051b2 <__cvt+0x3e>
 80051b0:	3601      	adds	r6, #1
 80051b2:	2102      	movs	r1, #2
 80051b4:	e000      	b.n	80051b8 <__cvt+0x44>
 80051b6:	2103      	movs	r1, #3
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	ab02      	add	r3, sp, #8
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	ec45 4b10 	vmov	d0, r4, r5
 80051c4:	4653      	mov	r3, sl
 80051c6:	4632      	mov	r2, r6
 80051c8:	f000 fe6a 	bl	8005ea0 <_dtoa_r>
 80051cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051d0:	4607      	mov	r7, r0
 80051d2:	d102      	bne.n	80051da <__cvt+0x66>
 80051d4:	f019 0f01 	tst.w	r9, #1
 80051d8:	d022      	beq.n	8005220 <__cvt+0xac>
 80051da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051de:	eb07 0906 	add.w	r9, r7, r6
 80051e2:	d110      	bne.n	8005206 <__cvt+0x92>
 80051e4:	783b      	ldrb	r3, [r7, #0]
 80051e6:	2b30      	cmp	r3, #48	; 0x30
 80051e8:	d10a      	bne.n	8005200 <__cvt+0x8c>
 80051ea:	2200      	movs	r2, #0
 80051ec:	2300      	movs	r3, #0
 80051ee:	4620      	mov	r0, r4
 80051f0:	4629      	mov	r1, r5
 80051f2:	f7fb fc71 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f6:	b918      	cbnz	r0, 8005200 <__cvt+0x8c>
 80051f8:	f1c6 0601 	rsb	r6, r6, #1
 80051fc:	f8ca 6000 	str.w	r6, [sl]
 8005200:	f8da 3000 	ldr.w	r3, [sl]
 8005204:	4499      	add	r9, r3
 8005206:	2200      	movs	r2, #0
 8005208:	2300      	movs	r3, #0
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f7fb fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 8005212:	b108      	cbz	r0, 8005218 <__cvt+0xa4>
 8005214:	f8cd 900c 	str.w	r9, [sp, #12]
 8005218:	2230      	movs	r2, #48	; 0x30
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	454b      	cmp	r3, r9
 800521e:	d307      	bcc.n	8005230 <__cvt+0xbc>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005224:	1bdb      	subs	r3, r3, r7
 8005226:	4638      	mov	r0, r7
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	b004      	add	sp, #16
 800522c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005230:	1c59      	adds	r1, r3, #1
 8005232:	9103      	str	r1, [sp, #12]
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	e7f0      	b.n	800521a <__cvt+0xa6>

08005238 <__exponent>:
 8005238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523a:	4603      	mov	r3, r0
 800523c:	2900      	cmp	r1, #0
 800523e:	bfb8      	it	lt
 8005240:	4249      	neglt	r1, r1
 8005242:	f803 2b02 	strb.w	r2, [r3], #2
 8005246:	bfb4      	ite	lt
 8005248:	222d      	movlt	r2, #45	; 0x2d
 800524a:	222b      	movge	r2, #43	; 0x2b
 800524c:	2909      	cmp	r1, #9
 800524e:	7042      	strb	r2, [r0, #1]
 8005250:	dd2a      	ble.n	80052a8 <__exponent+0x70>
 8005252:	f10d 0207 	add.w	r2, sp, #7
 8005256:	4617      	mov	r7, r2
 8005258:	260a      	movs	r6, #10
 800525a:	4694      	mov	ip, r2
 800525c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005260:	fb06 1415 	mls	r4, r6, r5, r1
 8005264:	3430      	adds	r4, #48	; 0x30
 8005266:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800526a:	460c      	mov	r4, r1
 800526c:	2c63      	cmp	r4, #99	; 0x63
 800526e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005272:	4629      	mov	r1, r5
 8005274:	dcf1      	bgt.n	800525a <__exponent+0x22>
 8005276:	3130      	adds	r1, #48	; 0x30
 8005278:	f1ac 0402 	sub.w	r4, ip, #2
 800527c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005280:	1c41      	adds	r1, r0, #1
 8005282:	4622      	mov	r2, r4
 8005284:	42ba      	cmp	r2, r7
 8005286:	d30a      	bcc.n	800529e <__exponent+0x66>
 8005288:	f10d 0209 	add.w	r2, sp, #9
 800528c:	eba2 020c 	sub.w	r2, r2, ip
 8005290:	42bc      	cmp	r4, r7
 8005292:	bf88      	it	hi
 8005294:	2200      	movhi	r2, #0
 8005296:	4413      	add	r3, r2
 8005298:	1a18      	subs	r0, r3, r0
 800529a:	b003      	add	sp, #12
 800529c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052a6:	e7ed      	b.n	8005284 <__exponent+0x4c>
 80052a8:	2330      	movs	r3, #48	; 0x30
 80052aa:	3130      	adds	r1, #48	; 0x30
 80052ac:	7083      	strb	r3, [r0, #2]
 80052ae:	70c1      	strb	r1, [r0, #3]
 80052b0:	1d03      	adds	r3, r0, #4
 80052b2:	e7f1      	b.n	8005298 <__exponent+0x60>

080052b4 <_printf_float>:
 80052b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	ed2d 8b02 	vpush	{d8}
 80052bc:	b08d      	sub	sp, #52	; 0x34
 80052be:	460c      	mov	r4, r1
 80052c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052c4:	4616      	mov	r6, r2
 80052c6:	461f      	mov	r7, r3
 80052c8:	4605      	mov	r5, r0
 80052ca:	f000 fce7 	bl	8005c9c <_localeconv_r>
 80052ce:	f8d0 a000 	ldr.w	sl, [r0]
 80052d2:	4650      	mov	r0, sl
 80052d4:	f7fa ffd4 	bl	8000280 <strlen>
 80052d8:	2300      	movs	r3, #0
 80052da:	930a      	str	r3, [sp, #40]	; 0x28
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	f8d8 3000 	ldr.w	r3, [r8]
 80052e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052e8:	3307      	adds	r3, #7
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	f103 0208 	add.w	r2, r3, #8
 80052f2:	f8c8 2000 	str.w	r2, [r8]
 80052f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	f8cd 8018 	str.w	r8, [sp, #24]
 8005304:	ee08 0a10 	vmov	s16, r0
 8005308:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800530c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005310:	4b9e      	ldr	r3, [pc, #632]	; (800558c <_printf_float+0x2d8>)
 8005312:	f04f 32ff 	mov.w	r2, #4294967295
 8005316:	f7fb fc11 	bl	8000b3c <__aeabi_dcmpun>
 800531a:	bb88      	cbnz	r0, 8005380 <_printf_float+0xcc>
 800531c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005320:	4b9a      	ldr	r3, [pc, #616]	; (800558c <_printf_float+0x2d8>)
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	f7fb fbeb 	bl	8000b00 <__aeabi_dcmple>
 800532a:	bb48      	cbnz	r0, 8005380 <_printf_float+0xcc>
 800532c:	2200      	movs	r2, #0
 800532e:	2300      	movs	r3, #0
 8005330:	4640      	mov	r0, r8
 8005332:	4649      	mov	r1, r9
 8005334:	f7fb fbda 	bl	8000aec <__aeabi_dcmplt>
 8005338:	b110      	cbz	r0, 8005340 <_printf_float+0x8c>
 800533a:	232d      	movs	r3, #45	; 0x2d
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005340:	4a93      	ldr	r2, [pc, #588]	; (8005590 <_printf_float+0x2dc>)
 8005342:	4b94      	ldr	r3, [pc, #592]	; (8005594 <_printf_float+0x2e0>)
 8005344:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005348:	bf94      	ite	ls
 800534a:	4690      	movls	r8, r2
 800534c:	4698      	movhi	r8, r3
 800534e:	2303      	movs	r3, #3
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	9b05      	ldr	r3, [sp, #20]
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	f04f 0900 	mov.w	r9, #0
 800535e:	9700      	str	r7, [sp, #0]
 8005360:	4633      	mov	r3, r6
 8005362:	aa0b      	add	r2, sp, #44	; 0x2c
 8005364:	4621      	mov	r1, r4
 8005366:	4628      	mov	r0, r5
 8005368:	f000 f9da 	bl	8005720 <_printf_common>
 800536c:	3001      	adds	r0, #1
 800536e:	f040 8090 	bne.w	8005492 <_printf_float+0x1de>
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	b00d      	add	sp, #52	; 0x34
 8005378:	ecbd 8b02 	vpop	{d8}
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	4642      	mov	r2, r8
 8005382:	464b      	mov	r3, r9
 8005384:	4640      	mov	r0, r8
 8005386:	4649      	mov	r1, r9
 8005388:	f7fb fbd8 	bl	8000b3c <__aeabi_dcmpun>
 800538c:	b140      	cbz	r0, 80053a0 <_printf_float+0xec>
 800538e:	464b      	mov	r3, r9
 8005390:	2b00      	cmp	r3, #0
 8005392:	bfbc      	itt	lt
 8005394:	232d      	movlt	r3, #45	; 0x2d
 8005396:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800539a:	4a7f      	ldr	r2, [pc, #508]	; (8005598 <_printf_float+0x2e4>)
 800539c:	4b7f      	ldr	r3, [pc, #508]	; (800559c <_printf_float+0x2e8>)
 800539e:	e7d1      	b.n	8005344 <_printf_float+0x90>
 80053a0:	6863      	ldr	r3, [r4, #4]
 80053a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053a6:	9206      	str	r2, [sp, #24]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	d13f      	bne.n	800542c <_printf_float+0x178>
 80053ac:	2306      	movs	r3, #6
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	9b05      	ldr	r3, [sp, #20]
 80053b2:	6861      	ldr	r1, [r4, #4]
 80053b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053b8:	2300      	movs	r3, #0
 80053ba:	9303      	str	r3, [sp, #12]
 80053bc:	ab0a      	add	r3, sp, #40	; 0x28
 80053be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053c2:	ab09      	add	r3, sp, #36	; 0x24
 80053c4:	ec49 8b10 	vmov	d0, r8, r9
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053d0:	4628      	mov	r0, r5
 80053d2:	f7ff fecf 	bl	8005174 <__cvt>
 80053d6:	9b06      	ldr	r3, [sp, #24]
 80053d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053da:	2b47      	cmp	r3, #71	; 0x47
 80053dc:	4680      	mov	r8, r0
 80053de:	d108      	bne.n	80053f2 <_printf_float+0x13e>
 80053e0:	1cc8      	adds	r0, r1, #3
 80053e2:	db02      	blt.n	80053ea <_printf_float+0x136>
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	4299      	cmp	r1, r3
 80053e8:	dd41      	ble.n	800546e <_printf_float+0x1ba>
 80053ea:	f1ab 0302 	sub.w	r3, fp, #2
 80053ee:	fa5f fb83 	uxtb.w	fp, r3
 80053f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053f6:	d820      	bhi.n	800543a <_printf_float+0x186>
 80053f8:	3901      	subs	r1, #1
 80053fa:	465a      	mov	r2, fp
 80053fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005400:	9109      	str	r1, [sp, #36]	; 0x24
 8005402:	f7ff ff19 	bl	8005238 <__exponent>
 8005406:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005408:	1813      	adds	r3, r2, r0
 800540a:	2a01      	cmp	r2, #1
 800540c:	4681      	mov	r9, r0
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	dc02      	bgt.n	8005418 <_printf_float+0x164>
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	07d2      	lsls	r2, r2, #31
 8005416:	d501      	bpl.n	800541c <_printf_float+0x168>
 8005418:	3301      	adds	r3, #1
 800541a:	6123      	str	r3, [r4, #16]
 800541c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005420:	2b00      	cmp	r3, #0
 8005422:	d09c      	beq.n	800535e <_printf_float+0xaa>
 8005424:	232d      	movs	r3, #45	; 0x2d
 8005426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542a:	e798      	b.n	800535e <_printf_float+0xaa>
 800542c:	9a06      	ldr	r2, [sp, #24]
 800542e:	2a47      	cmp	r2, #71	; 0x47
 8005430:	d1be      	bne.n	80053b0 <_printf_float+0xfc>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1bc      	bne.n	80053b0 <_printf_float+0xfc>
 8005436:	2301      	movs	r3, #1
 8005438:	e7b9      	b.n	80053ae <_printf_float+0xfa>
 800543a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800543e:	d118      	bne.n	8005472 <_printf_float+0x1be>
 8005440:	2900      	cmp	r1, #0
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	dd0b      	ble.n	800545e <_printf_float+0x1aa>
 8005446:	6121      	str	r1, [r4, #16]
 8005448:	b913      	cbnz	r3, 8005450 <_printf_float+0x19c>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	07d0      	lsls	r0, r2, #31
 800544e:	d502      	bpl.n	8005456 <_printf_float+0x1a2>
 8005450:	3301      	adds	r3, #1
 8005452:	440b      	add	r3, r1
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	65a1      	str	r1, [r4, #88]	; 0x58
 8005458:	f04f 0900 	mov.w	r9, #0
 800545c:	e7de      	b.n	800541c <_printf_float+0x168>
 800545e:	b913      	cbnz	r3, 8005466 <_printf_float+0x1b2>
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	07d2      	lsls	r2, r2, #31
 8005464:	d501      	bpl.n	800546a <_printf_float+0x1b6>
 8005466:	3302      	adds	r3, #2
 8005468:	e7f4      	b.n	8005454 <_printf_float+0x1a0>
 800546a:	2301      	movs	r3, #1
 800546c:	e7f2      	b.n	8005454 <_printf_float+0x1a0>
 800546e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005474:	4299      	cmp	r1, r3
 8005476:	db05      	blt.n	8005484 <_printf_float+0x1d0>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	6121      	str	r1, [r4, #16]
 800547c:	07d8      	lsls	r0, r3, #31
 800547e:	d5ea      	bpl.n	8005456 <_printf_float+0x1a2>
 8005480:	1c4b      	adds	r3, r1, #1
 8005482:	e7e7      	b.n	8005454 <_printf_float+0x1a0>
 8005484:	2900      	cmp	r1, #0
 8005486:	bfd4      	ite	le
 8005488:	f1c1 0202 	rsble	r2, r1, #2
 800548c:	2201      	movgt	r2, #1
 800548e:	4413      	add	r3, r2
 8005490:	e7e0      	b.n	8005454 <_printf_float+0x1a0>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	055a      	lsls	r2, r3, #21
 8005496:	d407      	bmi.n	80054a8 <_printf_float+0x1f4>
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	4642      	mov	r2, r8
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	d12c      	bne.n	8005500 <_printf_float+0x24c>
 80054a6:	e764      	b.n	8005372 <_printf_float+0xbe>
 80054a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ac:	f240 80e0 	bls.w	8005670 <_printf_float+0x3bc>
 80054b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f7fb fb0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d034      	beq.n	800552a <_printf_float+0x276>
 80054c0:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <_printf_float+0x2ec>)
 80054c2:	2301      	movs	r3, #1
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af51 	beq.w	8005372 <_printf_float+0xbe>
 80054d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054d4:	429a      	cmp	r2, r3
 80054d6:	db02      	blt.n	80054de <_printf_float+0x22a>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	07d8      	lsls	r0, r3, #31
 80054dc:	d510      	bpl.n	8005500 <_printf_float+0x24c>
 80054de:	ee18 3a10 	vmov	r3, s16
 80054e2:	4652      	mov	r2, sl
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	47b8      	blx	r7
 80054ea:	3001      	adds	r0, #1
 80054ec:	f43f af41 	beq.w	8005372 <_printf_float+0xbe>
 80054f0:	f04f 0800 	mov.w	r8, #0
 80054f4:	f104 091a 	add.w	r9, r4, #26
 80054f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	4543      	cmp	r3, r8
 80054fe:	dc09      	bgt.n	8005514 <_printf_float+0x260>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	079b      	lsls	r3, r3, #30
 8005504:	f100 8107 	bmi.w	8005716 <_printf_float+0x462>
 8005508:	68e0      	ldr	r0, [r4, #12]
 800550a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800550c:	4298      	cmp	r0, r3
 800550e:	bfb8      	it	lt
 8005510:	4618      	movlt	r0, r3
 8005512:	e730      	b.n	8005376 <_printf_float+0xc2>
 8005514:	2301      	movs	r3, #1
 8005516:	464a      	mov	r2, r9
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f af27 	beq.w	8005372 <_printf_float+0xbe>
 8005524:	f108 0801 	add.w	r8, r8, #1
 8005528:	e7e6      	b.n	80054f8 <_printf_float+0x244>
 800552a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	dc39      	bgt.n	80055a4 <_printf_float+0x2f0>
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <_printf_float+0x2ec>)
 8005532:	2301      	movs	r3, #1
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af19 	beq.w	8005372 <_printf_float+0xbe>
 8005540:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005544:	4313      	orrs	r3, r2
 8005546:	d102      	bne.n	800554e <_printf_float+0x29a>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07d9      	lsls	r1, r3, #31
 800554c:	d5d8      	bpl.n	8005500 <_printf_float+0x24c>
 800554e:	ee18 3a10 	vmov	r3, s16
 8005552:	4652      	mov	r2, sl
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af09 	beq.w	8005372 <_printf_float+0xbe>
 8005560:	f04f 0900 	mov.w	r9, #0
 8005564:	f104 0a1a 	add.w	sl, r4, #26
 8005568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556a:	425b      	negs	r3, r3
 800556c:	454b      	cmp	r3, r9
 800556e:	dc01      	bgt.n	8005574 <_printf_float+0x2c0>
 8005570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005572:	e792      	b.n	800549a <_printf_float+0x1e6>
 8005574:	2301      	movs	r3, #1
 8005576:	4652      	mov	r2, sl
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	f43f aef7 	beq.w	8005372 <_printf_float+0xbe>
 8005584:	f109 0901 	add.w	r9, r9, #1
 8005588:	e7ee      	b.n	8005568 <_printf_float+0x2b4>
 800558a:	bf00      	nop
 800558c:	7fefffff 	.word	0x7fefffff
 8005590:	08009218 	.word	0x08009218
 8005594:	0800921c 	.word	0x0800921c
 8005598:	08009220 	.word	0x08009220
 800559c:	08009224 	.word	0x08009224
 80055a0:	08009228 	.word	0x08009228
 80055a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a8:	429a      	cmp	r2, r3
 80055aa:	bfa8      	it	ge
 80055ac:	461a      	movge	r2, r3
 80055ae:	2a00      	cmp	r2, #0
 80055b0:	4691      	mov	r9, r2
 80055b2:	dc37      	bgt.n	8005624 <_printf_float+0x370>
 80055b4:	f04f 0b00 	mov.w	fp, #0
 80055b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055bc:	f104 021a 	add.w	r2, r4, #26
 80055c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	eba3 0309 	sub.w	r3, r3, r9
 80055c8:	455b      	cmp	r3, fp
 80055ca:	dc33      	bgt.n	8005634 <_printf_float+0x380>
 80055cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d0:	429a      	cmp	r2, r3
 80055d2:	db3b      	blt.n	800564c <_printf_float+0x398>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	07da      	lsls	r2, r3, #31
 80055d8:	d438      	bmi.n	800564c <_printf_float+0x398>
 80055da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055de:	eba2 0903 	sub.w	r9, r2, r3
 80055e2:	9b05      	ldr	r3, [sp, #20]
 80055e4:	1ad2      	subs	r2, r2, r3
 80055e6:	4591      	cmp	r9, r2
 80055e8:	bfa8      	it	ge
 80055ea:	4691      	movge	r9, r2
 80055ec:	f1b9 0f00 	cmp.w	r9, #0
 80055f0:	dc35      	bgt.n	800565e <_printf_float+0x3aa>
 80055f2:	f04f 0800 	mov.w	r8, #0
 80055f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055fa:	f104 0a1a 	add.w	sl, r4, #26
 80055fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005602:	1a9b      	subs	r3, r3, r2
 8005604:	eba3 0309 	sub.w	r3, r3, r9
 8005608:	4543      	cmp	r3, r8
 800560a:	f77f af79 	ble.w	8005500 <_printf_float+0x24c>
 800560e:	2301      	movs	r3, #1
 8005610:	4652      	mov	r2, sl
 8005612:	4631      	mov	r1, r6
 8005614:	4628      	mov	r0, r5
 8005616:	47b8      	blx	r7
 8005618:	3001      	adds	r0, #1
 800561a:	f43f aeaa 	beq.w	8005372 <_printf_float+0xbe>
 800561e:	f108 0801 	add.w	r8, r8, #1
 8005622:	e7ec      	b.n	80055fe <_printf_float+0x34a>
 8005624:	4613      	mov	r3, r2
 8005626:	4631      	mov	r1, r6
 8005628:	4642      	mov	r2, r8
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	d1c0      	bne.n	80055b4 <_printf_float+0x300>
 8005632:	e69e      	b.n	8005372 <_printf_float+0xbe>
 8005634:	2301      	movs	r3, #1
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	9205      	str	r2, [sp, #20]
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f ae97 	beq.w	8005372 <_printf_float+0xbe>
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	f10b 0b01 	add.w	fp, fp, #1
 800564a:	e7b9      	b.n	80055c0 <_printf_float+0x30c>
 800564c:	ee18 3a10 	vmov	r3, s16
 8005650:	4652      	mov	r2, sl
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	d1be      	bne.n	80055da <_printf_float+0x326>
 800565c:	e689      	b.n	8005372 <_printf_float+0xbe>
 800565e:	9a05      	ldr	r2, [sp, #20]
 8005660:	464b      	mov	r3, r9
 8005662:	4442      	add	r2, r8
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	d1c1      	bne.n	80055f2 <_printf_float+0x33e>
 800566e:	e680      	b.n	8005372 <_printf_float+0xbe>
 8005670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005672:	2a01      	cmp	r2, #1
 8005674:	dc01      	bgt.n	800567a <_printf_float+0x3c6>
 8005676:	07db      	lsls	r3, r3, #31
 8005678:	d53a      	bpl.n	80056f0 <_printf_float+0x43c>
 800567a:	2301      	movs	r3, #1
 800567c:	4642      	mov	r2, r8
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	f43f ae74 	beq.w	8005372 <_printf_float+0xbe>
 800568a:	ee18 3a10 	vmov	r3, s16
 800568e:	4652      	mov	r2, sl
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f ae6b 	beq.w	8005372 <_printf_float+0xbe>
 800569c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056a0:	2200      	movs	r2, #0
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056a8:	f7fb fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 80056ac:	b9d8      	cbnz	r0, 80056e6 <_printf_float+0x432>
 80056ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056b2:	f108 0201 	add.w	r2, r8, #1
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b8      	blx	r7
 80056bc:	3001      	adds	r0, #1
 80056be:	d10e      	bne.n	80056de <_printf_float+0x42a>
 80056c0:	e657      	b.n	8005372 <_printf_float+0xbe>
 80056c2:	2301      	movs	r3, #1
 80056c4:	4652      	mov	r2, sl
 80056c6:	4631      	mov	r1, r6
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b8      	blx	r7
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f ae50 	beq.w	8005372 <_printf_float+0xbe>
 80056d2:	f108 0801 	add.w	r8, r8, #1
 80056d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	4543      	cmp	r3, r8
 80056dc:	dcf1      	bgt.n	80056c2 <_printf_float+0x40e>
 80056de:	464b      	mov	r3, r9
 80056e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056e4:	e6da      	b.n	800549c <_printf_float+0x1e8>
 80056e6:	f04f 0800 	mov.w	r8, #0
 80056ea:	f104 0a1a 	add.w	sl, r4, #26
 80056ee:	e7f2      	b.n	80056d6 <_printf_float+0x422>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4642      	mov	r2, r8
 80056f4:	e7df      	b.n	80056b6 <_printf_float+0x402>
 80056f6:	2301      	movs	r3, #1
 80056f8:	464a      	mov	r2, r9
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	f43f ae36 	beq.w	8005372 <_printf_float+0xbe>
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	4543      	cmp	r3, r8
 8005712:	dcf0      	bgt.n	80056f6 <_printf_float+0x442>
 8005714:	e6f8      	b.n	8005508 <_printf_float+0x254>
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	f104 0919 	add.w	r9, r4, #25
 800571e:	e7f4      	b.n	800570a <_printf_float+0x456>

08005720 <_printf_common>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	4616      	mov	r6, r2
 8005726:	4699      	mov	r9, r3
 8005728:	688a      	ldr	r2, [r1, #8]
 800572a:	690b      	ldr	r3, [r1, #16]
 800572c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005730:	4293      	cmp	r3, r2
 8005732:	bfb8      	it	lt
 8005734:	4613      	movlt	r3, r2
 8005736:	6033      	str	r3, [r6, #0]
 8005738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800573c:	4607      	mov	r7, r0
 800573e:	460c      	mov	r4, r1
 8005740:	b10a      	cbz	r2, 8005746 <_printf_common+0x26>
 8005742:	3301      	adds	r3, #1
 8005744:	6033      	str	r3, [r6, #0]
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	0699      	lsls	r1, r3, #26
 800574a:	bf42      	ittt	mi
 800574c:	6833      	ldrmi	r3, [r6, #0]
 800574e:	3302      	addmi	r3, #2
 8005750:	6033      	strmi	r3, [r6, #0]
 8005752:	6825      	ldr	r5, [r4, #0]
 8005754:	f015 0506 	ands.w	r5, r5, #6
 8005758:	d106      	bne.n	8005768 <_printf_common+0x48>
 800575a:	f104 0a19 	add.w	sl, r4, #25
 800575e:	68e3      	ldr	r3, [r4, #12]
 8005760:	6832      	ldr	r2, [r6, #0]
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	42ab      	cmp	r3, r5
 8005766:	dc26      	bgt.n	80057b6 <_printf_common+0x96>
 8005768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800576c:	1e13      	subs	r3, r2, #0
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	bf18      	it	ne
 8005772:	2301      	movne	r3, #1
 8005774:	0692      	lsls	r2, r2, #26
 8005776:	d42b      	bmi.n	80057d0 <_printf_common+0xb0>
 8005778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800577c:	4649      	mov	r1, r9
 800577e:	4638      	mov	r0, r7
 8005780:	47c0      	blx	r8
 8005782:	3001      	adds	r0, #1
 8005784:	d01e      	beq.n	80057c4 <_printf_common+0xa4>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	6922      	ldr	r2, [r4, #16]
 800578a:	f003 0306 	and.w	r3, r3, #6
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf02      	ittt	eq
 8005792:	68e5      	ldreq	r5, [r4, #12]
 8005794:	6833      	ldreq	r3, [r6, #0]
 8005796:	1aed      	subeq	r5, r5, r3
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	bf0c      	ite	eq
 800579c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a0:	2500      	movne	r5, #0
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bfc4      	itt	gt
 80057a6:	1a9b      	subgt	r3, r3, r2
 80057a8:	18ed      	addgt	r5, r5, r3
 80057aa:	2600      	movs	r6, #0
 80057ac:	341a      	adds	r4, #26
 80057ae:	42b5      	cmp	r5, r6
 80057b0:	d11a      	bne.n	80057e8 <_printf_common+0xc8>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e008      	b.n	80057c8 <_printf_common+0xa8>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4652      	mov	r2, sl
 80057ba:	4649      	mov	r1, r9
 80057bc:	4638      	mov	r0, r7
 80057be:	47c0      	blx	r8
 80057c0:	3001      	adds	r0, #1
 80057c2:	d103      	bne.n	80057cc <_printf_common+0xac>
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057cc:	3501      	adds	r5, #1
 80057ce:	e7c6      	b.n	800575e <_printf_common+0x3e>
 80057d0:	18e1      	adds	r1, r4, r3
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	2030      	movs	r0, #48	; 0x30
 80057d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057da:	4422      	add	r2, r4
 80057dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e4:	3302      	adds	r3, #2
 80057e6:	e7c7      	b.n	8005778 <_printf_common+0x58>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4622      	mov	r2, r4
 80057ec:	4649      	mov	r1, r9
 80057ee:	4638      	mov	r0, r7
 80057f0:	47c0      	blx	r8
 80057f2:	3001      	adds	r0, #1
 80057f4:	d0e6      	beq.n	80057c4 <_printf_common+0xa4>
 80057f6:	3601      	adds	r6, #1
 80057f8:	e7d9      	b.n	80057ae <_printf_common+0x8e>
	...

080057fc <_printf_i>:
 80057fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005800:	7e0f      	ldrb	r7, [r1, #24]
 8005802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005804:	2f78      	cmp	r7, #120	; 0x78
 8005806:	4691      	mov	r9, r2
 8005808:	4680      	mov	r8, r0
 800580a:	460c      	mov	r4, r1
 800580c:	469a      	mov	sl, r3
 800580e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005812:	d807      	bhi.n	8005824 <_printf_i+0x28>
 8005814:	2f62      	cmp	r7, #98	; 0x62
 8005816:	d80a      	bhi.n	800582e <_printf_i+0x32>
 8005818:	2f00      	cmp	r7, #0
 800581a:	f000 80d4 	beq.w	80059c6 <_printf_i+0x1ca>
 800581e:	2f58      	cmp	r7, #88	; 0x58
 8005820:	f000 80c0 	beq.w	80059a4 <_printf_i+0x1a8>
 8005824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800582c:	e03a      	b.n	80058a4 <_printf_i+0xa8>
 800582e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005832:	2b15      	cmp	r3, #21
 8005834:	d8f6      	bhi.n	8005824 <_printf_i+0x28>
 8005836:	a101      	add	r1, pc, #4	; (adr r1, 800583c <_printf_i+0x40>)
 8005838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800583c:	08005895 	.word	0x08005895
 8005840:	080058a9 	.word	0x080058a9
 8005844:	08005825 	.word	0x08005825
 8005848:	08005825 	.word	0x08005825
 800584c:	08005825 	.word	0x08005825
 8005850:	08005825 	.word	0x08005825
 8005854:	080058a9 	.word	0x080058a9
 8005858:	08005825 	.word	0x08005825
 800585c:	08005825 	.word	0x08005825
 8005860:	08005825 	.word	0x08005825
 8005864:	08005825 	.word	0x08005825
 8005868:	080059ad 	.word	0x080059ad
 800586c:	080058d5 	.word	0x080058d5
 8005870:	08005967 	.word	0x08005967
 8005874:	08005825 	.word	0x08005825
 8005878:	08005825 	.word	0x08005825
 800587c:	080059cf 	.word	0x080059cf
 8005880:	08005825 	.word	0x08005825
 8005884:	080058d5 	.word	0x080058d5
 8005888:	08005825 	.word	0x08005825
 800588c:	08005825 	.word	0x08005825
 8005890:	0800596f 	.word	0x0800596f
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	602a      	str	r2, [r5, #0]
 800589c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a4:	2301      	movs	r3, #1
 80058a6:	e09f      	b.n	80059e8 <_printf_i+0x1ec>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	682b      	ldr	r3, [r5, #0]
 80058ac:	0607      	lsls	r7, r0, #24
 80058ae:	f103 0104 	add.w	r1, r3, #4
 80058b2:	6029      	str	r1, [r5, #0]
 80058b4:	d501      	bpl.n	80058ba <_printf_i+0xbe>
 80058b6:	681e      	ldr	r6, [r3, #0]
 80058b8:	e003      	b.n	80058c2 <_printf_i+0xc6>
 80058ba:	0646      	lsls	r6, r0, #25
 80058bc:	d5fb      	bpl.n	80058b6 <_printf_i+0xba>
 80058be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	da03      	bge.n	80058ce <_printf_i+0xd2>
 80058c6:	232d      	movs	r3, #45	; 0x2d
 80058c8:	4276      	negs	r6, r6
 80058ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ce:	485a      	ldr	r0, [pc, #360]	; (8005a38 <_printf_i+0x23c>)
 80058d0:	230a      	movs	r3, #10
 80058d2:	e012      	b.n	80058fa <_printf_i+0xfe>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1d19      	adds	r1, r3, #4
 80058da:	6029      	str	r1, [r5, #0]
 80058dc:	0605      	lsls	r5, r0, #24
 80058de:	d501      	bpl.n	80058e4 <_printf_i+0xe8>
 80058e0:	681e      	ldr	r6, [r3, #0]
 80058e2:	e002      	b.n	80058ea <_printf_i+0xee>
 80058e4:	0641      	lsls	r1, r0, #25
 80058e6:	d5fb      	bpl.n	80058e0 <_printf_i+0xe4>
 80058e8:	881e      	ldrh	r6, [r3, #0]
 80058ea:	4853      	ldr	r0, [pc, #332]	; (8005a38 <_printf_i+0x23c>)
 80058ec:	2f6f      	cmp	r7, #111	; 0x6f
 80058ee:	bf0c      	ite	eq
 80058f0:	2308      	moveq	r3, #8
 80058f2:	230a      	movne	r3, #10
 80058f4:	2100      	movs	r1, #0
 80058f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058fa:	6865      	ldr	r5, [r4, #4]
 80058fc:	60a5      	str	r5, [r4, #8]
 80058fe:	2d00      	cmp	r5, #0
 8005900:	bfa2      	ittt	ge
 8005902:	6821      	ldrge	r1, [r4, #0]
 8005904:	f021 0104 	bicge.w	r1, r1, #4
 8005908:	6021      	strge	r1, [r4, #0]
 800590a:	b90e      	cbnz	r6, 8005910 <_printf_i+0x114>
 800590c:	2d00      	cmp	r5, #0
 800590e:	d04b      	beq.n	80059a8 <_printf_i+0x1ac>
 8005910:	4615      	mov	r5, r2
 8005912:	fbb6 f1f3 	udiv	r1, r6, r3
 8005916:	fb03 6711 	mls	r7, r3, r1, r6
 800591a:	5dc7      	ldrb	r7, [r0, r7]
 800591c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005920:	4637      	mov	r7, r6
 8005922:	42bb      	cmp	r3, r7
 8005924:	460e      	mov	r6, r1
 8005926:	d9f4      	bls.n	8005912 <_printf_i+0x116>
 8005928:	2b08      	cmp	r3, #8
 800592a:	d10b      	bne.n	8005944 <_printf_i+0x148>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07de      	lsls	r6, r3, #31
 8005930:	d508      	bpl.n	8005944 <_printf_i+0x148>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6861      	ldr	r1, [r4, #4]
 8005936:	4299      	cmp	r1, r3
 8005938:	bfde      	ittt	le
 800593a:	2330      	movle	r3, #48	; 0x30
 800593c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005940:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005944:	1b52      	subs	r2, r2, r5
 8005946:	6122      	str	r2, [r4, #16]
 8005948:	f8cd a000 	str.w	sl, [sp]
 800594c:	464b      	mov	r3, r9
 800594e:	aa03      	add	r2, sp, #12
 8005950:	4621      	mov	r1, r4
 8005952:	4640      	mov	r0, r8
 8005954:	f7ff fee4 	bl	8005720 <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	d14a      	bne.n	80059f2 <_printf_i+0x1f6>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	b004      	add	sp, #16
 8005962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f043 0320 	orr.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	4833      	ldr	r0, [pc, #204]	; (8005a3c <_printf_i+0x240>)
 8005970:	2778      	movs	r7, #120	; 0x78
 8005972:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	6829      	ldr	r1, [r5, #0]
 800597a:	061f      	lsls	r7, r3, #24
 800597c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005980:	d402      	bmi.n	8005988 <_printf_i+0x18c>
 8005982:	065f      	lsls	r7, r3, #25
 8005984:	bf48      	it	mi
 8005986:	b2b6      	uxthmi	r6, r6
 8005988:	07df      	lsls	r7, r3, #31
 800598a:	bf48      	it	mi
 800598c:	f043 0320 	orrmi.w	r3, r3, #32
 8005990:	6029      	str	r1, [r5, #0]
 8005992:	bf48      	it	mi
 8005994:	6023      	strmi	r3, [r4, #0]
 8005996:	b91e      	cbnz	r6, 80059a0 <_printf_i+0x1a4>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	2310      	movs	r3, #16
 80059a2:	e7a7      	b.n	80058f4 <_printf_i+0xf8>
 80059a4:	4824      	ldr	r0, [pc, #144]	; (8005a38 <_printf_i+0x23c>)
 80059a6:	e7e4      	b.n	8005972 <_printf_i+0x176>
 80059a8:	4615      	mov	r5, r2
 80059aa:	e7bd      	b.n	8005928 <_printf_i+0x12c>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6826      	ldr	r6, [r4, #0]
 80059b0:	6961      	ldr	r1, [r4, #20]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6028      	str	r0, [r5, #0]
 80059b6:	0635      	lsls	r5, r6, #24
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	d501      	bpl.n	80059c0 <_printf_i+0x1c4>
 80059bc:	6019      	str	r1, [r3, #0]
 80059be:	e002      	b.n	80059c6 <_printf_i+0x1ca>
 80059c0:	0670      	lsls	r0, r6, #25
 80059c2:	d5fb      	bpl.n	80059bc <_printf_i+0x1c0>
 80059c4:	8019      	strh	r1, [r3, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	4615      	mov	r5, r2
 80059cc:	e7bc      	b.n	8005948 <_printf_i+0x14c>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	2100      	movs	r1, #0
 80059da:	4628      	mov	r0, r5
 80059dc:	f7fa fc00 	bl	80001e0 <memchr>
 80059e0:	b108      	cbz	r0, 80059e6 <_printf_i+0x1ea>
 80059e2:	1b40      	subs	r0, r0, r5
 80059e4:	6060      	str	r0, [r4, #4]
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	2300      	movs	r3, #0
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	e7aa      	b.n	8005948 <_printf_i+0x14c>
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	462a      	mov	r2, r5
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d0ad      	beq.n	800595c <_printf_i+0x160>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	079b      	lsls	r3, r3, #30
 8005a04:	d413      	bmi.n	8005a2e <_printf_i+0x232>
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4618      	movlt	r0, r3
 8005a10:	e7a6      	b.n	8005960 <_printf_i+0x164>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4632      	mov	r2, r6
 8005a16:	4649      	mov	r1, r9
 8005a18:	4640      	mov	r0, r8
 8005a1a:	47d0      	blx	sl
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d09d      	beq.n	800595c <_printf_i+0x160>
 8005a20:	3501      	adds	r5, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	9903      	ldr	r1, [sp, #12]
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dcf2      	bgt.n	8005a12 <_printf_i+0x216>
 8005a2c:	e7eb      	b.n	8005a06 <_printf_i+0x20a>
 8005a2e:	2500      	movs	r5, #0
 8005a30:	f104 0619 	add.w	r6, r4, #25
 8005a34:	e7f5      	b.n	8005a22 <_printf_i+0x226>
 8005a36:	bf00      	nop
 8005a38:	0800922a 	.word	0x0800922a
 8005a3c:	0800923b 	.word	0x0800923b

08005a40 <std>:
 8005a40:	2300      	movs	r3, #0
 8005a42:	b510      	push	{r4, lr}
 8005a44:	4604      	mov	r4, r0
 8005a46:	e9c0 3300 	strd	r3, r3, [r0]
 8005a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a4e:	6083      	str	r3, [r0, #8]
 8005a50:	8181      	strh	r1, [r0, #12]
 8005a52:	6643      	str	r3, [r0, #100]	; 0x64
 8005a54:	81c2      	strh	r2, [r0, #14]
 8005a56:	6183      	str	r3, [r0, #24]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	305c      	adds	r0, #92	; 0x5c
 8005a5e:	f000 f914 	bl	8005c8a <memset>
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <std+0x58>)
 8005a64:	6263      	str	r3, [r4, #36]	; 0x24
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <std+0x5c>)
 8005a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <std+0x60>)
 8005a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <std+0x64>)
 8005a70:	6323      	str	r3, [r4, #48]	; 0x30
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <std+0x68>)
 8005a74:	6224      	str	r4, [r4, #32]
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d006      	beq.n	8005a88 <std+0x48>
 8005a7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a7e:	4294      	cmp	r4, r2
 8005a80:	d002      	beq.n	8005a88 <std+0x48>
 8005a82:	33d0      	adds	r3, #208	; 0xd0
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d105      	bne.n	8005a94 <std+0x54>
 8005a88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f000 b978 	b.w	8005d84 <__retarget_lock_init_recursive>
 8005a94:	bd10      	pop	{r4, pc}
 8005a96:	bf00      	nop
 8005a98:	08005c05 	.word	0x08005c05
 8005a9c:	08005c27 	.word	0x08005c27
 8005aa0:	08005c5f 	.word	0x08005c5f
 8005aa4:	08005c83 	.word	0x08005c83
 8005aa8:	20000afc 	.word	0x20000afc

08005aac <stdio_exit_handler>:
 8005aac:	4a02      	ldr	r2, [pc, #8]	; (8005ab8 <stdio_exit_handler+0xc>)
 8005aae:	4903      	ldr	r1, [pc, #12]	; (8005abc <stdio_exit_handler+0x10>)
 8005ab0:	4803      	ldr	r0, [pc, #12]	; (8005ac0 <stdio_exit_handler+0x14>)
 8005ab2:	f000 b869 	b.w	8005b88 <_fwalk_sglue>
 8005ab6:	bf00      	nop
 8005ab8:	2000000c 	.word	0x2000000c
 8005abc:	08007739 	.word	0x08007739
 8005ac0:	20000018 	.word	0x20000018

08005ac4 <cleanup_stdio>:
 8005ac4:	6841      	ldr	r1, [r0, #4]
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <cleanup_stdio+0x34>)
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	b510      	push	{r4, lr}
 8005acc:	4604      	mov	r4, r0
 8005ace:	d001      	beq.n	8005ad4 <cleanup_stdio+0x10>
 8005ad0:	f001 fe32 	bl	8007738 <_fflush_r>
 8005ad4:	68a1      	ldr	r1, [r4, #8]
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <cleanup_stdio+0x38>)
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d002      	beq.n	8005ae2 <cleanup_stdio+0x1e>
 8005adc:	4620      	mov	r0, r4
 8005ade:	f001 fe2b 	bl	8007738 <_fflush_r>
 8005ae2:	68e1      	ldr	r1, [r4, #12]
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <cleanup_stdio+0x3c>)
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d004      	beq.n	8005af4 <cleanup_stdio+0x30>
 8005aea:	4620      	mov	r0, r4
 8005aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af0:	f001 be22 	b.w	8007738 <_fflush_r>
 8005af4:	bd10      	pop	{r4, pc}
 8005af6:	bf00      	nop
 8005af8:	20000afc 	.word	0x20000afc
 8005afc:	20000b64 	.word	0x20000b64
 8005b00:	20000bcc 	.word	0x20000bcc

08005b04 <global_stdio_init.part.0>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <global_stdio_init.part.0+0x30>)
 8005b08:	4c0b      	ldr	r4, [pc, #44]	; (8005b38 <global_stdio_init.part.0+0x34>)
 8005b0a:	4a0c      	ldr	r2, [pc, #48]	; (8005b3c <global_stdio_init.part.0+0x38>)
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	2200      	movs	r2, #0
 8005b12:	2104      	movs	r1, #4
 8005b14:	f7ff ff94 	bl	8005a40 <std>
 8005b18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	2109      	movs	r1, #9
 8005b20:	f7ff ff8e 	bl	8005a40 <std>
 8005b24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b28:	2202      	movs	r2, #2
 8005b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b2e:	2112      	movs	r1, #18
 8005b30:	f7ff bf86 	b.w	8005a40 <std>
 8005b34:	20000c34 	.word	0x20000c34
 8005b38:	20000afc 	.word	0x20000afc
 8005b3c:	08005aad 	.word	0x08005aad

08005b40 <__sfp_lock_acquire>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__sfp_lock_acquire+0x8>)
 8005b42:	f000 b920 	b.w	8005d86 <__retarget_lock_acquire_recursive>
 8005b46:	bf00      	nop
 8005b48:	20000c3d 	.word	0x20000c3d

08005b4c <__sfp_lock_release>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	; (8005b54 <__sfp_lock_release+0x8>)
 8005b4e:	f000 b91b 	b.w	8005d88 <__retarget_lock_release_recursive>
 8005b52:	bf00      	nop
 8005b54:	20000c3d 	.word	0x20000c3d

08005b58 <__sinit>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	f7ff fff0 	bl	8005b40 <__sfp_lock_acquire>
 8005b60:	6a23      	ldr	r3, [r4, #32]
 8005b62:	b11b      	cbz	r3, 8005b6c <__sinit+0x14>
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	f7ff bff0 	b.w	8005b4c <__sfp_lock_release>
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <__sinit+0x28>)
 8005b6e:	6223      	str	r3, [r4, #32]
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <__sinit+0x2c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f5      	bne.n	8005b64 <__sinit+0xc>
 8005b78:	f7ff ffc4 	bl	8005b04 <global_stdio_init.part.0>
 8005b7c:	e7f2      	b.n	8005b64 <__sinit+0xc>
 8005b7e:	bf00      	nop
 8005b80:	08005ac5 	.word	0x08005ac5
 8005b84:	20000c34 	.word	0x20000c34

08005b88 <_fwalk_sglue>:
 8005b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	4688      	mov	r8, r1
 8005b90:	4614      	mov	r4, r2
 8005b92:	2600      	movs	r6, #0
 8005b94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b98:	f1b9 0901 	subs.w	r9, r9, #1
 8005b9c:	d505      	bpl.n	8005baa <_fwalk_sglue+0x22>
 8005b9e:	6824      	ldr	r4, [r4, #0]
 8005ba0:	2c00      	cmp	r4, #0
 8005ba2:	d1f7      	bne.n	8005b94 <_fwalk_sglue+0xc>
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005baa:	89ab      	ldrh	r3, [r5, #12]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d907      	bls.n	8005bc0 <_fwalk_sglue+0x38>
 8005bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	d003      	beq.n	8005bc0 <_fwalk_sglue+0x38>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4638      	mov	r0, r7
 8005bbc:	47c0      	blx	r8
 8005bbe:	4306      	orrs	r6, r0
 8005bc0:	3568      	adds	r5, #104	; 0x68
 8005bc2:	e7e9      	b.n	8005b98 <_fwalk_sglue+0x10>

08005bc4 <siprintf>:
 8005bc4:	b40e      	push	{r1, r2, r3}
 8005bc6:	b500      	push	{lr}
 8005bc8:	b09c      	sub	sp, #112	; 0x70
 8005bca:	ab1d      	add	r3, sp, #116	; 0x74
 8005bcc:	9002      	str	r0, [sp, #8]
 8005bce:	9006      	str	r0, [sp, #24]
 8005bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bd4:	4809      	ldr	r0, [pc, #36]	; (8005bfc <siprintf+0x38>)
 8005bd6:	9107      	str	r1, [sp, #28]
 8005bd8:	9104      	str	r1, [sp, #16]
 8005bda:	4909      	ldr	r1, [pc, #36]	; (8005c00 <siprintf+0x3c>)
 8005bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be0:	9105      	str	r1, [sp, #20]
 8005be2:	6800      	ldr	r0, [r0, #0]
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	a902      	add	r1, sp, #8
 8005be8:	f001 fc22 	bl	8007430 <_svfiprintf_r>
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	b01c      	add	sp, #112	; 0x70
 8005bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf8:	b003      	add	sp, #12
 8005bfa:	4770      	bx	lr
 8005bfc:	20000064 	.word	0x20000064
 8005c00:	ffff0208 	.word	0xffff0208

08005c04 <__sread>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	460c      	mov	r4, r1
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	f000 f86c 	bl	8005ce8 <_read_r>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	bfab      	itete	ge
 8005c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c16:	89a3      	ldrhlt	r3, [r4, #12]
 8005c18:	181b      	addge	r3, r3, r0
 8005c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c1e:	bfac      	ite	ge
 8005c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c22:	81a3      	strhlt	r3, [r4, #12]
 8005c24:	bd10      	pop	{r4, pc}

08005c26 <__swrite>:
 8005c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	898b      	ldrh	r3, [r1, #12]
 8005c2e:	05db      	lsls	r3, r3, #23
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	4616      	mov	r6, r2
 8005c36:	d505      	bpl.n	8005c44 <__swrite+0x1e>
 8005c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f000 f840 	bl	8005cc4 <_lseek_r>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	4632      	mov	r2, r6
 8005c52:	463b      	mov	r3, r7
 8005c54:	4628      	mov	r0, r5
 8005c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	f000 b857 	b.w	8005d0c <_write_r>

08005c5e <__sseek>:
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	460c      	mov	r4, r1
 8005c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c66:	f000 f82d 	bl	8005cc4 <_lseek_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	bf15      	itete	ne
 8005c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c7a:	81a3      	strheq	r3, [r4, #12]
 8005c7c:	bf18      	it	ne
 8005c7e:	81a3      	strhne	r3, [r4, #12]
 8005c80:	bd10      	pop	{r4, pc}

08005c82 <__sclose>:
 8005c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c86:	f000 b80d 	b.w	8005ca4 <_close_r>

08005c8a <memset>:
 8005c8a:	4402      	add	r2, r0
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d100      	bne.n	8005c94 <memset+0xa>
 8005c92:	4770      	bx	lr
 8005c94:	f803 1b01 	strb.w	r1, [r3], #1
 8005c98:	e7f9      	b.n	8005c8e <memset+0x4>
	...

08005c9c <_localeconv_r>:
 8005c9c:	4800      	ldr	r0, [pc, #0]	; (8005ca0 <_localeconv_r+0x4>)
 8005c9e:	4770      	bx	lr
 8005ca0:	20000158 	.word	0x20000158

08005ca4 <_close_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d06      	ldr	r5, [pc, #24]	; (8005cc0 <_close_r+0x1c>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	f7fb fb69 	bl	8001386 <_close>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_close_r+0x1a>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_close_r+0x1a>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	20000c38 	.word	0x20000c38

08005cc4 <_lseek_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	4d07      	ldr	r5, [pc, #28]	; (8005ce4 <_lseek_r+0x20>)
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4608      	mov	r0, r1
 8005ccc:	4611      	mov	r1, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	602a      	str	r2, [r5, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f7fb fb7e 	bl	80013d4 <_lseek>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_lseek_r+0x1e>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_lseek_r+0x1e>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	20000c38 	.word	0x20000c38

08005ce8 <_read_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_read_r+0x20>)
 8005cec:	4604      	mov	r4, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fb fb0c 	bl	8001314 <_read>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_read_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_read_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	20000c38 	.word	0x20000c38

08005d0c <_write_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d07      	ldr	r5, [pc, #28]	; (8005d2c <_write_r+0x20>)
 8005d10:	4604      	mov	r4, r0
 8005d12:	4608      	mov	r0, r1
 8005d14:	4611      	mov	r1, r2
 8005d16:	2200      	movs	r2, #0
 8005d18:	602a      	str	r2, [r5, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f7fb fb17 	bl	800134e <_write>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_write_r+0x1e>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_write_r+0x1e>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	20000c38 	.word	0x20000c38

08005d30 <__errno>:
 8005d30:	4b01      	ldr	r3, [pc, #4]	; (8005d38 <__errno+0x8>)
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000064 	.word	0x20000064

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4d0d      	ldr	r5, [pc, #52]	; (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2600      	movs	r6, #0
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4d0b      	ldr	r5, [pc, #44]	; (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	; (8005d80 <__libc_init_array+0x44>)
 8005d50:	f003 f99c 	bl	800908c <_init>
 8005d54:	1b64      	subs	r4, r4, r5
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2600      	movs	r6, #0
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08009608 	.word	0x08009608
 8005d78:	08009608 	.word	0x08009608
 8005d7c:	08009608 	.word	0x08009608
 8005d80:	0800960c 	.word	0x0800960c

08005d84 <__retarget_lock_init_recursive>:
 8005d84:	4770      	bx	lr

08005d86 <__retarget_lock_acquire_recursive>:
 8005d86:	4770      	bx	lr

08005d88 <__retarget_lock_release_recursive>:
 8005d88:	4770      	bx	lr

08005d8a <quorem>:
 8005d8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8e:	6903      	ldr	r3, [r0, #16]
 8005d90:	690c      	ldr	r4, [r1, #16]
 8005d92:	42a3      	cmp	r3, r4
 8005d94:	4607      	mov	r7, r0
 8005d96:	db7e      	blt.n	8005e96 <quorem+0x10c>
 8005d98:	3c01      	subs	r4, #1
 8005d9a:	f101 0814 	add.w	r8, r1, #20
 8005d9e:	f100 0514 	add.w	r5, r0, #20
 8005da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db0:	3301      	adds	r3, #1
 8005db2:	429a      	cmp	r2, r3
 8005db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc0:	d331      	bcc.n	8005e26 <quorem+0x9c>
 8005dc2:	f04f 0e00 	mov.w	lr, #0
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	46ac      	mov	ip, r5
 8005dca:	46f2      	mov	sl, lr
 8005dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dd0:	b293      	uxth	r3, r2
 8005dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8005dd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dda:	0c1a      	lsrs	r2, r3, #16
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ebaa 0303 	sub.w	r3, sl, r3
 8005de2:	f8dc a000 	ldr.w	sl, [ip]
 8005de6:	fa13 f38a 	uxtah	r3, r3, sl
 8005dea:	fb06 220e 	mla	r2, r6, lr, r2
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005df6:	b292      	uxth	r2, r2
 8005df8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e00:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e04:	4581      	cmp	r9, r0
 8005e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e12:	d2db      	bcs.n	8005dcc <quorem+0x42>
 8005e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e18:	b92b      	cbnz	r3, 8005e26 <quorem+0x9c>
 8005e1a:	9b01      	ldr	r3, [sp, #4]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	429d      	cmp	r5, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	d32c      	bcc.n	8005e7e <quorem+0xf4>
 8005e24:	613c      	str	r4, [r7, #16]
 8005e26:	4638      	mov	r0, r7
 8005e28:	f001 f9a8 	bl	800717c <__mcmp>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	db22      	blt.n	8005e76 <quorem+0xec>
 8005e30:	3601      	adds	r6, #1
 8005e32:	4629      	mov	r1, r5
 8005e34:	2000      	movs	r0, #0
 8005e36:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e3a:	f8d1 c000 	ldr.w	ip, [r1]
 8005e3e:	b293      	uxth	r3, r2
 8005e40:	1ac3      	subs	r3, r0, r3
 8005e42:	0c12      	lsrs	r2, r2, #16
 8005e44:	fa13 f38c 	uxtah	r3, r3, ip
 8005e48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e56:	45c1      	cmp	r9, r8
 8005e58:	f841 3b04 	str.w	r3, [r1], #4
 8005e5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e60:	d2e9      	bcs.n	8005e36 <quorem+0xac>
 8005e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e6a:	b922      	cbnz	r2, 8005e76 <quorem+0xec>
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	d30a      	bcc.n	8005e8a <quorem+0x100>
 8005e74:	613c      	str	r4, [r7, #16]
 8005e76:	4630      	mov	r0, r6
 8005e78:	b003      	add	sp, #12
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d1ce      	bne.n	8005e24 <quorem+0x9a>
 8005e86:	3c01      	subs	r4, #1
 8005e88:	e7c9      	b.n	8005e1e <quorem+0x94>
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	d1f0      	bne.n	8005e74 <quorem+0xea>
 8005e92:	3c01      	subs	r4, #1
 8005e94:	e7eb      	b.n	8005e6e <quorem+0xe4>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e7ee      	b.n	8005e78 <quorem+0xee>
 8005e9a:	0000      	movs	r0, r0
 8005e9c:	0000      	movs	r0, r0
	...

08005ea0 <_dtoa_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	ed2d 8b04 	vpush	{d8-d9}
 8005ea8:	69c5      	ldr	r5, [r0, #28]
 8005eaa:	b093      	sub	sp, #76	; 0x4c
 8005eac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005eb0:	ec57 6b10 	vmov	r6, r7, d0
 8005eb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005eb8:	9107      	str	r1, [sp, #28]
 8005eba:	4604      	mov	r4, r0
 8005ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8005ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8005ec0:	b975      	cbnz	r5, 8005ee0 <_dtoa_r+0x40>
 8005ec2:	2010      	movs	r0, #16
 8005ec4:	f000 fe2a 	bl	8006b1c <malloc>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	61e0      	str	r0, [r4, #28]
 8005ecc:	b920      	cbnz	r0, 8005ed8 <_dtoa_r+0x38>
 8005ece:	4bae      	ldr	r3, [pc, #696]	; (8006188 <_dtoa_r+0x2e8>)
 8005ed0:	21ef      	movs	r1, #239	; 0xef
 8005ed2:	48ae      	ldr	r0, [pc, #696]	; (800618c <_dtoa_r+0x2ec>)
 8005ed4:	f001 fc90 	bl	80077f8 <__assert_func>
 8005ed8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005edc:	6005      	str	r5, [r0, #0]
 8005ede:	60c5      	str	r5, [r0, #12]
 8005ee0:	69e3      	ldr	r3, [r4, #28]
 8005ee2:	6819      	ldr	r1, [r3, #0]
 8005ee4:	b151      	cbz	r1, 8005efc <_dtoa_r+0x5c>
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	604a      	str	r2, [r1, #4]
 8005eea:	2301      	movs	r3, #1
 8005eec:	4093      	lsls	r3, r2
 8005eee:	608b      	str	r3, [r1, #8]
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 ff07 	bl	8006d04 <_Bfree>
 8005ef6:	69e3      	ldr	r3, [r4, #28]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	1e3b      	subs	r3, r7, #0
 8005efe:	bfbb      	ittet	lt
 8005f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f04:	9303      	strlt	r3, [sp, #12]
 8005f06:	2300      	movge	r3, #0
 8005f08:	2201      	movlt	r2, #1
 8005f0a:	bfac      	ite	ge
 8005f0c:	f8c8 3000 	strge.w	r3, [r8]
 8005f10:	f8c8 2000 	strlt.w	r2, [r8]
 8005f14:	4b9e      	ldr	r3, [pc, #632]	; (8006190 <_dtoa_r+0x2f0>)
 8005f16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f1a:	ea33 0308 	bics.w	r3, r3, r8
 8005f1e:	d11b      	bne.n	8005f58 <_dtoa_r+0xb8>
 8005f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f22:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f2c:	4333      	orrs	r3, r6
 8005f2e:	f000 8593 	beq.w	8006a58 <_dtoa_r+0xbb8>
 8005f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f34:	b963      	cbnz	r3, 8005f50 <_dtoa_r+0xb0>
 8005f36:	4b97      	ldr	r3, [pc, #604]	; (8006194 <_dtoa_r+0x2f4>)
 8005f38:	e027      	b.n	8005f8a <_dtoa_r+0xea>
 8005f3a:	4b97      	ldr	r3, [pc, #604]	; (8006198 <_dtoa_r+0x2f8>)
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	9800      	ldr	r0, [sp, #0]
 8005f46:	b013      	add	sp, #76	; 0x4c
 8005f48:	ecbd 8b04 	vpop	{d8-d9}
 8005f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f50:	4b90      	ldr	r3, [pc, #576]	; (8006194 <_dtoa_r+0x2f4>)
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	3303      	adds	r3, #3
 8005f56:	e7f3      	b.n	8005f40 <_dtoa_r+0xa0>
 8005f58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	ec51 0b17 	vmov	r0, r1, d7
 8005f62:	eeb0 8a47 	vmov.f32	s16, s14
 8005f66:	eef0 8a67 	vmov.f32	s17, s15
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f7fa fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f70:	4681      	mov	r9, r0
 8005f72:	b160      	cbz	r0, 8005f8e <_dtoa_r+0xee>
 8005f74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f76:	2301      	movs	r3, #1
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8568 	beq.w	8006a52 <_dtoa_r+0xbb2>
 8005f82:	4b86      	ldr	r3, [pc, #536]	; (800619c <_dtoa_r+0x2fc>)
 8005f84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	e7da      	b.n	8005f44 <_dtoa_r+0xa4>
 8005f8e:	aa10      	add	r2, sp, #64	; 0x40
 8005f90:	a911      	add	r1, sp, #68	; 0x44
 8005f92:	4620      	mov	r0, r4
 8005f94:	eeb0 0a48 	vmov.f32	s0, s16
 8005f98:	eef0 0a68 	vmov.f32	s1, s17
 8005f9c:	f001 f994 	bl	80072c8 <__d2b>
 8005fa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	d07f      	beq.n	80060aa <_dtoa_r+0x20a>
 8005faa:	ee18 3a90 	vmov	r3, s17
 8005fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005fb6:	ec51 0b18 	vmov	r0, r1, d8
 8005fba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005fbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4b75      	ldr	r3, [pc, #468]	; (80061a0 <_dtoa_r+0x300>)
 8005fcc:	f7fa f964 	bl	8000298 <__aeabi_dsub>
 8005fd0:	a367      	add	r3, pc, #412	; (adr r3, 8006170 <_dtoa_r+0x2d0>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f7fa fb17 	bl	8000608 <__aeabi_dmul>
 8005fda:	a367      	add	r3, pc, #412	; (adr r3, 8006178 <_dtoa_r+0x2d8>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa f95c 	bl	800029c <__adddf3>
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	460f      	mov	r7, r1
 8005fea:	f7fa faa3 	bl	8000534 <__aeabi_i2d>
 8005fee:	a364      	add	r3, pc, #400	; (adr r3, 8006180 <_dtoa_r+0x2e0>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fb08 	bl	8000608 <__aeabi_dmul>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa f94c 	bl	800029c <__adddf3>
 8006004:	4606      	mov	r6, r0
 8006006:	460f      	mov	r7, r1
 8006008:	f7fa fdae 	bl	8000b68 <__aeabi_d2iz>
 800600c:	2200      	movs	r2, #0
 800600e:	4683      	mov	fp, r0
 8006010:	2300      	movs	r3, #0
 8006012:	4630      	mov	r0, r6
 8006014:	4639      	mov	r1, r7
 8006016:	f7fa fd69 	bl	8000aec <__aeabi_dcmplt>
 800601a:	b148      	cbz	r0, 8006030 <_dtoa_r+0x190>
 800601c:	4658      	mov	r0, fp
 800601e:	f7fa fa89 	bl	8000534 <__aeabi_i2d>
 8006022:	4632      	mov	r2, r6
 8006024:	463b      	mov	r3, r7
 8006026:	f7fa fd57 	bl	8000ad8 <__aeabi_dcmpeq>
 800602a:	b908      	cbnz	r0, 8006030 <_dtoa_r+0x190>
 800602c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006030:	f1bb 0f16 	cmp.w	fp, #22
 8006034:	d857      	bhi.n	80060e6 <_dtoa_r+0x246>
 8006036:	4b5b      	ldr	r3, [pc, #364]	; (80061a4 <_dtoa_r+0x304>)
 8006038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	ec51 0b18 	vmov	r0, r1, d8
 8006044:	f7fa fd52 	bl	8000aec <__aeabi_dcmplt>
 8006048:	2800      	cmp	r0, #0
 800604a:	d04e      	beq.n	80060ea <_dtoa_r+0x24a>
 800604c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006050:	2300      	movs	r3, #0
 8006052:	930c      	str	r3, [sp, #48]	; 0x30
 8006054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006056:	1b5b      	subs	r3, r3, r5
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	bf45      	ittet	mi
 800605c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006060:	9305      	strmi	r3, [sp, #20]
 8006062:	2300      	movpl	r3, #0
 8006064:	2300      	movmi	r3, #0
 8006066:	9206      	str	r2, [sp, #24]
 8006068:	bf54      	ite	pl
 800606a:	9305      	strpl	r3, [sp, #20]
 800606c:	9306      	strmi	r3, [sp, #24]
 800606e:	f1bb 0f00 	cmp.w	fp, #0
 8006072:	db3c      	blt.n	80060ee <_dtoa_r+0x24e>
 8006074:	9b06      	ldr	r3, [sp, #24]
 8006076:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800607a:	445b      	add	r3, fp
 800607c:	9306      	str	r3, [sp, #24]
 800607e:	2300      	movs	r3, #0
 8006080:	9308      	str	r3, [sp, #32]
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	2b09      	cmp	r3, #9
 8006086:	d868      	bhi.n	800615a <_dtoa_r+0x2ba>
 8006088:	2b05      	cmp	r3, #5
 800608a:	bfc4      	itt	gt
 800608c:	3b04      	subgt	r3, #4
 800608e:	9307      	strgt	r3, [sp, #28]
 8006090:	9b07      	ldr	r3, [sp, #28]
 8006092:	f1a3 0302 	sub.w	r3, r3, #2
 8006096:	bfcc      	ite	gt
 8006098:	2500      	movgt	r5, #0
 800609a:	2501      	movle	r5, #1
 800609c:	2b03      	cmp	r3, #3
 800609e:	f200 8085 	bhi.w	80061ac <_dtoa_r+0x30c>
 80060a2:	e8df f003 	tbb	[pc, r3]
 80060a6:	3b2e      	.short	0x3b2e
 80060a8:	5839      	.short	0x5839
 80060aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060ae:	441d      	add	r5, r3
 80060b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	bfc1      	itttt	gt
 80060b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80060c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80060c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80060c8:	bfd6      	itet	le
 80060ca:	f1c3 0320 	rsble	r3, r3, #32
 80060ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80060d2:	fa06 f003 	lslle.w	r0, r6, r3
 80060d6:	f7fa fa1d 	bl	8000514 <__aeabi_ui2d>
 80060da:	2201      	movs	r2, #1
 80060dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80060e0:	3d01      	subs	r5, #1
 80060e2:	920e      	str	r2, [sp, #56]	; 0x38
 80060e4:	e76f      	b.n	8005fc6 <_dtoa_r+0x126>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e7b3      	b.n	8006052 <_dtoa_r+0x1b2>
 80060ea:	900c      	str	r0, [sp, #48]	; 0x30
 80060ec:	e7b2      	b.n	8006054 <_dtoa_r+0x1b4>
 80060ee:	9b05      	ldr	r3, [sp, #20]
 80060f0:	eba3 030b 	sub.w	r3, r3, fp
 80060f4:	9305      	str	r3, [sp, #20]
 80060f6:	f1cb 0300 	rsb	r3, fp, #0
 80060fa:	9308      	str	r3, [sp, #32]
 80060fc:	2300      	movs	r3, #0
 80060fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006100:	e7bf      	b.n	8006082 <_dtoa_r+0x1e2>
 8006102:	2300      	movs	r3, #0
 8006104:	9309      	str	r3, [sp, #36]	; 0x24
 8006106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006108:	2b00      	cmp	r3, #0
 800610a:	dc52      	bgt.n	80061b2 <_dtoa_r+0x312>
 800610c:	2301      	movs	r3, #1
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	9304      	str	r3, [sp, #16]
 8006112:	461a      	mov	r2, r3
 8006114:	920a      	str	r2, [sp, #40]	; 0x28
 8006116:	e00b      	b.n	8006130 <_dtoa_r+0x290>
 8006118:	2301      	movs	r3, #1
 800611a:	e7f3      	b.n	8006104 <_dtoa_r+0x264>
 800611c:	2300      	movs	r3, #0
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006122:	445b      	add	r3, fp
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	3301      	adds	r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	9304      	str	r3, [sp, #16]
 800612c:	bfb8      	it	lt
 800612e:	2301      	movlt	r3, #1
 8006130:	69e0      	ldr	r0, [r4, #28]
 8006132:	2100      	movs	r1, #0
 8006134:	2204      	movs	r2, #4
 8006136:	f102 0614 	add.w	r6, r2, #20
 800613a:	429e      	cmp	r6, r3
 800613c:	d93d      	bls.n	80061ba <_dtoa_r+0x31a>
 800613e:	6041      	str	r1, [r0, #4]
 8006140:	4620      	mov	r0, r4
 8006142:	f000 fd9f 	bl	8006c84 <_Balloc>
 8006146:	9000      	str	r0, [sp, #0]
 8006148:	2800      	cmp	r0, #0
 800614a:	d139      	bne.n	80061c0 <_dtoa_r+0x320>
 800614c:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <_dtoa_r+0x308>)
 800614e:	4602      	mov	r2, r0
 8006150:	f240 11af 	movw	r1, #431	; 0x1af
 8006154:	e6bd      	b.n	8005ed2 <_dtoa_r+0x32>
 8006156:	2301      	movs	r3, #1
 8006158:	e7e1      	b.n	800611e <_dtoa_r+0x27e>
 800615a:	2501      	movs	r5, #1
 800615c:	2300      	movs	r3, #0
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	9509      	str	r5, [sp, #36]	; 0x24
 8006162:	f04f 33ff 	mov.w	r3, #4294967295
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	9304      	str	r3, [sp, #16]
 800616a:	2200      	movs	r2, #0
 800616c:	2312      	movs	r3, #18
 800616e:	e7d1      	b.n	8006114 <_dtoa_r+0x274>
 8006170:	636f4361 	.word	0x636f4361
 8006174:	3fd287a7 	.word	0x3fd287a7
 8006178:	8b60c8b3 	.word	0x8b60c8b3
 800617c:	3fc68a28 	.word	0x3fc68a28
 8006180:	509f79fb 	.word	0x509f79fb
 8006184:	3fd34413 	.word	0x3fd34413
 8006188:	08009259 	.word	0x08009259
 800618c:	08009270 	.word	0x08009270
 8006190:	7ff00000 	.word	0x7ff00000
 8006194:	08009255 	.word	0x08009255
 8006198:	0800924c 	.word	0x0800924c
 800619c:	08009229 	.word	0x08009229
 80061a0:	3ff80000 	.word	0x3ff80000
 80061a4:	08009360 	.word	0x08009360
 80061a8:	080092c8 	.word	0x080092c8
 80061ac:	2301      	movs	r3, #1
 80061ae:	9309      	str	r3, [sp, #36]	; 0x24
 80061b0:	e7d7      	b.n	8006162 <_dtoa_r+0x2c2>
 80061b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	e7ba      	b.n	8006130 <_dtoa_r+0x290>
 80061ba:	3101      	adds	r1, #1
 80061bc:	0052      	lsls	r2, r2, #1
 80061be:	e7ba      	b.n	8006136 <_dtoa_r+0x296>
 80061c0:	69e3      	ldr	r3, [r4, #28]
 80061c2:	9a00      	ldr	r2, [sp, #0]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	9b04      	ldr	r3, [sp, #16]
 80061c8:	2b0e      	cmp	r3, #14
 80061ca:	f200 80a8 	bhi.w	800631e <_dtoa_r+0x47e>
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	f000 80a5 	beq.w	800631e <_dtoa_r+0x47e>
 80061d4:	f1bb 0f00 	cmp.w	fp, #0
 80061d8:	dd38      	ble.n	800624c <_dtoa_r+0x3ac>
 80061da:	4bc0      	ldr	r3, [pc, #768]	; (80064dc <_dtoa_r+0x63c>)
 80061dc:	f00b 020f 	and.w	r2, fp, #15
 80061e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80061e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80061ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80061f0:	d019      	beq.n	8006226 <_dtoa_r+0x386>
 80061f2:	4bbb      	ldr	r3, [pc, #748]	; (80064e0 <_dtoa_r+0x640>)
 80061f4:	ec51 0b18 	vmov	r0, r1, d8
 80061f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061fc:	f7fa fb2e 	bl	800085c <__aeabi_ddiv>
 8006200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006204:	f008 080f 	and.w	r8, r8, #15
 8006208:	2503      	movs	r5, #3
 800620a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80064e0 <_dtoa_r+0x640>
 800620e:	f1b8 0f00 	cmp.w	r8, #0
 8006212:	d10a      	bne.n	800622a <_dtoa_r+0x38a>
 8006214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006218:	4632      	mov	r2, r6
 800621a:	463b      	mov	r3, r7
 800621c:	f7fa fb1e 	bl	800085c <__aeabi_ddiv>
 8006220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006224:	e02b      	b.n	800627e <_dtoa_r+0x3de>
 8006226:	2502      	movs	r5, #2
 8006228:	e7ef      	b.n	800620a <_dtoa_r+0x36a>
 800622a:	f018 0f01 	tst.w	r8, #1
 800622e:	d008      	beq.n	8006242 <_dtoa_r+0x3a2>
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006238:	f7fa f9e6 	bl	8000608 <__aeabi_dmul>
 800623c:	3501      	adds	r5, #1
 800623e:	4606      	mov	r6, r0
 8006240:	460f      	mov	r7, r1
 8006242:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006246:	f109 0908 	add.w	r9, r9, #8
 800624a:	e7e0      	b.n	800620e <_dtoa_r+0x36e>
 800624c:	f000 809f 	beq.w	800638e <_dtoa_r+0x4ee>
 8006250:	f1cb 0600 	rsb	r6, fp, #0
 8006254:	4ba1      	ldr	r3, [pc, #644]	; (80064dc <_dtoa_r+0x63c>)
 8006256:	4fa2      	ldr	r7, [pc, #648]	; (80064e0 <_dtoa_r+0x640>)
 8006258:	f006 020f 	and.w	r2, r6, #15
 800625c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	ec51 0b18 	vmov	r0, r1, d8
 8006268:	f7fa f9ce 	bl	8000608 <__aeabi_dmul>
 800626c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006270:	1136      	asrs	r6, r6, #4
 8006272:	2300      	movs	r3, #0
 8006274:	2502      	movs	r5, #2
 8006276:	2e00      	cmp	r6, #0
 8006278:	d17e      	bne.n	8006378 <_dtoa_r+0x4d8>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1d0      	bne.n	8006220 <_dtoa_r+0x380>
 800627e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006280:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8084 	beq.w	8006392 <_dtoa_r+0x4f2>
 800628a:	4b96      	ldr	r3, [pc, #600]	; (80064e4 <_dtoa_r+0x644>)
 800628c:	2200      	movs	r2, #0
 800628e:	4640      	mov	r0, r8
 8006290:	4649      	mov	r1, r9
 8006292:	f7fa fc2b 	bl	8000aec <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	d07b      	beq.n	8006392 <_dtoa_r+0x4f2>
 800629a:	9b04      	ldr	r3, [sp, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d078      	beq.n	8006392 <_dtoa_r+0x4f2>
 80062a0:	9b01      	ldr	r3, [sp, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dd39      	ble.n	800631a <_dtoa_r+0x47a>
 80062a6:	4b90      	ldr	r3, [pc, #576]	; (80064e8 <_dtoa_r+0x648>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	4640      	mov	r0, r8
 80062ac:	4649      	mov	r1, r9
 80062ae:	f7fa f9ab 	bl	8000608 <__aeabi_dmul>
 80062b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b6:	9e01      	ldr	r6, [sp, #4]
 80062b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80062bc:	3501      	adds	r5, #1
 80062be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062c2:	4628      	mov	r0, r5
 80062c4:	f7fa f936 	bl	8000534 <__aeabi_i2d>
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	f7fa f99c 	bl	8000608 <__aeabi_dmul>
 80062d0:	4b86      	ldr	r3, [pc, #536]	; (80064ec <_dtoa_r+0x64c>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	f7f9 ffe2 	bl	800029c <__adddf3>
 80062d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80062dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	2e00      	cmp	r6, #0
 80062e4:	d158      	bne.n	8006398 <_dtoa_r+0x4f8>
 80062e6:	4b82      	ldr	r3, [pc, #520]	; (80064f0 <_dtoa_r+0x650>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7f9 ffd3 	bl	8000298 <__aeabi_dsub>
 80062f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062f6:	4680      	mov	r8, r0
 80062f8:	4689      	mov	r9, r1
 80062fa:	f7fa fc15 	bl	8000b28 <__aeabi_dcmpgt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	f040 8296 	bne.w	8006830 <_dtoa_r+0x990>
 8006304:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006308:	4640      	mov	r0, r8
 800630a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800630e:	4649      	mov	r1, r9
 8006310:	f7fa fbec 	bl	8000aec <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	f040 8289 	bne.w	800682c <_dtoa_r+0x98c>
 800631a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800631e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006320:	2b00      	cmp	r3, #0
 8006322:	f2c0 814e 	blt.w	80065c2 <_dtoa_r+0x722>
 8006326:	f1bb 0f0e 	cmp.w	fp, #14
 800632a:	f300 814a 	bgt.w	80065c2 <_dtoa_r+0x722>
 800632e:	4b6b      	ldr	r3, [pc, #428]	; (80064dc <_dtoa_r+0x63c>)
 8006330:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006334:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	f280 80dc 	bge.w	80064f8 <_dtoa_r+0x658>
 8006340:	9b04      	ldr	r3, [sp, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f300 80d8 	bgt.w	80064f8 <_dtoa_r+0x658>
 8006348:	f040 826f 	bne.w	800682a <_dtoa_r+0x98a>
 800634c:	4b68      	ldr	r3, [pc, #416]	; (80064f0 <_dtoa_r+0x650>)
 800634e:	2200      	movs	r2, #0
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa f958 	bl	8000608 <__aeabi_dmul>
 8006358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800635c:	f7fa fbda 	bl	8000b14 <__aeabi_dcmpge>
 8006360:	9e04      	ldr	r6, [sp, #16]
 8006362:	4637      	mov	r7, r6
 8006364:	2800      	cmp	r0, #0
 8006366:	f040 8245 	bne.w	80067f4 <_dtoa_r+0x954>
 800636a:	9d00      	ldr	r5, [sp, #0]
 800636c:	2331      	movs	r3, #49	; 0x31
 800636e:	f805 3b01 	strb.w	r3, [r5], #1
 8006372:	f10b 0b01 	add.w	fp, fp, #1
 8006376:	e241      	b.n	80067fc <_dtoa_r+0x95c>
 8006378:	07f2      	lsls	r2, r6, #31
 800637a:	d505      	bpl.n	8006388 <_dtoa_r+0x4e8>
 800637c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006380:	f7fa f942 	bl	8000608 <__aeabi_dmul>
 8006384:	3501      	adds	r5, #1
 8006386:	2301      	movs	r3, #1
 8006388:	1076      	asrs	r6, r6, #1
 800638a:	3708      	adds	r7, #8
 800638c:	e773      	b.n	8006276 <_dtoa_r+0x3d6>
 800638e:	2502      	movs	r5, #2
 8006390:	e775      	b.n	800627e <_dtoa_r+0x3de>
 8006392:	9e04      	ldr	r6, [sp, #16]
 8006394:	465f      	mov	r7, fp
 8006396:	e792      	b.n	80062be <_dtoa_r+0x41e>
 8006398:	9900      	ldr	r1, [sp, #0]
 800639a:	4b50      	ldr	r3, [pc, #320]	; (80064dc <_dtoa_r+0x63c>)
 800639c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063a0:	4431      	add	r1, r6
 80063a2:	9102      	str	r1, [sp, #8]
 80063a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063a6:	eeb0 9a47 	vmov.f32	s18, s14
 80063aa:	eef0 9a67 	vmov.f32	s19, s15
 80063ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063b6:	2900      	cmp	r1, #0
 80063b8:	d044      	beq.n	8006444 <_dtoa_r+0x5a4>
 80063ba:	494e      	ldr	r1, [pc, #312]	; (80064f4 <_dtoa_r+0x654>)
 80063bc:	2000      	movs	r0, #0
 80063be:	f7fa fa4d 	bl	800085c <__aeabi_ddiv>
 80063c2:	ec53 2b19 	vmov	r2, r3, d9
 80063c6:	f7f9 ff67 	bl	8000298 <__aeabi_dsub>
 80063ca:	9d00      	ldr	r5, [sp, #0]
 80063cc:	ec41 0b19 	vmov	d9, r0, r1
 80063d0:	4649      	mov	r1, r9
 80063d2:	4640      	mov	r0, r8
 80063d4:	f7fa fbc8 	bl	8000b68 <__aeabi_d2iz>
 80063d8:	4606      	mov	r6, r0
 80063da:	f7fa f8ab 	bl	8000534 <__aeabi_i2d>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7f9 ff57 	bl	8000298 <__aeabi_dsub>
 80063ea:	3630      	adds	r6, #48	; 0x30
 80063ec:	f805 6b01 	strb.w	r6, [r5], #1
 80063f0:	ec53 2b19 	vmov	r2, r3, d9
 80063f4:	4680      	mov	r8, r0
 80063f6:	4689      	mov	r9, r1
 80063f8:	f7fa fb78 	bl	8000aec <__aeabi_dcmplt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d164      	bne.n	80064ca <_dtoa_r+0x62a>
 8006400:	4642      	mov	r2, r8
 8006402:	464b      	mov	r3, r9
 8006404:	4937      	ldr	r1, [pc, #220]	; (80064e4 <_dtoa_r+0x644>)
 8006406:	2000      	movs	r0, #0
 8006408:	f7f9 ff46 	bl	8000298 <__aeabi_dsub>
 800640c:	ec53 2b19 	vmov	r2, r3, d9
 8006410:	f7fa fb6c 	bl	8000aec <__aeabi_dcmplt>
 8006414:	2800      	cmp	r0, #0
 8006416:	f040 80b6 	bne.w	8006586 <_dtoa_r+0x6e6>
 800641a:	9b02      	ldr	r3, [sp, #8]
 800641c:	429d      	cmp	r5, r3
 800641e:	f43f af7c 	beq.w	800631a <_dtoa_r+0x47a>
 8006422:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <_dtoa_r+0x648>)
 8006424:	ec51 0b19 	vmov	r0, r1, d9
 8006428:	2200      	movs	r2, #0
 800642a:	f7fa f8ed 	bl	8000608 <__aeabi_dmul>
 800642e:	4b2e      	ldr	r3, [pc, #184]	; (80064e8 <_dtoa_r+0x648>)
 8006430:	ec41 0b19 	vmov	d9, r0, r1
 8006434:	2200      	movs	r2, #0
 8006436:	4640      	mov	r0, r8
 8006438:	4649      	mov	r1, r9
 800643a:	f7fa f8e5 	bl	8000608 <__aeabi_dmul>
 800643e:	4680      	mov	r8, r0
 8006440:	4689      	mov	r9, r1
 8006442:	e7c5      	b.n	80063d0 <_dtoa_r+0x530>
 8006444:	ec51 0b17 	vmov	r0, r1, d7
 8006448:	f7fa f8de 	bl	8000608 <__aeabi_dmul>
 800644c:	9b02      	ldr	r3, [sp, #8]
 800644e:	9d00      	ldr	r5, [sp, #0]
 8006450:	930f      	str	r3, [sp, #60]	; 0x3c
 8006452:	ec41 0b19 	vmov	d9, r0, r1
 8006456:	4649      	mov	r1, r9
 8006458:	4640      	mov	r0, r8
 800645a:	f7fa fb85 	bl	8000b68 <__aeabi_d2iz>
 800645e:	4606      	mov	r6, r0
 8006460:	f7fa f868 	bl	8000534 <__aeabi_i2d>
 8006464:	3630      	adds	r6, #48	; 0x30
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4640      	mov	r0, r8
 800646c:	4649      	mov	r1, r9
 800646e:	f7f9 ff13 	bl	8000298 <__aeabi_dsub>
 8006472:	f805 6b01 	strb.w	r6, [r5], #1
 8006476:	9b02      	ldr	r3, [sp, #8]
 8006478:	429d      	cmp	r5, r3
 800647a:	4680      	mov	r8, r0
 800647c:	4689      	mov	r9, r1
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	d124      	bne.n	80064ce <_dtoa_r+0x62e>
 8006484:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <_dtoa_r+0x654>)
 8006486:	ec51 0b19 	vmov	r0, r1, d9
 800648a:	f7f9 ff07 	bl	800029c <__adddf3>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4640      	mov	r0, r8
 8006494:	4649      	mov	r1, r9
 8006496:	f7fa fb47 	bl	8000b28 <__aeabi_dcmpgt>
 800649a:	2800      	cmp	r0, #0
 800649c:	d173      	bne.n	8006586 <_dtoa_r+0x6e6>
 800649e:	ec53 2b19 	vmov	r2, r3, d9
 80064a2:	4914      	ldr	r1, [pc, #80]	; (80064f4 <_dtoa_r+0x654>)
 80064a4:	2000      	movs	r0, #0
 80064a6:	f7f9 fef7 	bl	8000298 <__aeabi_dsub>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4640      	mov	r0, r8
 80064b0:	4649      	mov	r1, r9
 80064b2:	f7fa fb1b 	bl	8000aec <__aeabi_dcmplt>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f43f af2f 	beq.w	800631a <_dtoa_r+0x47a>
 80064bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064be:	1e6b      	subs	r3, r5, #1
 80064c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	d0f8      	beq.n	80064bc <_dtoa_r+0x61c>
 80064ca:	46bb      	mov	fp, r7
 80064cc:	e04a      	b.n	8006564 <_dtoa_r+0x6c4>
 80064ce:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <_dtoa_r+0x648>)
 80064d0:	f7fa f89a 	bl	8000608 <__aeabi_dmul>
 80064d4:	4680      	mov	r8, r0
 80064d6:	4689      	mov	r9, r1
 80064d8:	e7bd      	b.n	8006456 <_dtoa_r+0x5b6>
 80064da:	bf00      	nop
 80064dc:	08009360 	.word	0x08009360
 80064e0:	08009338 	.word	0x08009338
 80064e4:	3ff00000 	.word	0x3ff00000
 80064e8:	40240000 	.word	0x40240000
 80064ec:	401c0000 	.word	0x401c0000
 80064f0:	40140000 	.word	0x40140000
 80064f4:	3fe00000 	.word	0x3fe00000
 80064f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064fc:	9d00      	ldr	r5, [sp, #0]
 80064fe:	4642      	mov	r2, r8
 8006500:	464b      	mov	r3, r9
 8006502:	4630      	mov	r0, r6
 8006504:	4639      	mov	r1, r7
 8006506:	f7fa f9a9 	bl	800085c <__aeabi_ddiv>
 800650a:	f7fa fb2d 	bl	8000b68 <__aeabi_d2iz>
 800650e:	9001      	str	r0, [sp, #4]
 8006510:	f7fa f810 	bl	8000534 <__aeabi_i2d>
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	f7fa f876 	bl	8000608 <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7f9 feb8 	bl	8000298 <__aeabi_dsub>
 8006528:	9e01      	ldr	r6, [sp, #4]
 800652a:	9f04      	ldr	r7, [sp, #16]
 800652c:	3630      	adds	r6, #48	; 0x30
 800652e:	f805 6b01 	strb.w	r6, [r5], #1
 8006532:	9e00      	ldr	r6, [sp, #0]
 8006534:	1bae      	subs	r6, r5, r6
 8006536:	42b7      	cmp	r7, r6
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	d134      	bne.n	80065a8 <_dtoa_r+0x708>
 800653e:	f7f9 fead 	bl	800029c <__adddf3>
 8006542:	4642      	mov	r2, r8
 8006544:	464b      	mov	r3, r9
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	f7fa faed 	bl	8000b28 <__aeabi_dcmpgt>
 800654e:	b9c8      	cbnz	r0, 8006584 <_dtoa_r+0x6e4>
 8006550:	4642      	mov	r2, r8
 8006552:	464b      	mov	r3, r9
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7fa fabe 	bl	8000ad8 <__aeabi_dcmpeq>
 800655c:	b110      	cbz	r0, 8006564 <_dtoa_r+0x6c4>
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	07db      	lsls	r3, r3, #31
 8006562:	d40f      	bmi.n	8006584 <_dtoa_r+0x6e4>
 8006564:	4651      	mov	r1, sl
 8006566:	4620      	mov	r0, r4
 8006568:	f000 fbcc 	bl	8006d04 <_Bfree>
 800656c:	2300      	movs	r3, #0
 800656e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006570:	702b      	strb	r3, [r5, #0]
 8006572:	f10b 0301 	add.w	r3, fp, #1
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800657a:	2b00      	cmp	r3, #0
 800657c:	f43f ace2 	beq.w	8005f44 <_dtoa_r+0xa4>
 8006580:	601d      	str	r5, [r3, #0]
 8006582:	e4df      	b.n	8005f44 <_dtoa_r+0xa4>
 8006584:	465f      	mov	r7, fp
 8006586:	462b      	mov	r3, r5
 8006588:	461d      	mov	r5, r3
 800658a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800658e:	2a39      	cmp	r2, #57	; 0x39
 8006590:	d106      	bne.n	80065a0 <_dtoa_r+0x700>
 8006592:	9a00      	ldr	r2, [sp, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d1f7      	bne.n	8006588 <_dtoa_r+0x6e8>
 8006598:	9900      	ldr	r1, [sp, #0]
 800659a:	2230      	movs	r2, #48	; 0x30
 800659c:	3701      	adds	r7, #1
 800659e:	700a      	strb	r2, [r1, #0]
 80065a0:	781a      	ldrb	r2, [r3, #0]
 80065a2:	3201      	adds	r2, #1
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	e790      	b.n	80064ca <_dtoa_r+0x62a>
 80065a8:	4ba3      	ldr	r3, [pc, #652]	; (8006838 <_dtoa_r+0x998>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7fa f82c 	bl	8000608 <__aeabi_dmul>
 80065b0:	2200      	movs	r2, #0
 80065b2:	2300      	movs	r3, #0
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	f7fa fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d09e      	beq.n	80064fe <_dtoa_r+0x65e>
 80065c0:	e7d0      	b.n	8006564 <_dtoa_r+0x6c4>
 80065c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	f000 80ca 	beq.w	800675e <_dtoa_r+0x8be>
 80065ca:	9a07      	ldr	r2, [sp, #28]
 80065cc:	2a01      	cmp	r2, #1
 80065ce:	f300 80ad 	bgt.w	800672c <_dtoa_r+0x88c>
 80065d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	f000 80a5 	beq.w	8006724 <_dtoa_r+0x884>
 80065da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065de:	9e08      	ldr	r6, [sp, #32]
 80065e0:	9d05      	ldr	r5, [sp, #20]
 80065e2:	9a05      	ldr	r2, [sp, #20]
 80065e4:	441a      	add	r2, r3
 80065e6:	9205      	str	r2, [sp, #20]
 80065e8:	9a06      	ldr	r2, [sp, #24]
 80065ea:	2101      	movs	r1, #1
 80065ec:	441a      	add	r2, r3
 80065ee:	4620      	mov	r0, r4
 80065f0:	9206      	str	r2, [sp, #24]
 80065f2:	f000 fc3d 	bl	8006e70 <__i2b>
 80065f6:	4607      	mov	r7, r0
 80065f8:	b165      	cbz	r5, 8006614 <_dtoa_r+0x774>
 80065fa:	9b06      	ldr	r3, [sp, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	dd09      	ble.n	8006614 <_dtoa_r+0x774>
 8006600:	42ab      	cmp	r3, r5
 8006602:	9a05      	ldr	r2, [sp, #20]
 8006604:	bfa8      	it	ge
 8006606:	462b      	movge	r3, r5
 8006608:	1ad2      	subs	r2, r2, r3
 800660a:	9205      	str	r2, [sp, #20]
 800660c:	9a06      	ldr	r2, [sp, #24]
 800660e:	1aed      	subs	r5, r5, r3
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	9b08      	ldr	r3, [sp, #32]
 8006616:	b1f3      	cbz	r3, 8006656 <_dtoa_r+0x7b6>
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80a3 	beq.w	8006766 <_dtoa_r+0x8c6>
 8006620:	2e00      	cmp	r6, #0
 8006622:	dd10      	ble.n	8006646 <_dtoa_r+0x7a6>
 8006624:	4639      	mov	r1, r7
 8006626:	4632      	mov	r2, r6
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fce1 	bl	8006ff0 <__pow5mult>
 800662e:	4652      	mov	r2, sl
 8006630:	4601      	mov	r1, r0
 8006632:	4607      	mov	r7, r0
 8006634:	4620      	mov	r0, r4
 8006636:	f000 fc31 	bl	8006e9c <__multiply>
 800663a:	4651      	mov	r1, sl
 800663c:	4680      	mov	r8, r0
 800663e:	4620      	mov	r0, r4
 8006640:	f000 fb60 	bl	8006d04 <_Bfree>
 8006644:	46c2      	mov	sl, r8
 8006646:	9b08      	ldr	r3, [sp, #32]
 8006648:	1b9a      	subs	r2, r3, r6
 800664a:	d004      	beq.n	8006656 <_dtoa_r+0x7b6>
 800664c:	4651      	mov	r1, sl
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fcce 	bl	8006ff0 <__pow5mult>
 8006654:	4682      	mov	sl, r0
 8006656:	2101      	movs	r1, #1
 8006658:	4620      	mov	r0, r4
 800665a:	f000 fc09 	bl	8006e70 <__i2b>
 800665e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	4606      	mov	r6, r0
 8006664:	f340 8081 	ble.w	800676a <_dtoa_r+0x8ca>
 8006668:	461a      	mov	r2, r3
 800666a:	4601      	mov	r1, r0
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fcbf 	bl	8006ff0 <__pow5mult>
 8006672:	9b07      	ldr	r3, [sp, #28]
 8006674:	2b01      	cmp	r3, #1
 8006676:	4606      	mov	r6, r0
 8006678:	dd7a      	ble.n	8006770 <_dtoa_r+0x8d0>
 800667a:	f04f 0800 	mov.w	r8, #0
 800667e:	6933      	ldr	r3, [r6, #16]
 8006680:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006684:	6918      	ldr	r0, [r3, #16]
 8006686:	f000 fba5 	bl	8006dd4 <__hi0bits>
 800668a:	f1c0 0020 	rsb	r0, r0, #32
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	4418      	add	r0, r3
 8006692:	f010 001f 	ands.w	r0, r0, #31
 8006696:	f000 8094 	beq.w	80067c2 <_dtoa_r+0x922>
 800669a:	f1c0 0320 	rsb	r3, r0, #32
 800669e:	2b04      	cmp	r3, #4
 80066a0:	f340 8085 	ble.w	80067ae <_dtoa_r+0x90e>
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	f1c0 001c 	rsb	r0, r0, #28
 80066aa:	4403      	add	r3, r0
 80066ac:	9305      	str	r3, [sp, #20]
 80066ae:	9b06      	ldr	r3, [sp, #24]
 80066b0:	4403      	add	r3, r0
 80066b2:	4405      	add	r5, r0
 80066b4:	9306      	str	r3, [sp, #24]
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dd05      	ble.n	80066c8 <_dtoa_r+0x828>
 80066bc:	4651      	mov	r1, sl
 80066be:	461a      	mov	r2, r3
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fcef 	bl	80070a4 <__lshift>
 80066c6:	4682      	mov	sl, r0
 80066c8:	9b06      	ldr	r3, [sp, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dd05      	ble.n	80066da <_dtoa_r+0x83a>
 80066ce:	4631      	mov	r1, r6
 80066d0:	461a      	mov	r2, r3
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fce6 	bl	80070a4 <__lshift>
 80066d8:	4606      	mov	r6, r0
 80066da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d072      	beq.n	80067c6 <_dtoa_r+0x926>
 80066e0:	4631      	mov	r1, r6
 80066e2:	4650      	mov	r0, sl
 80066e4:	f000 fd4a 	bl	800717c <__mcmp>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	da6c      	bge.n	80067c6 <_dtoa_r+0x926>
 80066ec:	2300      	movs	r3, #0
 80066ee:	4651      	mov	r1, sl
 80066f0:	220a      	movs	r2, #10
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fb28 	bl	8006d48 <__multadd>
 80066f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066fe:	4682      	mov	sl, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 81b0 	beq.w	8006a66 <_dtoa_r+0xbc6>
 8006706:	2300      	movs	r3, #0
 8006708:	4639      	mov	r1, r7
 800670a:	220a      	movs	r2, #10
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fb1b 	bl	8006d48 <__multadd>
 8006712:	9b01      	ldr	r3, [sp, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	4607      	mov	r7, r0
 8006718:	f300 8096 	bgt.w	8006848 <_dtoa_r+0x9a8>
 800671c:	9b07      	ldr	r3, [sp, #28]
 800671e:	2b02      	cmp	r3, #2
 8006720:	dc59      	bgt.n	80067d6 <_dtoa_r+0x936>
 8006722:	e091      	b.n	8006848 <_dtoa_r+0x9a8>
 8006724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006726:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800672a:	e758      	b.n	80065de <_dtoa_r+0x73e>
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	1e5e      	subs	r6, r3, #1
 8006730:	9b08      	ldr	r3, [sp, #32]
 8006732:	42b3      	cmp	r3, r6
 8006734:	bfbf      	itttt	lt
 8006736:	9b08      	ldrlt	r3, [sp, #32]
 8006738:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800673a:	9608      	strlt	r6, [sp, #32]
 800673c:	1af3      	sublt	r3, r6, r3
 800673e:	bfb4      	ite	lt
 8006740:	18d2      	addlt	r2, r2, r3
 8006742:	1b9e      	subge	r6, r3, r6
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	bfbc      	itt	lt
 8006748:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800674a:	2600      	movlt	r6, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	bfb7      	itett	lt
 8006750:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006754:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006758:	1a9d      	sublt	r5, r3, r2
 800675a:	2300      	movlt	r3, #0
 800675c:	e741      	b.n	80065e2 <_dtoa_r+0x742>
 800675e:	9e08      	ldr	r6, [sp, #32]
 8006760:	9d05      	ldr	r5, [sp, #20]
 8006762:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006764:	e748      	b.n	80065f8 <_dtoa_r+0x758>
 8006766:	9a08      	ldr	r2, [sp, #32]
 8006768:	e770      	b.n	800664c <_dtoa_r+0x7ac>
 800676a:	9b07      	ldr	r3, [sp, #28]
 800676c:	2b01      	cmp	r3, #1
 800676e:	dc19      	bgt.n	80067a4 <_dtoa_r+0x904>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	b9bb      	cbnz	r3, 80067a4 <_dtoa_r+0x904>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800677a:	b99b      	cbnz	r3, 80067a4 <_dtoa_r+0x904>
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006782:	0d1b      	lsrs	r3, r3, #20
 8006784:	051b      	lsls	r3, r3, #20
 8006786:	b183      	cbz	r3, 80067aa <_dtoa_r+0x90a>
 8006788:	9b05      	ldr	r3, [sp, #20]
 800678a:	3301      	adds	r3, #1
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	9b06      	ldr	r3, [sp, #24]
 8006790:	3301      	adds	r3, #1
 8006792:	9306      	str	r3, [sp, #24]
 8006794:	f04f 0801 	mov.w	r8, #1
 8006798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	f47f af6f 	bne.w	800667e <_dtoa_r+0x7de>
 80067a0:	2001      	movs	r0, #1
 80067a2:	e774      	b.n	800668e <_dtoa_r+0x7ee>
 80067a4:	f04f 0800 	mov.w	r8, #0
 80067a8:	e7f6      	b.n	8006798 <_dtoa_r+0x8f8>
 80067aa:	4698      	mov	r8, r3
 80067ac:	e7f4      	b.n	8006798 <_dtoa_r+0x8f8>
 80067ae:	d082      	beq.n	80066b6 <_dtoa_r+0x816>
 80067b0:	9a05      	ldr	r2, [sp, #20]
 80067b2:	331c      	adds	r3, #28
 80067b4:	441a      	add	r2, r3
 80067b6:	9205      	str	r2, [sp, #20]
 80067b8:	9a06      	ldr	r2, [sp, #24]
 80067ba:	441a      	add	r2, r3
 80067bc:	441d      	add	r5, r3
 80067be:	9206      	str	r2, [sp, #24]
 80067c0:	e779      	b.n	80066b6 <_dtoa_r+0x816>
 80067c2:	4603      	mov	r3, r0
 80067c4:	e7f4      	b.n	80067b0 <_dtoa_r+0x910>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dc37      	bgt.n	800683c <_dtoa_r+0x99c>
 80067cc:	9b07      	ldr	r3, [sp, #28]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	dd34      	ble.n	800683c <_dtoa_r+0x99c>
 80067d2:	9b04      	ldr	r3, [sp, #16]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	9b01      	ldr	r3, [sp, #4]
 80067d8:	b963      	cbnz	r3, 80067f4 <_dtoa_r+0x954>
 80067da:	4631      	mov	r1, r6
 80067dc:	2205      	movs	r2, #5
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 fab2 	bl	8006d48 <__multadd>
 80067e4:	4601      	mov	r1, r0
 80067e6:	4606      	mov	r6, r0
 80067e8:	4650      	mov	r0, sl
 80067ea:	f000 fcc7 	bl	800717c <__mcmp>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f73f adbb 	bgt.w	800636a <_dtoa_r+0x4ca>
 80067f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f6:	9d00      	ldr	r5, [sp, #0]
 80067f8:	ea6f 0b03 	mvn.w	fp, r3
 80067fc:	f04f 0800 	mov.w	r8, #0
 8006800:	4631      	mov	r1, r6
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fa7e 	bl	8006d04 <_Bfree>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f43f aeab 	beq.w	8006564 <_dtoa_r+0x6c4>
 800680e:	f1b8 0f00 	cmp.w	r8, #0
 8006812:	d005      	beq.n	8006820 <_dtoa_r+0x980>
 8006814:	45b8      	cmp	r8, r7
 8006816:	d003      	beq.n	8006820 <_dtoa_r+0x980>
 8006818:	4641      	mov	r1, r8
 800681a:	4620      	mov	r0, r4
 800681c:	f000 fa72 	bl	8006d04 <_Bfree>
 8006820:	4639      	mov	r1, r7
 8006822:	4620      	mov	r0, r4
 8006824:	f000 fa6e 	bl	8006d04 <_Bfree>
 8006828:	e69c      	b.n	8006564 <_dtoa_r+0x6c4>
 800682a:	2600      	movs	r6, #0
 800682c:	4637      	mov	r7, r6
 800682e:	e7e1      	b.n	80067f4 <_dtoa_r+0x954>
 8006830:	46bb      	mov	fp, r7
 8006832:	4637      	mov	r7, r6
 8006834:	e599      	b.n	800636a <_dtoa_r+0x4ca>
 8006836:	bf00      	nop
 8006838:	40240000 	.word	0x40240000
 800683c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80c8 	beq.w	80069d4 <_dtoa_r+0xb34>
 8006844:	9b04      	ldr	r3, [sp, #16]
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	2d00      	cmp	r5, #0
 800684a:	dd05      	ble.n	8006858 <_dtoa_r+0x9b8>
 800684c:	4639      	mov	r1, r7
 800684e:	462a      	mov	r2, r5
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fc27 	bl	80070a4 <__lshift>
 8006856:	4607      	mov	r7, r0
 8006858:	f1b8 0f00 	cmp.w	r8, #0
 800685c:	d05b      	beq.n	8006916 <_dtoa_r+0xa76>
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4620      	mov	r0, r4
 8006862:	f000 fa0f 	bl	8006c84 <_Balloc>
 8006866:	4605      	mov	r5, r0
 8006868:	b928      	cbnz	r0, 8006876 <_dtoa_r+0x9d6>
 800686a:	4b83      	ldr	r3, [pc, #524]	; (8006a78 <_dtoa_r+0xbd8>)
 800686c:	4602      	mov	r2, r0
 800686e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006872:	f7ff bb2e 	b.w	8005ed2 <_dtoa_r+0x32>
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	3202      	adds	r2, #2
 800687a:	0092      	lsls	r2, r2, #2
 800687c:	f107 010c 	add.w	r1, r7, #12
 8006880:	300c      	adds	r0, #12
 8006882:	f000 ffab 	bl	80077dc <memcpy>
 8006886:	2201      	movs	r2, #1
 8006888:	4629      	mov	r1, r5
 800688a:	4620      	mov	r0, r4
 800688c:	f000 fc0a 	bl	80070a4 <__lshift>
 8006890:	9b00      	ldr	r3, [sp, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800689a:	4413      	add	r3, r2
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	9b02      	ldr	r3, [sp, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	46b8      	mov	r8, r7
 80068a6:	9306      	str	r3, [sp, #24]
 80068a8:	4607      	mov	r7, r0
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	4631      	mov	r1, r6
 80068ae:	3b01      	subs	r3, #1
 80068b0:	4650      	mov	r0, sl
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	f7ff fa69 	bl	8005d8a <quorem>
 80068b8:	4641      	mov	r1, r8
 80068ba:	9002      	str	r0, [sp, #8]
 80068bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80068c0:	4650      	mov	r0, sl
 80068c2:	f000 fc5b 	bl	800717c <__mcmp>
 80068c6:	463a      	mov	r2, r7
 80068c8:	9005      	str	r0, [sp, #20]
 80068ca:	4631      	mov	r1, r6
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fc71 	bl	80071b4 <__mdiff>
 80068d2:	68c2      	ldr	r2, [r0, #12]
 80068d4:	4605      	mov	r5, r0
 80068d6:	bb02      	cbnz	r2, 800691a <_dtoa_r+0xa7a>
 80068d8:	4601      	mov	r1, r0
 80068da:	4650      	mov	r0, sl
 80068dc:	f000 fc4e 	bl	800717c <__mcmp>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4629      	mov	r1, r5
 80068e4:	4620      	mov	r0, r4
 80068e6:	9209      	str	r2, [sp, #36]	; 0x24
 80068e8:	f000 fa0c 	bl	8006d04 <_Bfree>
 80068ec:	9b07      	ldr	r3, [sp, #28]
 80068ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f0:	9d04      	ldr	r5, [sp, #16]
 80068f2:	ea43 0102 	orr.w	r1, r3, r2
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	4319      	orrs	r1, r3
 80068fa:	d110      	bne.n	800691e <_dtoa_r+0xa7e>
 80068fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006900:	d029      	beq.n	8006956 <_dtoa_r+0xab6>
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	dd02      	ble.n	800690e <_dtoa_r+0xa6e>
 8006908:	9b02      	ldr	r3, [sp, #8]
 800690a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	f883 9000 	strb.w	r9, [r3]
 8006914:	e774      	b.n	8006800 <_dtoa_r+0x960>
 8006916:	4638      	mov	r0, r7
 8006918:	e7ba      	b.n	8006890 <_dtoa_r+0x9f0>
 800691a:	2201      	movs	r2, #1
 800691c:	e7e1      	b.n	80068e2 <_dtoa_r+0xa42>
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	db04      	blt.n	800692e <_dtoa_r+0xa8e>
 8006924:	9907      	ldr	r1, [sp, #28]
 8006926:	430b      	orrs	r3, r1
 8006928:	9906      	ldr	r1, [sp, #24]
 800692a:	430b      	orrs	r3, r1
 800692c:	d120      	bne.n	8006970 <_dtoa_r+0xad0>
 800692e:	2a00      	cmp	r2, #0
 8006930:	dded      	ble.n	800690e <_dtoa_r+0xa6e>
 8006932:	4651      	mov	r1, sl
 8006934:	2201      	movs	r2, #1
 8006936:	4620      	mov	r0, r4
 8006938:	f000 fbb4 	bl	80070a4 <__lshift>
 800693c:	4631      	mov	r1, r6
 800693e:	4682      	mov	sl, r0
 8006940:	f000 fc1c 	bl	800717c <__mcmp>
 8006944:	2800      	cmp	r0, #0
 8006946:	dc03      	bgt.n	8006950 <_dtoa_r+0xab0>
 8006948:	d1e1      	bne.n	800690e <_dtoa_r+0xa6e>
 800694a:	f019 0f01 	tst.w	r9, #1
 800694e:	d0de      	beq.n	800690e <_dtoa_r+0xa6e>
 8006950:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006954:	d1d8      	bne.n	8006908 <_dtoa_r+0xa68>
 8006956:	9a01      	ldr	r2, [sp, #4]
 8006958:	2339      	movs	r3, #57	; 0x39
 800695a:	7013      	strb	r3, [r2, #0]
 800695c:	462b      	mov	r3, r5
 800695e:	461d      	mov	r5, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006966:	2a39      	cmp	r2, #57	; 0x39
 8006968:	d06c      	beq.n	8006a44 <_dtoa_r+0xba4>
 800696a:	3201      	adds	r2, #1
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	e747      	b.n	8006800 <_dtoa_r+0x960>
 8006970:	2a00      	cmp	r2, #0
 8006972:	dd07      	ble.n	8006984 <_dtoa_r+0xae4>
 8006974:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006978:	d0ed      	beq.n	8006956 <_dtoa_r+0xab6>
 800697a:	9a01      	ldr	r2, [sp, #4]
 800697c:	f109 0301 	add.w	r3, r9, #1
 8006980:	7013      	strb	r3, [r2, #0]
 8006982:	e73d      	b.n	8006800 <_dtoa_r+0x960>
 8006984:	9b04      	ldr	r3, [sp, #16]
 8006986:	9a08      	ldr	r2, [sp, #32]
 8006988:	f803 9c01 	strb.w	r9, [r3, #-1]
 800698c:	4293      	cmp	r3, r2
 800698e:	d043      	beq.n	8006a18 <_dtoa_r+0xb78>
 8006990:	4651      	mov	r1, sl
 8006992:	2300      	movs	r3, #0
 8006994:	220a      	movs	r2, #10
 8006996:	4620      	mov	r0, r4
 8006998:	f000 f9d6 	bl	8006d48 <__multadd>
 800699c:	45b8      	cmp	r8, r7
 800699e:	4682      	mov	sl, r0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	f04f 020a 	mov.w	r2, #10
 80069a8:	4641      	mov	r1, r8
 80069aa:	4620      	mov	r0, r4
 80069ac:	d107      	bne.n	80069be <_dtoa_r+0xb1e>
 80069ae:	f000 f9cb 	bl	8006d48 <__multadd>
 80069b2:	4680      	mov	r8, r0
 80069b4:	4607      	mov	r7, r0
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	e775      	b.n	80068aa <_dtoa_r+0xa0a>
 80069be:	f000 f9c3 	bl	8006d48 <__multadd>
 80069c2:	4639      	mov	r1, r7
 80069c4:	4680      	mov	r8, r0
 80069c6:	2300      	movs	r3, #0
 80069c8:	220a      	movs	r2, #10
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 f9bc 	bl	8006d48 <__multadd>
 80069d0:	4607      	mov	r7, r0
 80069d2:	e7f0      	b.n	80069b6 <_dtoa_r+0xb16>
 80069d4:	9b04      	ldr	r3, [sp, #16]
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	9d00      	ldr	r5, [sp, #0]
 80069da:	4631      	mov	r1, r6
 80069dc:	4650      	mov	r0, sl
 80069de:	f7ff f9d4 	bl	8005d8a <quorem>
 80069e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069e6:	9b00      	ldr	r3, [sp, #0]
 80069e8:	f805 9b01 	strb.w	r9, [r5], #1
 80069ec:	1aea      	subs	r2, r5, r3
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	4293      	cmp	r3, r2
 80069f2:	dd07      	ble.n	8006a04 <_dtoa_r+0xb64>
 80069f4:	4651      	mov	r1, sl
 80069f6:	2300      	movs	r3, #0
 80069f8:	220a      	movs	r2, #10
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f9a4 	bl	8006d48 <__multadd>
 8006a00:	4682      	mov	sl, r0
 8006a02:	e7ea      	b.n	80069da <_dtoa_r+0xb3a>
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfc8      	it	gt
 8006a0a:	461d      	movgt	r5, r3
 8006a0c:	9b00      	ldr	r3, [sp, #0]
 8006a0e:	bfd8      	it	le
 8006a10:	2501      	movle	r5, #1
 8006a12:	441d      	add	r5, r3
 8006a14:	f04f 0800 	mov.w	r8, #0
 8006a18:	4651      	mov	r1, sl
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fb41 	bl	80070a4 <__lshift>
 8006a22:	4631      	mov	r1, r6
 8006a24:	4682      	mov	sl, r0
 8006a26:	f000 fba9 	bl	800717c <__mcmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	dc96      	bgt.n	800695c <_dtoa_r+0xabc>
 8006a2e:	d102      	bne.n	8006a36 <_dtoa_r+0xb96>
 8006a30:	f019 0f01 	tst.w	r9, #1
 8006a34:	d192      	bne.n	800695c <_dtoa_r+0xabc>
 8006a36:	462b      	mov	r3, r5
 8006a38:	461d      	mov	r5, r3
 8006a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3e:	2a30      	cmp	r2, #48	; 0x30
 8006a40:	d0fa      	beq.n	8006a38 <_dtoa_r+0xb98>
 8006a42:	e6dd      	b.n	8006800 <_dtoa_r+0x960>
 8006a44:	9a00      	ldr	r2, [sp, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d189      	bne.n	800695e <_dtoa_r+0xabe>
 8006a4a:	f10b 0b01 	add.w	fp, fp, #1
 8006a4e:	2331      	movs	r3, #49	; 0x31
 8006a50:	e796      	b.n	8006980 <_dtoa_r+0xae0>
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <_dtoa_r+0xbdc>)
 8006a54:	f7ff ba99 	b.w	8005f8a <_dtoa_r+0xea>
 8006a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f47f aa6d 	bne.w	8005f3a <_dtoa_r+0x9a>
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <_dtoa_r+0xbe0>)
 8006a62:	f7ff ba92 	b.w	8005f8a <_dtoa_r+0xea>
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dcb5      	bgt.n	80069d8 <_dtoa_r+0xb38>
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	f73f aeb1 	bgt.w	80067d6 <_dtoa_r+0x936>
 8006a74:	e7b0      	b.n	80069d8 <_dtoa_r+0xb38>
 8006a76:	bf00      	nop
 8006a78:	080092c8 	.word	0x080092c8
 8006a7c:	08009228 	.word	0x08009228
 8006a80:	0800924c 	.word	0x0800924c

08006a84 <_free_r>:
 8006a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d044      	beq.n	8006b14 <_free_r+0x90>
 8006a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a8e:	9001      	str	r0, [sp, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f1a1 0404 	sub.w	r4, r1, #4
 8006a96:	bfb8      	it	lt
 8006a98:	18e4      	addlt	r4, r4, r3
 8006a9a:	f000 f8e7 	bl	8006c6c <__malloc_lock>
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <_free_r+0x94>)
 8006aa0:	9801      	ldr	r0, [sp, #4]
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	b933      	cbnz	r3, 8006ab4 <_free_r+0x30>
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	6014      	str	r4, [r2, #0]
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab0:	f000 b8e2 	b.w	8006c78 <__malloc_unlock>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d908      	bls.n	8006aca <_free_r+0x46>
 8006ab8:	6825      	ldr	r5, [r4, #0]
 8006aba:	1961      	adds	r1, r4, r5
 8006abc:	428b      	cmp	r3, r1
 8006abe:	bf01      	itttt	eq
 8006ac0:	6819      	ldreq	r1, [r3, #0]
 8006ac2:	685b      	ldreq	r3, [r3, #4]
 8006ac4:	1949      	addeq	r1, r1, r5
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	e7ed      	b.n	8006aa6 <_free_r+0x22>
 8006aca:	461a      	mov	r2, r3
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b10b      	cbz	r3, 8006ad4 <_free_r+0x50>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d9fa      	bls.n	8006aca <_free_r+0x46>
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	1855      	adds	r5, r2, r1
 8006ad8:	42a5      	cmp	r5, r4
 8006ada:	d10b      	bne.n	8006af4 <_free_r+0x70>
 8006adc:	6824      	ldr	r4, [r4, #0]
 8006ade:	4421      	add	r1, r4
 8006ae0:	1854      	adds	r4, r2, r1
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	d1e0      	bne.n	8006aaa <_free_r+0x26>
 8006ae8:	681c      	ldr	r4, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	6053      	str	r3, [r2, #4]
 8006aee:	440c      	add	r4, r1
 8006af0:	6014      	str	r4, [r2, #0]
 8006af2:	e7da      	b.n	8006aaa <_free_r+0x26>
 8006af4:	d902      	bls.n	8006afc <_free_r+0x78>
 8006af6:	230c      	movs	r3, #12
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	e7d6      	b.n	8006aaa <_free_r+0x26>
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	1961      	adds	r1, r4, r5
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf04      	itt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	6063      	str	r3, [r4, #4]
 8006b0a:	bf04      	itt	eq
 8006b0c:	1949      	addeq	r1, r1, r5
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	6054      	str	r4, [r2, #4]
 8006b12:	e7ca      	b.n	8006aaa <_free_r+0x26>
 8006b14:	b003      	add	sp, #12
 8006b16:	bd30      	pop	{r4, r5, pc}
 8006b18:	20000c40 	.word	0x20000c40

08006b1c <malloc>:
 8006b1c:	4b02      	ldr	r3, [pc, #8]	; (8006b28 <malloc+0xc>)
 8006b1e:	4601      	mov	r1, r0
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	f000 b823 	b.w	8006b6c <_malloc_r>
 8006b26:	bf00      	nop
 8006b28:	20000064 	.word	0x20000064

08006b2c <sbrk_aligned>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4e0e      	ldr	r6, [pc, #56]	; (8006b68 <sbrk_aligned+0x3c>)
 8006b30:	460c      	mov	r4, r1
 8006b32:	6831      	ldr	r1, [r6, #0]
 8006b34:	4605      	mov	r5, r0
 8006b36:	b911      	cbnz	r1, 8006b3e <sbrk_aligned+0x12>
 8006b38:	f000 fe40 	bl	80077bc <_sbrk_r>
 8006b3c:	6030      	str	r0, [r6, #0]
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 fe3b 	bl	80077bc <_sbrk_r>
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d00a      	beq.n	8006b60 <sbrk_aligned+0x34>
 8006b4a:	1cc4      	adds	r4, r0, #3
 8006b4c:	f024 0403 	bic.w	r4, r4, #3
 8006b50:	42a0      	cmp	r0, r4
 8006b52:	d007      	beq.n	8006b64 <sbrk_aligned+0x38>
 8006b54:	1a21      	subs	r1, r4, r0
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 fe30 	bl	80077bc <_sbrk_r>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d101      	bne.n	8006b64 <sbrk_aligned+0x38>
 8006b60:	f04f 34ff 	mov.w	r4, #4294967295
 8006b64:	4620      	mov	r0, r4
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	20000c44 	.word	0x20000c44

08006b6c <_malloc_r>:
 8006b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b70:	1ccd      	adds	r5, r1, #3
 8006b72:	f025 0503 	bic.w	r5, r5, #3
 8006b76:	3508      	adds	r5, #8
 8006b78:	2d0c      	cmp	r5, #12
 8006b7a:	bf38      	it	cc
 8006b7c:	250c      	movcc	r5, #12
 8006b7e:	2d00      	cmp	r5, #0
 8006b80:	4607      	mov	r7, r0
 8006b82:	db01      	blt.n	8006b88 <_malloc_r+0x1c>
 8006b84:	42a9      	cmp	r1, r5
 8006b86:	d905      	bls.n	8006b94 <_malloc_r+0x28>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	4630      	mov	r0, r6
 8006b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c68 <_malloc_r+0xfc>
 8006b98:	f000 f868 	bl	8006c6c <__malloc_lock>
 8006b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba0:	461c      	mov	r4, r3
 8006ba2:	bb5c      	cbnz	r4, 8006bfc <_malloc_r+0x90>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7ff ffc0 	bl	8006b2c <sbrk_aligned>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	4604      	mov	r4, r0
 8006bb0:	d155      	bne.n	8006c5e <_malloc_r+0xf2>
 8006bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8006bb6:	4626      	mov	r6, r4
 8006bb8:	2e00      	cmp	r6, #0
 8006bba:	d145      	bne.n	8006c48 <_malloc_r+0xdc>
 8006bbc:	2c00      	cmp	r4, #0
 8006bbe:	d048      	beq.n	8006c52 <_malloc_r+0xe6>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	eb04 0903 	add.w	r9, r4, r3
 8006bca:	f000 fdf7 	bl	80077bc <_sbrk_r>
 8006bce:	4581      	cmp	r9, r0
 8006bd0:	d13f      	bne.n	8006c52 <_malloc_r+0xe6>
 8006bd2:	6821      	ldr	r1, [r4, #0]
 8006bd4:	1a6d      	subs	r5, r5, r1
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff ffa7 	bl	8006b2c <sbrk_aligned>
 8006bde:	3001      	adds	r0, #1
 8006be0:	d037      	beq.n	8006c52 <_malloc_r+0xe6>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	442b      	add	r3, r5
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d038      	beq.n	8006c62 <_malloc_r+0xf6>
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	42a2      	cmp	r2, r4
 8006bf4:	d12b      	bne.n	8006c4e <_malloc_r+0xe2>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	e00f      	b.n	8006c1c <_malloc_r+0xb0>
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	1b52      	subs	r2, r2, r5
 8006c00:	d41f      	bmi.n	8006c42 <_malloc_r+0xd6>
 8006c02:	2a0b      	cmp	r2, #11
 8006c04:	d917      	bls.n	8006c36 <_malloc_r+0xca>
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	6025      	str	r5, [r4, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	6059      	strne	r1, [r3, #4]
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	bf08      	it	eq
 8006c14:	f8c8 1000 	streq.w	r1, [r8]
 8006c18:	5162      	str	r2, [r4, r5]
 8006c1a:	604b      	str	r3, [r1, #4]
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f104 060b 	add.w	r6, r4, #11
 8006c22:	f000 f829 	bl	8006c78 <__malloc_unlock>
 8006c26:	f026 0607 	bic.w	r6, r6, #7
 8006c2a:	1d23      	adds	r3, r4, #4
 8006c2c:	1af2      	subs	r2, r6, r3
 8006c2e:	d0ae      	beq.n	8006b8e <_malloc_r+0x22>
 8006c30:	1b9b      	subs	r3, r3, r6
 8006c32:	50a3      	str	r3, [r4, r2]
 8006c34:	e7ab      	b.n	8006b8e <_malloc_r+0x22>
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	6862      	ldr	r2, [r4, #4]
 8006c3a:	d1dd      	bne.n	8006bf8 <_malloc_r+0x8c>
 8006c3c:	f8c8 2000 	str.w	r2, [r8]
 8006c40:	e7ec      	b.n	8006c1c <_malloc_r+0xb0>
 8006c42:	4623      	mov	r3, r4
 8006c44:	6864      	ldr	r4, [r4, #4]
 8006c46:	e7ac      	b.n	8006ba2 <_malloc_r+0x36>
 8006c48:	4634      	mov	r4, r6
 8006c4a:	6876      	ldr	r6, [r6, #4]
 8006c4c:	e7b4      	b.n	8006bb8 <_malloc_r+0x4c>
 8006c4e:	4613      	mov	r3, r2
 8006c50:	e7cc      	b.n	8006bec <_malloc_r+0x80>
 8006c52:	230c      	movs	r3, #12
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4638      	mov	r0, r7
 8006c58:	f000 f80e 	bl	8006c78 <__malloc_unlock>
 8006c5c:	e797      	b.n	8006b8e <_malloc_r+0x22>
 8006c5e:	6025      	str	r5, [r4, #0]
 8006c60:	e7dc      	b.n	8006c1c <_malloc_r+0xb0>
 8006c62:	605b      	str	r3, [r3, #4]
 8006c64:	deff      	udf	#255	; 0xff
 8006c66:	bf00      	nop
 8006c68:	20000c40 	.word	0x20000c40

08006c6c <__malloc_lock>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__malloc_lock+0x8>)
 8006c6e:	f7ff b88a 	b.w	8005d86 <__retarget_lock_acquire_recursive>
 8006c72:	bf00      	nop
 8006c74:	20000c3c 	.word	0x20000c3c

08006c78 <__malloc_unlock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__malloc_unlock+0x8>)
 8006c7a:	f7ff b885 	b.w	8005d88 <__retarget_lock_release_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20000c3c 	.word	0x20000c3c

08006c84 <_Balloc>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	69c6      	ldr	r6, [r0, #28]
 8006c88:	4604      	mov	r4, r0
 8006c8a:	460d      	mov	r5, r1
 8006c8c:	b976      	cbnz	r6, 8006cac <_Balloc+0x28>
 8006c8e:	2010      	movs	r0, #16
 8006c90:	f7ff ff44 	bl	8006b1c <malloc>
 8006c94:	4602      	mov	r2, r0
 8006c96:	61e0      	str	r0, [r4, #28]
 8006c98:	b920      	cbnz	r0, 8006ca4 <_Balloc+0x20>
 8006c9a:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <_Balloc+0x78>)
 8006c9c:	4818      	ldr	r0, [pc, #96]	; (8006d00 <_Balloc+0x7c>)
 8006c9e:	216b      	movs	r1, #107	; 0x6b
 8006ca0:	f000 fdaa 	bl	80077f8 <__assert_func>
 8006ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ca8:	6006      	str	r6, [r0, #0]
 8006caa:	60c6      	str	r6, [r0, #12]
 8006cac:	69e6      	ldr	r6, [r4, #28]
 8006cae:	68f3      	ldr	r3, [r6, #12]
 8006cb0:	b183      	cbz	r3, 8006cd4 <_Balloc+0x50>
 8006cb2:	69e3      	ldr	r3, [r4, #28]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cba:	b9b8      	cbnz	r0, 8006cec <_Balloc+0x68>
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8006cc2:	1d72      	adds	r2, r6, #5
 8006cc4:	0092      	lsls	r2, r2, #2
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 fdb4 	bl	8007834 <_calloc_r>
 8006ccc:	b160      	cbz	r0, 8006ce8 <_Balloc+0x64>
 8006cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cd2:	e00e      	b.n	8006cf2 <_Balloc+0x6e>
 8006cd4:	2221      	movs	r2, #33	; 0x21
 8006cd6:	2104      	movs	r1, #4
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fdab 	bl	8007834 <_calloc_r>
 8006cde:	69e3      	ldr	r3, [r4, #28]
 8006ce0:	60f0      	str	r0, [r6, #12]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e4      	bne.n	8006cb2 <_Balloc+0x2e>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	6802      	ldr	r2, [r0, #0]
 8006cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cf8:	e7f7      	b.n	8006cea <_Balloc+0x66>
 8006cfa:	bf00      	nop
 8006cfc:	08009259 	.word	0x08009259
 8006d00:	080092d9 	.word	0x080092d9

08006d04 <_Bfree>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	69c6      	ldr	r6, [r0, #28]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b976      	cbnz	r6, 8006d2c <_Bfree+0x28>
 8006d0e:	2010      	movs	r0, #16
 8006d10:	f7ff ff04 	bl	8006b1c <malloc>
 8006d14:	4602      	mov	r2, r0
 8006d16:	61e8      	str	r0, [r5, #28]
 8006d18:	b920      	cbnz	r0, 8006d24 <_Bfree+0x20>
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <_Bfree+0x3c>)
 8006d1c:	4809      	ldr	r0, [pc, #36]	; (8006d44 <_Bfree+0x40>)
 8006d1e:	218f      	movs	r1, #143	; 0x8f
 8006d20:	f000 fd6a 	bl	80077f8 <__assert_func>
 8006d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d28:	6006      	str	r6, [r0, #0]
 8006d2a:	60c6      	str	r6, [r0, #12]
 8006d2c:	b13c      	cbz	r4, 8006d3e <_Bfree+0x3a>
 8006d2e:	69eb      	ldr	r3, [r5, #28]
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d38:	6021      	str	r1, [r4, #0]
 8006d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	08009259 	.word	0x08009259
 8006d44:	080092d9 	.word	0x080092d9

08006d48 <__multadd>:
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	690d      	ldr	r5, [r1, #16]
 8006d4e:	4607      	mov	r7, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	461e      	mov	r6, r3
 8006d54:	f101 0c14 	add.w	ip, r1, #20
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d5e:	b299      	uxth	r1, r3
 8006d60:	fb02 6101 	mla	r1, r2, r1, r6
 8006d64:	0c1e      	lsrs	r6, r3, #16
 8006d66:	0c0b      	lsrs	r3, r1, #16
 8006d68:	fb02 3306 	mla	r3, r2, r6, r3
 8006d6c:	b289      	uxth	r1, r1
 8006d6e:	3001      	adds	r0, #1
 8006d70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d74:	4285      	cmp	r5, r0
 8006d76:	f84c 1b04 	str.w	r1, [ip], #4
 8006d7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d7e:	dcec      	bgt.n	8006d5a <__multadd+0x12>
 8006d80:	b30e      	cbz	r6, 8006dc6 <__multadd+0x7e>
 8006d82:	68a3      	ldr	r3, [r4, #8]
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dc19      	bgt.n	8006dbc <__multadd+0x74>
 8006d88:	6861      	ldr	r1, [r4, #4]
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	3101      	adds	r1, #1
 8006d8e:	f7ff ff79 	bl	8006c84 <_Balloc>
 8006d92:	4680      	mov	r8, r0
 8006d94:	b928      	cbnz	r0, 8006da2 <__multadd+0x5a>
 8006d96:	4602      	mov	r2, r0
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <__multadd+0x84>)
 8006d9a:	480d      	ldr	r0, [pc, #52]	; (8006dd0 <__multadd+0x88>)
 8006d9c:	21ba      	movs	r1, #186	; 0xba
 8006d9e:	f000 fd2b 	bl	80077f8 <__assert_func>
 8006da2:	6922      	ldr	r2, [r4, #16]
 8006da4:	3202      	adds	r2, #2
 8006da6:	f104 010c 	add.w	r1, r4, #12
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	300c      	adds	r0, #12
 8006dae:	f000 fd15 	bl	80077dc <memcpy>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff ffa5 	bl	8006d04 <_Bfree>
 8006dba:	4644      	mov	r4, r8
 8006dbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	615e      	str	r6, [r3, #20]
 8006dc4:	6125      	str	r5, [r4, #16]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dcc:	080092c8 	.word	0x080092c8
 8006dd0:	080092d9 	.word	0x080092d9

08006dd4 <__hi0bits>:
 8006dd4:	0c03      	lsrs	r3, r0, #16
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	b9d3      	cbnz	r3, 8006e10 <__hi0bits+0x3c>
 8006dda:	0400      	lsls	r0, r0, #16
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006de2:	bf04      	itt	eq
 8006de4:	0200      	lsleq	r0, r0, #8
 8006de6:	3308      	addeq	r3, #8
 8006de8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dec:	bf04      	itt	eq
 8006dee:	0100      	lsleq	r0, r0, #4
 8006df0:	3304      	addeq	r3, #4
 8006df2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006df6:	bf04      	itt	eq
 8006df8:	0080      	lsleq	r0, r0, #2
 8006dfa:	3302      	addeq	r3, #2
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	db05      	blt.n	8006e0c <__hi0bits+0x38>
 8006e00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e04:	f103 0301 	add.w	r3, r3, #1
 8006e08:	bf08      	it	eq
 8006e0a:	2320      	moveq	r3, #32
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	4770      	bx	lr
 8006e10:	2300      	movs	r3, #0
 8006e12:	e7e4      	b.n	8006dde <__hi0bits+0xa>

08006e14 <__lo0bits>:
 8006e14:	6803      	ldr	r3, [r0, #0]
 8006e16:	f013 0207 	ands.w	r2, r3, #7
 8006e1a:	d00c      	beq.n	8006e36 <__lo0bits+0x22>
 8006e1c:	07d9      	lsls	r1, r3, #31
 8006e1e:	d422      	bmi.n	8006e66 <__lo0bits+0x52>
 8006e20:	079a      	lsls	r2, r3, #30
 8006e22:	bf49      	itett	mi
 8006e24:	085b      	lsrmi	r3, r3, #1
 8006e26:	089b      	lsrpl	r3, r3, #2
 8006e28:	6003      	strmi	r3, [r0, #0]
 8006e2a:	2201      	movmi	r2, #1
 8006e2c:	bf5c      	itt	pl
 8006e2e:	6003      	strpl	r3, [r0, #0]
 8006e30:	2202      	movpl	r2, #2
 8006e32:	4610      	mov	r0, r2
 8006e34:	4770      	bx	lr
 8006e36:	b299      	uxth	r1, r3
 8006e38:	b909      	cbnz	r1, 8006e3e <__lo0bits+0x2a>
 8006e3a:	0c1b      	lsrs	r3, r3, #16
 8006e3c:	2210      	movs	r2, #16
 8006e3e:	b2d9      	uxtb	r1, r3
 8006e40:	b909      	cbnz	r1, 8006e46 <__lo0bits+0x32>
 8006e42:	3208      	adds	r2, #8
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	0719      	lsls	r1, r3, #28
 8006e48:	bf04      	itt	eq
 8006e4a:	091b      	lsreq	r3, r3, #4
 8006e4c:	3204      	addeq	r2, #4
 8006e4e:	0799      	lsls	r1, r3, #30
 8006e50:	bf04      	itt	eq
 8006e52:	089b      	lsreq	r3, r3, #2
 8006e54:	3202      	addeq	r2, #2
 8006e56:	07d9      	lsls	r1, r3, #31
 8006e58:	d403      	bmi.n	8006e62 <__lo0bits+0x4e>
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	f102 0201 	add.w	r2, r2, #1
 8006e60:	d003      	beq.n	8006e6a <__lo0bits+0x56>
 8006e62:	6003      	str	r3, [r0, #0]
 8006e64:	e7e5      	b.n	8006e32 <__lo0bits+0x1e>
 8006e66:	2200      	movs	r2, #0
 8006e68:	e7e3      	b.n	8006e32 <__lo0bits+0x1e>
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	e7e1      	b.n	8006e32 <__lo0bits+0x1e>
	...

08006e70 <__i2b>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	2101      	movs	r1, #1
 8006e76:	f7ff ff05 	bl	8006c84 <_Balloc>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	b928      	cbnz	r0, 8006e8a <__i2b+0x1a>
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <__i2b+0x24>)
 8006e80:	4805      	ldr	r0, [pc, #20]	; (8006e98 <__i2b+0x28>)
 8006e82:	f240 1145 	movw	r1, #325	; 0x145
 8006e86:	f000 fcb7 	bl	80077f8 <__assert_func>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	6144      	str	r4, [r0, #20]
 8006e8e:	6103      	str	r3, [r0, #16]
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	bf00      	nop
 8006e94:	080092c8 	.word	0x080092c8
 8006e98:	080092d9 	.word	0x080092d9

08006e9c <__multiply>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	4691      	mov	r9, r2
 8006ea2:	690a      	ldr	r2, [r1, #16]
 8006ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	bfb8      	it	lt
 8006eac:	460b      	movlt	r3, r1
 8006eae:	460c      	mov	r4, r1
 8006eb0:	bfbc      	itt	lt
 8006eb2:	464c      	movlt	r4, r9
 8006eb4:	4699      	movlt	r9, r3
 8006eb6:	6927      	ldr	r7, [r4, #16]
 8006eb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	6861      	ldr	r1, [r4, #4]
 8006ec0:	eb07 060a 	add.w	r6, r7, sl
 8006ec4:	42b3      	cmp	r3, r6
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	bfb8      	it	lt
 8006eca:	3101      	addlt	r1, #1
 8006ecc:	f7ff feda 	bl	8006c84 <_Balloc>
 8006ed0:	b930      	cbnz	r0, 8006ee0 <__multiply+0x44>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b44      	ldr	r3, [pc, #272]	; (8006fe8 <__multiply+0x14c>)
 8006ed6:	4845      	ldr	r0, [pc, #276]	; (8006fec <__multiply+0x150>)
 8006ed8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006edc:	f000 fc8c 	bl	80077f8 <__assert_func>
 8006ee0:	f100 0514 	add.w	r5, r0, #20
 8006ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ee8:	462b      	mov	r3, r5
 8006eea:	2200      	movs	r2, #0
 8006eec:	4543      	cmp	r3, r8
 8006eee:	d321      	bcc.n	8006f34 <__multiply+0x98>
 8006ef0:	f104 0314 	add.w	r3, r4, #20
 8006ef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ef8:	f109 0314 	add.w	r3, r9, #20
 8006efc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f00:	9202      	str	r2, [sp, #8]
 8006f02:	1b3a      	subs	r2, r7, r4
 8006f04:	3a15      	subs	r2, #21
 8006f06:	f022 0203 	bic.w	r2, r2, #3
 8006f0a:	3204      	adds	r2, #4
 8006f0c:	f104 0115 	add.w	r1, r4, #21
 8006f10:	428f      	cmp	r7, r1
 8006f12:	bf38      	it	cc
 8006f14:	2204      	movcc	r2, #4
 8006f16:	9201      	str	r2, [sp, #4]
 8006f18:	9a02      	ldr	r2, [sp, #8]
 8006f1a:	9303      	str	r3, [sp, #12]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d80c      	bhi.n	8006f3a <__multiply+0x9e>
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	dd03      	ble.n	8006f2c <__multiply+0x90>
 8006f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05b      	beq.n	8006fe4 <__multiply+0x148>
 8006f2c:	6106      	str	r6, [r0, #16]
 8006f2e:	b005      	add	sp, #20
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	f843 2b04 	str.w	r2, [r3], #4
 8006f38:	e7d8      	b.n	8006eec <__multiply+0x50>
 8006f3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f3e:	f1ba 0f00 	cmp.w	sl, #0
 8006f42:	d024      	beq.n	8006f8e <__multiply+0xf2>
 8006f44:	f104 0e14 	add.w	lr, r4, #20
 8006f48:	46a9      	mov	r9, r5
 8006f4a:	f04f 0c00 	mov.w	ip, #0
 8006f4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f52:	f8d9 1000 	ldr.w	r1, [r9]
 8006f56:	fa1f fb82 	uxth.w	fp, r2
 8006f5a:	b289      	uxth	r1, r1
 8006f5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f64:	f8d9 2000 	ldr.w	r2, [r9]
 8006f68:	4461      	add	r1, ip
 8006f6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f76:	b289      	uxth	r1, r1
 8006f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f7c:	4577      	cmp	r7, lr
 8006f7e:	f849 1b04 	str.w	r1, [r9], #4
 8006f82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f86:	d8e2      	bhi.n	8006f4e <__multiply+0xb2>
 8006f88:	9a01      	ldr	r2, [sp, #4]
 8006f8a:	f845 c002 	str.w	ip, [r5, r2]
 8006f8e:	9a03      	ldr	r2, [sp, #12]
 8006f90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f94:	3304      	adds	r3, #4
 8006f96:	f1b9 0f00 	cmp.w	r9, #0
 8006f9a:	d021      	beq.n	8006fe0 <__multiply+0x144>
 8006f9c:	6829      	ldr	r1, [r5, #0]
 8006f9e:	f104 0c14 	add.w	ip, r4, #20
 8006fa2:	46ae      	mov	lr, r5
 8006fa4:	f04f 0a00 	mov.w	sl, #0
 8006fa8:	f8bc b000 	ldrh.w	fp, [ip]
 8006fac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fb0:	fb09 220b 	mla	r2, r9, fp, r2
 8006fb4:	4452      	add	r2, sl
 8006fb6:	b289      	uxth	r1, r1
 8006fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fbc:	f84e 1b04 	str.w	r1, [lr], #4
 8006fc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006fc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fc8:	f8be 1000 	ldrh.w	r1, [lr]
 8006fcc:	fb09 110a 	mla	r1, r9, sl, r1
 8006fd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006fd4:	4567      	cmp	r7, ip
 8006fd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fda:	d8e5      	bhi.n	8006fa8 <__multiply+0x10c>
 8006fdc:	9a01      	ldr	r2, [sp, #4]
 8006fde:	50a9      	str	r1, [r5, r2]
 8006fe0:	3504      	adds	r5, #4
 8006fe2:	e799      	b.n	8006f18 <__multiply+0x7c>
 8006fe4:	3e01      	subs	r6, #1
 8006fe6:	e79b      	b.n	8006f20 <__multiply+0x84>
 8006fe8:	080092c8 	.word	0x080092c8
 8006fec:	080092d9 	.word	0x080092d9

08006ff0 <__pow5mult>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	4615      	mov	r5, r2
 8006ff6:	f012 0203 	ands.w	r2, r2, #3
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	d007      	beq.n	8007010 <__pow5mult+0x20>
 8007000:	4c25      	ldr	r4, [pc, #148]	; (8007098 <__pow5mult+0xa8>)
 8007002:	3a01      	subs	r2, #1
 8007004:	2300      	movs	r3, #0
 8007006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800700a:	f7ff fe9d 	bl	8006d48 <__multadd>
 800700e:	4607      	mov	r7, r0
 8007010:	10ad      	asrs	r5, r5, #2
 8007012:	d03d      	beq.n	8007090 <__pow5mult+0xa0>
 8007014:	69f4      	ldr	r4, [r6, #28]
 8007016:	b97c      	cbnz	r4, 8007038 <__pow5mult+0x48>
 8007018:	2010      	movs	r0, #16
 800701a:	f7ff fd7f 	bl	8006b1c <malloc>
 800701e:	4602      	mov	r2, r0
 8007020:	61f0      	str	r0, [r6, #28]
 8007022:	b928      	cbnz	r0, 8007030 <__pow5mult+0x40>
 8007024:	4b1d      	ldr	r3, [pc, #116]	; (800709c <__pow5mult+0xac>)
 8007026:	481e      	ldr	r0, [pc, #120]	; (80070a0 <__pow5mult+0xb0>)
 8007028:	f240 11b3 	movw	r1, #435	; 0x1b3
 800702c:	f000 fbe4 	bl	80077f8 <__assert_func>
 8007030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007034:	6004      	str	r4, [r0, #0]
 8007036:	60c4      	str	r4, [r0, #12]
 8007038:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800703c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007040:	b94c      	cbnz	r4, 8007056 <__pow5mult+0x66>
 8007042:	f240 2171 	movw	r1, #625	; 0x271
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ff12 	bl	8006e70 <__i2b>
 800704c:	2300      	movs	r3, #0
 800704e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007052:	4604      	mov	r4, r0
 8007054:	6003      	str	r3, [r0, #0]
 8007056:	f04f 0900 	mov.w	r9, #0
 800705a:	07eb      	lsls	r3, r5, #31
 800705c:	d50a      	bpl.n	8007074 <__pow5mult+0x84>
 800705e:	4639      	mov	r1, r7
 8007060:	4622      	mov	r2, r4
 8007062:	4630      	mov	r0, r6
 8007064:	f7ff ff1a 	bl	8006e9c <__multiply>
 8007068:	4639      	mov	r1, r7
 800706a:	4680      	mov	r8, r0
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff fe49 	bl	8006d04 <_Bfree>
 8007072:	4647      	mov	r7, r8
 8007074:	106d      	asrs	r5, r5, #1
 8007076:	d00b      	beq.n	8007090 <__pow5mult+0xa0>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	b938      	cbnz	r0, 800708c <__pow5mult+0x9c>
 800707c:	4622      	mov	r2, r4
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff ff0b 	bl	8006e9c <__multiply>
 8007086:	6020      	str	r0, [r4, #0]
 8007088:	f8c0 9000 	str.w	r9, [r0]
 800708c:	4604      	mov	r4, r0
 800708e:	e7e4      	b.n	800705a <__pow5mult+0x6a>
 8007090:	4638      	mov	r0, r7
 8007092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007096:	bf00      	nop
 8007098:	08009428 	.word	0x08009428
 800709c:	08009259 	.word	0x08009259
 80070a0:	080092d9 	.word	0x080092d9

080070a4 <__lshift>:
 80070a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	460c      	mov	r4, r1
 80070aa:	6849      	ldr	r1, [r1, #4]
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	4607      	mov	r7, r0
 80070b6:	4691      	mov	r9, r2
 80070b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070bc:	f108 0601 	add.w	r6, r8, #1
 80070c0:	42b3      	cmp	r3, r6
 80070c2:	db0b      	blt.n	80070dc <__lshift+0x38>
 80070c4:	4638      	mov	r0, r7
 80070c6:	f7ff fddd 	bl	8006c84 <_Balloc>
 80070ca:	4605      	mov	r5, r0
 80070cc:	b948      	cbnz	r0, 80070e2 <__lshift+0x3e>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b28      	ldr	r3, [pc, #160]	; (8007174 <__lshift+0xd0>)
 80070d2:	4829      	ldr	r0, [pc, #164]	; (8007178 <__lshift+0xd4>)
 80070d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80070d8:	f000 fb8e 	bl	80077f8 <__assert_func>
 80070dc:	3101      	adds	r1, #1
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	e7ee      	b.n	80070c0 <__lshift+0x1c>
 80070e2:	2300      	movs	r3, #0
 80070e4:	f100 0114 	add.w	r1, r0, #20
 80070e8:	f100 0210 	add.w	r2, r0, #16
 80070ec:	4618      	mov	r0, r3
 80070ee:	4553      	cmp	r3, sl
 80070f0:	db33      	blt.n	800715a <__lshift+0xb6>
 80070f2:	6920      	ldr	r0, [r4, #16]
 80070f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070f8:	f104 0314 	add.w	r3, r4, #20
 80070fc:	f019 091f 	ands.w	r9, r9, #31
 8007100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007104:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007108:	d02b      	beq.n	8007162 <__lshift+0xbe>
 800710a:	f1c9 0e20 	rsb	lr, r9, #32
 800710e:	468a      	mov	sl, r1
 8007110:	2200      	movs	r2, #0
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	fa00 f009 	lsl.w	r0, r0, r9
 8007118:	4310      	orrs	r0, r2
 800711a:	f84a 0b04 	str.w	r0, [sl], #4
 800711e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007122:	459c      	cmp	ip, r3
 8007124:	fa22 f20e 	lsr.w	r2, r2, lr
 8007128:	d8f3      	bhi.n	8007112 <__lshift+0x6e>
 800712a:	ebac 0304 	sub.w	r3, ip, r4
 800712e:	3b15      	subs	r3, #21
 8007130:	f023 0303 	bic.w	r3, r3, #3
 8007134:	3304      	adds	r3, #4
 8007136:	f104 0015 	add.w	r0, r4, #21
 800713a:	4584      	cmp	ip, r0
 800713c:	bf38      	it	cc
 800713e:	2304      	movcc	r3, #4
 8007140:	50ca      	str	r2, [r1, r3]
 8007142:	b10a      	cbz	r2, 8007148 <__lshift+0xa4>
 8007144:	f108 0602 	add.w	r6, r8, #2
 8007148:	3e01      	subs	r6, #1
 800714a:	4638      	mov	r0, r7
 800714c:	612e      	str	r6, [r5, #16]
 800714e:	4621      	mov	r1, r4
 8007150:	f7ff fdd8 	bl	8006d04 <_Bfree>
 8007154:	4628      	mov	r0, r5
 8007156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715a:	f842 0f04 	str.w	r0, [r2, #4]!
 800715e:	3301      	adds	r3, #1
 8007160:	e7c5      	b.n	80070ee <__lshift+0x4a>
 8007162:	3904      	subs	r1, #4
 8007164:	f853 2b04 	ldr.w	r2, [r3], #4
 8007168:	f841 2f04 	str.w	r2, [r1, #4]!
 800716c:	459c      	cmp	ip, r3
 800716e:	d8f9      	bhi.n	8007164 <__lshift+0xc0>
 8007170:	e7ea      	b.n	8007148 <__lshift+0xa4>
 8007172:	bf00      	nop
 8007174:	080092c8 	.word	0x080092c8
 8007178:	080092d9 	.word	0x080092d9

0800717c <__mcmp>:
 800717c:	b530      	push	{r4, r5, lr}
 800717e:	6902      	ldr	r2, [r0, #16]
 8007180:	690c      	ldr	r4, [r1, #16]
 8007182:	1b12      	subs	r2, r2, r4
 8007184:	d10e      	bne.n	80071a4 <__mcmp+0x28>
 8007186:	f100 0314 	add.w	r3, r0, #20
 800718a:	3114      	adds	r1, #20
 800718c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007190:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007194:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007198:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800719c:	42a5      	cmp	r5, r4
 800719e:	d003      	beq.n	80071a8 <__mcmp+0x2c>
 80071a0:	d305      	bcc.n	80071ae <__mcmp+0x32>
 80071a2:	2201      	movs	r2, #1
 80071a4:	4610      	mov	r0, r2
 80071a6:	bd30      	pop	{r4, r5, pc}
 80071a8:	4283      	cmp	r3, r0
 80071aa:	d3f3      	bcc.n	8007194 <__mcmp+0x18>
 80071ac:	e7fa      	b.n	80071a4 <__mcmp+0x28>
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295
 80071b2:	e7f7      	b.n	80071a4 <__mcmp+0x28>

080071b4 <__mdiff>:
 80071b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	460c      	mov	r4, r1
 80071ba:	4606      	mov	r6, r0
 80071bc:	4611      	mov	r1, r2
 80071be:	4620      	mov	r0, r4
 80071c0:	4690      	mov	r8, r2
 80071c2:	f7ff ffdb 	bl	800717c <__mcmp>
 80071c6:	1e05      	subs	r5, r0, #0
 80071c8:	d110      	bne.n	80071ec <__mdiff+0x38>
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff fd59 	bl	8006c84 <_Balloc>
 80071d2:	b930      	cbnz	r0, 80071e2 <__mdiff+0x2e>
 80071d4:	4b3a      	ldr	r3, [pc, #232]	; (80072c0 <__mdiff+0x10c>)
 80071d6:	4602      	mov	r2, r0
 80071d8:	f240 2137 	movw	r1, #567	; 0x237
 80071dc:	4839      	ldr	r0, [pc, #228]	; (80072c4 <__mdiff+0x110>)
 80071de:	f000 fb0b 	bl	80077f8 <__assert_func>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ec:	bfa4      	itt	ge
 80071ee:	4643      	movge	r3, r8
 80071f0:	46a0      	movge	r8, r4
 80071f2:	4630      	mov	r0, r6
 80071f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071f8:	bfa6      	itte	ge
 80071fa:	461c      	movge	r4, r3
 80071fc:	2500      	movge	r5, #0
 80071fe:	2501      	movlt	r5, #1
 8007200:	f7ff fd40 	bl	8006c84 <_Balloc>
 8007204:	b920      	cbnz	r0, 8007210 <__mdiff+0x5c>
 8007206:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <__mdiff+0x10c>)
 8007208:	4602      	mov	r2, r0
 800720a:	f240 2145 	movw	r1, #581	; 0x245
 800720e:	e7e5      	b.n	80071dc <__mdiff+0x28>
 8007210:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007214:	6926      	ldr	r6, [r4, #16]
 8007216:	60c5      	str	r5, [r0, #12]
 8007218:	f104 0914 	add.w	r9, r4, #20
 800721c:	f108 0514 	add.w	r5, r8, #20
 8007220:	f100 0e14 	add.w	lr, r0, #20
 8007224:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800722c:	f108 0210 	add.w	r2, r8, #16
 8007230:	46f2      	mov	sl, lr
 8007232:	2100      	movs	r1, #0
 8007234:	f859 3b04 	ldr.w	r3, [r9], #4
 8007238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800723c:	fa11 f88b 	uxtah	r8, r1, fp
 8007240:	b299      	uxth	r1, r3
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	eba8 0801 	sub.w	r8, r8, r1
 8007248:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800724c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007250:	fa1f f888 	uxth.w	r8, r8
 8007254:	1419      	asrs	r1, r3, #16
 8007256:	454e      	cmp	r6, r9
 8007258:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800725c:	f84a 3b04 	str.w	r3, [sl], #4
 8007260:	d8e8      	bhi.n	8007234 <__mdiff+0x80>
 8007262:	1b33      	subs	r3, r6, r4
 8007264:	3b15      	subs	r3, #21
 8007266:	f023 0303 	bic.w	r3, r3, #3
 800726a:	3304      	adds	r3, #4
 800726c:	3415      	adds	r4, #21
 800726e:	42a6      	cmp	r6, r4
 8007270:	bf38      	it	cc
 8007272:	2304      	movcc	r3, #4
 8007274:	441d      	add	r5, r3
 8007276:	4473      	add	r3, lr
 8007278:	469e      	mov	lr, r3
 800727a:	462e      	mov	r6, r5
 800727c:	4566      	cmp	r6, ip
 800727e:	d30e      	bcc.n	800729e <__mdiff+0xea>
 8007280:	f10c 0203 	add.w	r2, ip, #3
 8007284:	1b52      	subs	r2, r2, r5
 8007286:	f022 0203 	bic.w	r2, r2, #3
 800728a:	3d03      	subs	r5, #3
 800728c:	45ac      	cmp	ip, r5
 800728e:	bf38      	it	cc
 8007290:	2200      	movcc	r2, #0
 8007292:	4413      	add	r3, r2
 8007294:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007298:	b17a      	cbz	r2, 80072ba <__mdiff+0x106>
 800729a:	6107      	str	r7, [r0, #16]
 800729c:	e7a4      	b.n	80071e8 <__mdiff+0x34>
 800729e:	f856 8b04 	ldr.w	r8, [r6], #4
 80072a2:	fa11 f288 	uxtah	r2, r1, r8
 80072a6:	1414      	asrs	r4, r2, #16
 80072a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072ac:	b292      	uxth	r2, r2
 80072ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072b2:	f84e 2b04 	str.w	r2, [lr], #4
 80072b6:	1421      	asrs	r1, r4, #16
 80072b8:	e7e0      	b.n	800727c <__mdiff+0xc8>
 80072ba:	3f01      	subs	r7, #1
 80072bc:	e7ea      	b.n	8007294 <__mdiff+0xe0>
 80072be:	bf00      	nop
 80072c0:	080092c8 	.word	0x080092c8
 80072c4:	080092d9 	.word	0x080092d9

080072c8 <__d2b>:
 80072c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072cc:	460f      	mov	r7, r1
 80072ce:	2101      	movs	r1, #1
 80072d0:	ec59 8b10 	vmov	r8, r9, d0
 80072d4:	4616      	mov	r6, r2
 80072d6:	f7ff fcd5 	bl	8006c84 <_Balloc>
 80072da:	4604      	mov	r4, r0
 80072dc:	b930      	cbnz	r0, 80072ec <__d2b+0x24>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b24      	ldr	r3, [pc, #144]	; (8007374 <__d2b+0xac>)
 80072e2:	4825      	ldr	r0, [pc, #148]	; (8007378 <__d2b+0xb0>)
 80072e4:	f240 310f 	movw	r1, #783	; 0x30f
 80072e8:	f000 fa86 	bl	80077f8 <__assert_func>
 80072ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072f4:	bb2d      	cbnz	r5, 8007342 <__d2b+0x7a>
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	f1b8 0300 	subs.w	r3, r8, #0
 80072fc:	d026      	beq.n	800734c <__d2b+0x84>
 80072fe:	4668      	mov	r0, sp
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	f7ff fd87 	bl	8006e14 <__lo0bits>
 8007306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800730a:	b1e8      	cbz	r0, 8007348 <__d2b+0x80>
 800730c:	f1c0 0320 	rsb	r3, r0, #32
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	430b      	orrs	r3, r1
 8007316:	40c2      	lsrs	r2, r0
 8007318:	6163      	str	r3, [r4, #20]
 800731a:	9201      	str	r2, [sp, #4]
 800731c:	9b01      	ldr	r3, [sp, #4]
 800731e:	61a3      	str	r3, [r4, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	bf14      	ite	ne
 8007324:	2202      	movne	r2, #2
 8007326:	2201      	moveq	r2, #1
 8007328:	6122      	str	r2, [r4, #16]
 800732a:	b1bd      	cbz	r5, 800735c <__d2b+0x94>
 800732c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007330:	4405      	add	r5, r0
 8007332:	603d      	str	r5, [r7, #0]
 8007334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007338:	6030      	str	r0, [r6, #0]
 800733a:	4620      	mov	r0, r4
 800733c:	b003      	add	sp, #12
 800733e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007346:	e7d6      	b.n	80072f6 <__d2b+0x2e>
 8007348:	6161      	str	r1, [r4, #20]
 800734a:	e7e7      	b.n	800731c <__d2b+0x54>
 800734c:	a801      	add	r0, sp, #4
 800734e:	f7ff fd61 	bl	8006e14 <__lo0bits>
 8007352:	9b01      	ldr	r3, [sp, #4]
 8007354:	6163      	str	r3, [r4, #20]
 8007356:	3020      	adds	r0, #32
 8007358:	2201      	movs	r2, #1
 800735a:	e7e5      	b.n	8007328 <__d2b+0x60>
 800735c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007364:	6038      	str	r0, [r7, #0]
 8007366:	6918      	ldr	r0, [r3, #16]
 8007368:	f7ff fd34 	bl	8006dd4 <__hi0bits>
 800736c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007370:	e7e2      	b.n	8007338 <__d2b+0x70>
 8007372:	bf00      	nop
 8007374:	080092c8 	.word	0x080092c8
 8007378:	080092d9 	.word	0x080092d9

0800737c <__ssputs_r>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	688e      	ldr	r6, [r1, #8]
 8007382:	461f      	mov	r7, r3
 8007384:	42be      	cmp	r6, r7
 8007386:	680b      	ldr	r3, [r1, #0]
 8007388:	4682      	mov	sl, r0
 800738a:	460c      	mov	r4, r1
 800738c:	4690      	mov	r8, r2
 800738e:	d82c      	bhi.n	80073ea <__ssputs_r+0x6e>
 8007390:	898a      	ldrh	r2, [r1, #12]
 8007392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007396:	d026      	beq.n	80073e6 <__ssputs_r+0x6a>
 8007398:	6965      	ldr	r5, [r4, #20]
 800739a:	6909      	ldr	r1, [r1, #16]
 800739c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073a0:	eba3 0901 	sub.w	r9, r3, r1
 80073a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073a8:	1c7b      	adds	r3, r7, #1
 80073aa:	444b      	add	r3, r9
 80073ac:	106d      	asrs	r5, r5, #1
 80073ae:	429d      	cmp	r5, r3
 80073b0:	bf38      	it	cc
 80073b2:	461d      	movcc	r5, r3
 80073b4:	0553      	lsls	r3, r2, #21
 80073b6:	d527      	bpl.n	8007408 <__ssputs_r+0x8c>
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7ff fbd7 	bl	8006b6c <_malloc_r>
 80073be:	4606      	mov	r6, r0
 80073c0:	b360      	cbz	r0, 800741c <__ssputs_r+0xa0>
 80073c2:	6921      	ldr	r1, [r4, #16]
 80073c4:	464a      	mov	r2, r9
 80073c6:	f000 fa09 	bl	80077dc <memcpy>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	6126      	str	r6, [r4, #16]
 80073d8:	6165      	str	r5, [r4, #20]
 80073da:	444e      	add	r6, r9
 80073dc:	eba5 0509 	sub.w	r5, r5, r9
 80073e0:	6026      	str	r6, [r4, #0]
 80073e2:	60a5      	str	r5, [r4, #8]
 80073e4:	463e      	mov	r6, r7
 80073e6:	42be      	cmp	r6, r7
 80073e8:	d900      	bls.n	80073ec <__ssputs_r+0x70>
 80073ea:	463e      	mov	r6, r7
 80073ec:	6820      	ldr	r0, [r4, #0]
 80073ee:	4632      	mov	r2, r6
 80073f0:	4641      	mov	r1, r8
 80073f2:	f000 f9c9 	bl	8007788 <memmove>
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	1b9b      	subs	r3, r3, r6
 80073fa:	60a3      	str	r3, [r4, #8]
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	4433      	add	r3, r6
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	2000      	movs	r0, #0
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	462a      	mov	r2, r5
 800740a:	f000 fa3b 	bl	8007884 <_realloc_r>
 800740e:	4606      	mov	r6, r0
 8007410:	2800      	cmp	r0, #0
 8007412:	d1e0      	bne.n	80073d6 <__ssputs_r+0x5a>
 8007414:	6921      	ldr	r1, [r4, #16]
 8007416:	4650      	mov	r0, sl
 8007418:	f7ff fb34 	bl	8006a84 <_free_r>
 800741c:	230c      	movs	r3, #12
 800741e:	f8ca 3000 	str.w	r3, [sl]
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007428:	81a3      	strh	r3, [r4, #12]
 800742a:	f04f 30ff 	mov.w	r0, #4294967295
 800742e:	e7e9      	b.n	8007404 <__ssputs_r+0x88>

08007430 <_svfiprintf_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	4698      	mov	r8, r3
 8007436:	898b      	ldrh	r3, [r1, #12]
 8007438:	061b      	lsls	r3, r3, #24
 800743a:	b09d      	sub	sp, #116	; 0x74
 800743c:	4607      	mov	r7, r0
 800743e:	460d      	mov	r5, r1
 8007440:	4614      	mov	r4, r2
 8007442:	d50e      	bpl.n	8007462 <_svfiprintf_r+0x32>
 8007444:	690b      	ldr	r3, [r1, #16]
 8007446:	b963      	cbnz	r3, 8007462 <_svfiprintf_r+0x32>
 8007448:	2140      	movs	r1, #64	; 0x40
 800744a:	f7ff fb8f 	bl	8006b6c <_malloc_r>
 800744e:	6028      	str	r0, [r5, #0]
 8007450:	6128      	str	r0, [r5, #16]
 8007452:	b920      	cbnz	r0, 800745e <_svfiprintf_r+0x2e>
 8007454:	230c      	movs	r3, #12
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	e0d0      	b.n	8007600 <_svfiprintf_r+0x1d0>
 800745e:	2340      	movs	r3, #64	; 0x40
 8007460:	616b      	str	r3, [r5, #20]
 8007462:	2300      	movs	r3, #0
 8007464:	9309      	str	r3, [sp, #36]	; 0x24
 8007466:	2320      	movs	r3, #32
 8007468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800746c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007470:	2330      	movs	r3, #48	; 0x30
 8007472:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007618 <_svfiprintf_r+0x1e8>
 8007476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800747a:	f04f 0901 	mov.w	r9, #1
 800747e:	4623      	mov	r3, r4
 8007480:	469a      	mov	sl, r3
 8007482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007486:	b10a      	cbz	r2, 800748c <_svfiprintf_r+0x5c>
 8007488:	2a25      	cmp	r2, #37	; 0x25
 800748a:	d1f9      	bne.n	8007480 <_svfiprintf_r+0x50>
 800748c:	ebba 0b04 	subs.w	fp, sl, r4
 8007490:	d00b      	beq.n	80074aa <_svfiprintf_r+0x7a>
 8007492:	465b      	mov	r3, fp
 8007494:	4622      	mov	r2, r4
 8007496:	4629      	mov	r1, r5
 8007498:	4638      	mov	r0, r7
 800749a:	f7ff ff6f 	bl	800737c <__ssputs_r>
 800749e:	3001      	adds	r0, #1
 80074a0:	f000 80a9 	beq.w	80075f6 <_svfiprintf_r+0x1c6>
 80074a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074a6:	445a      	add	r2, fp
 80074a8:	9209      	str	r2, [sp, #36]	; 0x24
 80074aa:	f89a 3000 	ldrb.w	r3, [sl]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80a1 	beq.w	80075f6 <_svfiprintf_r+0x1c6>
 80074b4:	2300      	movs	r3, #0
 80074b6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074be:	f10a 0a01 	add.w	sl, sl, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074ca:	931a      	str	r3, [sp, #104]	; 0x68
 80074cc:	4654      	mov	r4, sl
 80074ce:	2205      	movs	r2, #5
 80074d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d4:	4850      	ldr	r0, [pc, #320]	; (8007618 <_svfiprintf_r+0x1e8>)
 80074d6:	f7f8 fe83 	bl	80001e0 <memchr>
 80074da:	9a04      	ldr	r2, [sp, #16]
 80074dc:	b9d8      	cbnz	r0, 8007516 <_svfiprintf_r+0xe6>
 80074de:	06d0      	lsls	r0, r2, #27
 80074e0:	bf44      	itt	mi
 80074e2:	2320      	movmi	r3, #32
 80074e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074e8:	0711      	lsls	r1, r2, #28
 80074ea:	bf44      	itt	mi
 80074ec:	232b      	movmi	r3, #43	; 0x2b
 80074ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f2:	f89a 3000 	ldrb.w	r3, [sl]
 80074f6:	2b2a      	cmp	r3, #42	; 0x2a
 80074f8:	d015      	beq.n	8007526 <_svfiprintf_r+0xf6>
 80074fa:	9a07      	ldr	r2, [sp, #28]
 80074fc:	4654      	mov	r4, sl
 80074fe:	2000      	movs	r0, #0
 8007500:	f04f 0c0a 	mov.w	ip, #10
 8007504:	4621      	mov	r1, r4
 8007506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800750a:	3b30      	subs	r3, #48	; 0x30
 800750c:	2b09      	cmp	r3, #9
 800750e:	d94d      	bls.n	80075ac <_svfiprintf_r+0x17c>
 8007510:	b1b0      	cbz	r0, 8007540 <_svfiprintf_r+0x110>
 8007512:	9207      	str	r2, [sp, #28]
 8007514:	e014      	b.n	8007540 <_svfiprintf_r+0x110>
 8007516:	eba0 0308 	sub.w	r3, r0, r8
 800751a:	fa09 f303 	lsl.w	r3, r9, r3
 800751e:	4313      	orrs	r3, r2
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	46a2      	mov	sl, r4
 8007524:	e7d2      	b.n	80074cc <_svfiprintf_r+0x9c>
 8007526:	9b03      	ldr	r3, [sp, #12]
 8007528:	1d19      	adds	r1, r3, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	9103      	str	r1, [sp, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	bfbb      	ittet	lt
 8007532:	425b      	neglt	r3, r3
 8007534:	f042 0202 	orrlt.w	r2, r2, #2
 8007538:	9307      	strge	r3, [sp, #28]
 800753a:	9307      	strlt	r3, [sp, #28]
 800753c:	bfb8      	it	lt
 800753e:	9204      	strlt	r2, [sp, #16]
 8007540:	7823      	ldrb	r3, [r4, #0]
 8007542:	2b2e      	cmp	r3, #46	; 0x2e
 8007544:	d10c      	bne.n	8007560 <_svfiprintf_r+0x130>
 8007546:	7863      	ldrb	r3, [r4, #1]
 8007548:	2b2a      	cmp	r3, #42	; 0x2a
 800754a:	d134      	bne.n	80075b6 <_svfiprintf_r+0x186>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	9203      	str	r2, [sp, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	bfb8      	it	lt
 8007558:	f04f 33ff 	movlt.w	r3, #4294967295
 800755c:	3402      	adds	r4, #2
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007628 <_svfiprintf_r+0x1f8>
 8007564:	7821      	ldrb	r1, [r4, #0]
 8007566:	2203      	movs	r2, #3
 8007568:	4650      	mov	r0, sl
 800756a:	f7f8 fe39 	bl	80001e0 <memchr>
 800756e:	b138      	cbz	r0, 8007580 <_svfiprintf_r+0x150>
 8007570:	9b04      	ldr	r3, [sp, #16]
 8007572:	eba0 000a 	sub.w	r0, r0, sl
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	4082      	lsls	r2, r0
 800757a:	4313      	orrs	r3, r2
 800757c:	3401      	adds	r4, #1
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007584:	4825      	ldr	r0, [pc, #148]	; (800761c <_svfiprintf_r+0x1ec>)
 8007586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800758a:	2206      	movs	r2, #6
 800758c:	f7f8 fe28 	bl	80001e0 <memchr>
 8007590:	2800      	cmp	r0, #0
 8007592:	d038      	beq.n	8007606 <_svfiprintf_r+0x1d6>
 8007594:	4b22      	ldr	r3, [pc, #136]	; (8007620 <_svfiprintf_r+0x1f0>)
 8007596:	bb1b      	cbnz	r3, 80075e0 <_svfiprintf_r+0x1b0>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	3307      	adds	r3, #7
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	3308      	adds	r3, #8
 80075a2:	9303      	str	r3, [sp, #12]
 80075a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a6:	4433      	add	r3, r6
 80075a8:	9309      	str	r3, [sp, #36]	; 0x24
 80075aa:	e768      	b.n	800747e <_svfiprintf_r+0x4e>
 80075ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80075b0:	460c      	mov	r4, r1
 80075b2:	2001      	movs	r0, #1
 80075b4:	e7a6      	b.n	8007504 <_svfiprintf_r+0xd4>
 80075b6:	2300      	movs	r3, #0
 80075b8:	3401      	adds	r4, #1
 80075ba:	9305      	str	r3, [sp, #20]
 80075bc:	4619      	mov	r1, r3
 80075be:	f04f 0c0a 	mov.w	ip, #10
 80075c2:	4620      	mov	r0, r4
 80075c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c8:	3a30      	subs	r2, #48	; 0x30
 80075ca:	2a09      	cmp	r2, #9
 80075cc:	d903      	bls.n	80075d6 <_svfiprintf_r+0x1a6>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0c6      	beq.n	8007560 <_svfiprintf_r+0x130>
 80075d2:	9105      	str	r1, [sp, #20]
 80075d4:	e7c4      	b.n	8007560 <_svfiprintf_r+0x130>
 80075d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075da:	4604      	mov	r4, r0
 80075dc:	2301      	movs	r3, #1
 80075de:	e7f0      	b.n	80075c2 <_svfiprintf_r+0x192>
 80075e0:	ab03      	add	r3, sp, #12
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <_svfiprintf_r+0x1f4>)
 80075e8:	a904      	add	r1, sp, #16
 80075ea:	4638      	mov	r0, r7
 80075ec:	f7fd fe62 	bl	80052b4 <_printf_float>
 80075f0:	1c42      	adds	r2, r0, #1
 80075f2:	4606      	mov	r6, r0
 80075f4:	d1d6      	bne.n	80075a4 <_svfiprintf_r+0x174>
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	065b      	lsls	r3, r3, #25
 80075fa:	f53f af2d 	bmi.w	8007458 <_svfiprintf_r+0x28>
 80075fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007600:	b01d      	add	sp, #116	; 0x74
 8007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	ab03      	add	r3, sp, #12
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	462a      	mov	r2, r5
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <_svfiprintf_r+0x1f4>)
 800760e:	a904      	add	r1, sp, #16
 8007610:	4638      	mov	r0, r7
 8007612:	f7fe f8f3 	bl	80057fc <_printf_i>
 8007616:	e7eb      	b.n	80075f0 <_svfiprintf_r+0x1c0>
 8007618:	08009434 	.word	0x08009434
 800761c:	0800943e 	.word	0x0800943e
 8007620:	080052b5 	.word	0x080052b5
 8007624:	0800737d 	.word	0x0800737d
 8007628:	0800943a 	.word	0x0800943a

0800762c <__sflush_r>:
 800762c:	898a      	ldrh	r2, [r1, #12]
 800762e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007632:	4605      	mov	r5, r0
 8007634:	0710      	lsls	r0, r2, #28
 8007636:	460c      	mov	r4, r1
 8007638:	d458      	bmi.n	80076ec <__sflush_r+0xc0>
 800763a:	684b      	ldr	r3, [r1, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dc05      	bgt.n	800764c <__sflush_r+0x20>
 8007640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	dc02      	bgt.n	800764c <__sflush_r+0x20>
 8007646:	2000      	movs	r0, #0
 8007648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764e:	2e00      	cmp	r6, #0
 8007650:	d0f9      	beq.n	8007646 <__sflush_r+0x1a>
 8007652:	2300      	movs	r3, #0
 8007654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007658:	682f      	ldr	r7, [r5, #0]
 800765a:	6a21      	ldr	r1, [r4, #32]
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	d032      	beq.n	80076c6 <__sflush_r+0x9a>
 8007660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	075a      	lsls	r2, r3, #29
 8007666:	d505      	bpl.n	8007674 <__sflush_r+0x48>
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	1ac0      	subs	r0, r0, r3
 800766c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800766e:	b10b      	cbz	r3, 8007674 <__sflush_r+0x48>
 8007670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007672:	1ac0      	subs	r0, r0, r3
 8007674:	2300      	movs	r3, #0
 8007676:	4602      	mov	r2, r0
 8007678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800767a:	6a21      	ldr	r1, [r4, #32]
 800767c:	4628      	mov	r0, r5
 800767e:	47b0      	blx	r6
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	d106      	bne.n	8007694 <__sflush_r+0x68>
 8007686:	6829      	ldr	r1, [r5, #0]
 8007688:	291d      	cmp	r1, #29
 800768a:	d82b      	bhi.n	80076e4 <__sflush_r+0xb8>
 800768c:	4a29      	ldr	r2, [pc, #164]	; (8007734 <__sflush_r+0x108>)
 800768e:	410a      	asrs	r2, r1
 8007690:	07d6      	lsls	r6, r2, #31
 8007692:	d427      	bmi.n	80076e4 <__sflush_r+0xb8>
 8007694:	2200      	movs	r2, #0
 8007696:	6062      	str	r2, [r4, #4]
 8007698:	04d9      	lsls	r1, r3, #19
 800769a:	6922      	ldr	r2, [r4, #16]
 800769c:	6022      	str	r2, [r4, #0]
 800769e:	d504      	bpl.n	80076aa <__sflush_r+0x7e>
 80076a0:	1c42      	adds	r2, r0, #1
 80076a2:	d101      	bne.n	80076a8 <__sflush_r+0x7c>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b903      	cbnz	r3, 80076aa <__sflush_r+0x7e>
 80076a8:	6560      	str	r0, [r4, #84]	; 0x54
 80076aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ac:	602f      	str	r7, [r5, #0]
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d0c9      	beq.n	8007646 <__sflush_r+0x1a>
 80076b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d002      	beq.n	80076c0 <__sflush_r+0x94>
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7ff f9e2 	bl	8006a84 <_free_r>
 80076c0:	2000      	movs	r0, #0
 80076c2:	6360      	str	r0, [r4, #52]	; 0x34
 80076c4:	e7c0      	b.n	8007648 <__sflush_r+0x1c>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b0      	blx	r6
 80076cc:	1c41      	adds	r1, r0, #1
 80076ce:	d1c8      	bne.n	8007662 <__sflush_r+0x36>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0c5      	beq.n	8007662 <__sflush_r+0x36>
 80076d6:	2b1d      	cmp	r3, #29
 80076d8:	d001      	beq.n	80076de <__sflush_r+0xb2>
 80076da:	2b16      	cmp	r3, #22
 80076dc:	d101      	bne.n	80076e2 <__sflush_r+0xb6>
 80076de:	602f      	str	r7, [r5, #0]
 80076e0:	e7b1      	b.n	8007646 <__sflush_r+0x1a>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	e7ad      	b.n	8007648 <__sflush_r+0x1c>
 80076ec:	690f      	ldr	r7, [r1, #16]
 80076ee:	2f00      	cmp	r7, #0
 80076f0:	d0a9      	beq.n	8007646 <__sflush_r+0x1a>
 80076f2:	0793      	lsls	r3, r2, #30
 80076f4:	680e      	ldr	r6, [r1, #0]
 80076f6:	bf08      	it	eq
 80076f8:	694b      	ldreq	r3, [r1, #20]
 80076fa:	600f      	str	r7, [r1, #0]
 80076fc:	bf18      	it	ne
 80076fe:	2300      	movne	r3, #0
 8007700:	eba6 0807 	sub.w	r8, r6, r7
 8007704:	608b      	str	r3, [r1, #8]
 8007706:	f1b8 0f00 	cmp.w	r8, #0
 800770a:	dd9c      	ble.n	8007646 <__sflush_r+0x1a>
 800770c:	6a21      	ldr	r1, [r4, #32]
 800770e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007710:	4643      	mov	r3, r8
 8007712:	463a      	mov	r2, r7
 8007714:	4628      	mov	r0, r5
 8007716:	47b0      	blx	r6
 8007718:	2800      	cmp	r0, #0
 800771a:	dc06      	bgt.n	800772a <__sflush_r+0xfe>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
 8007728:	e78e      	b.n	8007648 <__sflush_r+0x1c>
 800772a:	4407      	add	r7, r0
 800772c:	eba8 0800 	sub.w	r8, r8, r0
 8007730:	e7e9      	b.n	8007706 <__sflush_r+0xda>
 8007732:	bf00      	nop
 8007734:	dfbffffe 	.word	0xdfbffffe

08007738 <_fflush_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
 8007740:	b913      	cbnz	r3, 8007748 <_fflush_r+0x10>
 8007742:	2500      	movs	r5, #0
 8007744:	4628      	mov	r0, r5
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	b118      	cbz	r0, 8007752 <_fflush_r+0x1a>
 800774a:	6a03      	ldr	r3, [r0, #32]
 800774c:	b90b      	cbnz	r3, 8007752 <_fflush_r+0x1a>
 800774e:	f7fe fa03 	bl	8005b58 <__sinit>
 8007752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f3      	beq.n	8007742 <_fflush_r+0xa>
 800775a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800775c:	07d0      	lsls	r0, r2, #31
 800775e:	d404      	bmi.n	800776a <_fflush_r+0x32>
 8007760:	0599      	lsls	r1, r3, #22
 8007762:	d402      	bmi.n	800776a <_fflush_r+0x32>
 8007764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007766:	f7fe fb0e 	bl	8005d86 <__retarget_lock_acquire_recursive>
 800776a:	4628      	mov	r0, r5
 800776c:	4621      	mov	r1, r4
 800776e:	f7ff ff5d 	bl	800762c <__sflush_r>
 8007772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007774:	07da      	lsls	r2, r3, #31
 8007776:	4605      	mov	r5, r0
 8007778:	d4e4      	bmi.n	8007744 <_fflush_r+0xc>
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	059b      	lsls	r3, r3, #22
 800777e:	d4e1      	bmi.n	8007744 <_fflush_r+0xc>
 8007780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007782:	f7fe fb01 	bl	8005d88 <__retarget_lock_release_recursive>
 8007786:	e7dd      	b.n	8007744 <_fflush_r+0xc>

08007788 <memmove>:
 8007788:	4288      	cmp	r0, r1
 800778a:	b510      	push	{r4, lr}
 800778c:	eb01 0402 	add.w	r4, r1, r2
 8007790:	d902      	bls.n	8007798 <memmove+0x10>
 8007792:	4284      	cmp	r4, r0
 8007794:	4623      	mov	r3, r4
 8007796:	d807      	bhi.n	80077a8 <memmove+0x20>
 8007798:	1e43      	subs	r3, r0, #1
 800779a:	42a1      	cmp	r1, r4
 800779c:	d008      	beq.n	80077b0 <memmove+0x28>
 800779e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077a6:	e7f8      	b.n	800779a <memmove+0x12>
 80077a8:	4402      	add	r2, r0
 80077aa:	4601      	mov	r1, r0
 80077ac:	428a      	cmp	r2, r1
 80077ae:	d100      	bne.n	80077b2 <memmove+0x2a>
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ba:	e7f7      	b.n	80077ac <memmove+0x24>

080077bc <_sbrk_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d06      	ldr	r5, [pc, #24]	; (80077d8 <_sbrk_r+0x1c>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7f9 fe12 	bl	80013f0 <_sbrk>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_sbrk_r+0x1a>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_sbrk_r+0x1a>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	20000c38 	.word	0x20000c38

080077dc <memcpy>:
 80077dc:	440a      	add	r2, r1
 80077de:	4291      	cmp	r1, r2
 80077e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077e4:	d100      	bne.n	80077e8 <memcpy+0xc>
 80077e6:	4770      	bx	lr
 80077e8:	b510      	push	{r4, lr}
 80077ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f2:	4291      	cmp	r1, r2
 80077f4:	d1f9      	bne.n	80077ea <memcpy+0xe>
 80077f6:	bd10      	pop	{r4, pc}

080077f8 <__assert_func>:
 80077f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077fa:	4614      	mov	r4, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <__assert_func+0x2c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4605      	mov	r5, r0
 8007804:	68d8      	ldr	r0, [r3, #12]
 8007806:	b14c      	cbz	r4, 800781c <__assert_func+0x24>
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <__assert_func+0x30>)
 800780a:	9100      	str	r1, [sp, #0]
 800780c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007810:	4906      	ldr	r1, [pc, #24]	; (800782c <__assert_func+0x34>)
 8007812:	462b      	mov	r3, r5
 8007814:	f000 f872 	bl	80078fc <fiprintf>
 8007818:	f000 f882 	bl	8007920 <abort>
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <__assert_func+0x38>)
 800781e:	461c      	mov	r4, r3
 8007820:	e7f3      	b.n	800780a <__assert_func+0x12>
 8007822:	bf00      	nop
 8007824:	20000064 	.word	0x20000064
 8007828:	0800944f 	.word	0x0800944f
 800782c:	0800945c 	.word	0x0800945c
 8007830:	0800948a 	.word	0x0800948a

08007834 <_calloc_r>:
 8007834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007836:	fba1 2402 	umull	r2, r4, r1, r2
 800783a:	b94c      	cbnz	r4, 8007850 <_calloc_r+0x1c>
 800783c:	4611      	mov	r1, r2
 800783e:	9201      	str	r2, [sp, #4]
 8007840:	f7ff f994 	bl	8006b6c <_malloc_r>
 8007844:	9a01      	ldr	r2, [sp, #4]
 8007846:	4605      	mov	r5, r0
 8007848:	b930      	cbnz	r0, 8007858 <_calloc_r+0x24>
 800784a:	4628      	mov	r0, r5
 800784c:	b003      	add	sp, #12
 800784e:	bd30      	pop	{r4, r5, pc}
 8007850:	220c      	movs	r2, #12
 8007852:	6002      	str	r2, [r0, #0]
 8007854:	2500      	movs	r5, #0
 8007856:	e7f8      	b.n	800784a <_calloc_r+0x16>
 8007858:	4621      	mov	r1, r4
 800785a:	f7fe fa16 	bl	8005c8a <memset>
 800785e:	e7f4      	b.n	800784a <_calloc_r+0x16>

08007860 <__ascii_mbtowc>:
 8007860:	b082      	sub	sp, #8
 8007862:	b901      	cbnz	r1, 8007866 <__ascii_mbtowc+0x6>
 8007864:	a901      	add	r1, sp, #4
 8007866:	b142      	cbz	r2, 800787a <__ascii_mbtowc+0x1a>
 8007868:	b14b      	cbz	r3, 800787e <__ascii_mbtowc+0x1e>
 800786a:	7813      	ldrb	r3, [r2, #0]
 800786c:	600b      	str	r3, [r1, #0]
 800786e:	7812      	ldrb	r2, [r2, #0]
 8007870:	1e10      	subs	r0, r2, #0
 8007872:	bf18      	it	ne
 8007874:	2001      	movne	r0, #1
 8007876:	b002      	add	sp, #8
 8007878:	4770      	bx	lr
 800787a:	4610      	mov	r0, r2
 800787c:	e7fb      	b.n	8007876 <__ascii_mbtowc+0x16>
 800787e:	f06f 0001 	mvn.w	r0, #1
 8007882:	e7f8      	b.n	8007876 <__ascii_mbtowc+0x16>

08007884 <_realloc_r>:
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	4680      	mov	r8, r0
 800788a:	4614      	mov	r4, r2
 800788c:	460e      	mov	r6, r1
 800788e:	b921      	cbnz	r1, 800789a <_realloc_r+0x16>
 8007890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007894:	4611      	mov	r1, r2
 8007896:	f7ff b969 	b.w	8006b6c <_malloc_r>
 800789a:	b92a      	cbnz	r2, 80078a8 <_realloc_r+0x24>
 800789c:	f7ff f8f2 	bl	8006a84 <_free_r>
 80078a0:	4625      	mov	r5, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	f000 f841 	bl	800792e <_malloc_usable_size_r>
 80078ac:	4284      	cmp	r4, r0
 80078ae:	4607      	mov	r7, r0
 80078b0:	d802      	bhi.n	80078b8 <_realloc_r+0x34>
 80078b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078b6:	d812      	bhi.n	80078de <_realloc_r+0x5a>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7ff f956 	bl	8006b6c <_malloc_r>
 80078c0:	4605      	mov	r5, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0ed      	beq.n	80078a2 <_realloc_r+0x1e>
 80078c6:	42bc      	cmp	r4, r7
 80078c8:	4622      	mov	r2, r4
 80078ca:	4631      	mov	r1, r6
 80078cc:	bf28      	it	cs
 80078ce:	463a      	movcs	r2, r7
 80078d0:	f7ff ff84 	bl	80077dc <memcpy>
 80078d4:	4631      	mov	r1, r6
 80078d6:	4640      	mov	r0, r8
 80078d8:	f7ff f8d4 	bl	8006a84 <_free_r>
 80078dc:	e7e1      	b.n	80078a2 <_realloc_r+0x1e>
 80078de:	4635      	mov	r5, r6
 80078e0:	e7df      	b.n	80078a2 <_realloc_r+0x1e>

080078e2 <__ascii_wctomb>:
 80078e2:	b149      	cbz	r1, 80078f8 <__ascii_wctomb+0x16>
 80078e4:	2aff      	cmp	r2, #255	; 0xff
 80078e6:	bf85      	ittet	hi
 80078e8:	238a      	movhi	r3, #138	; 0x8a
 80078ea:	6003      	strhi	r3, [r0, #0]
 80078ec:	700a      	strbls	r2, [r1, #0]
 80078ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80078f2:	bf98      	it	ls
 80078f4:	2001      	movls	r0, #1
 80078f6:	4770      	bx	lr
 80078f8:	4608      	mov	r0, r1
 80078fa:	4770      	bx	lr

080078fc <fiprintf>:
 80078fc:	b40e      	push	{r1, r2, r3}
 80078fe:	b503      	push	{r0, r1, lr}
 8007900:	4601      	mov	r1, r0
 8007902:	ab03      	add	r3, sp, #12
 8007904:	4805      	ldr	r0, [pc, #20]	; (800791c <fiprintf+0x20>)
 8007906:	f853 2b04 	ldr.w	r2, [r3], #4
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	f000 f83f 	bl	8007990 <_vfiprintf_r>
 8007912:	b002      	add	sp, #8
 8007914:	f85d eb04 	ldr.w	lr, [sp], #4
 8007918:	b003      	add	sp, #12
 800791a:	4770      	bx	lr
 800791c:	20000064 	.word	0x20000064

08007920 <abort>:
 8007920:	b508      	push	{r3, lr}
 8007922:	2006      	movs	r0, #6
 8007924:	f000 fa0c 	bl	8007d40 <raise>
 8007928:	2001      	movs	r0, #1
 800792a:	f7f9 fce9 	bl	8001300 <_exit>

0800792e <_malloc_usable_size_r>:
 800792e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007932:	1f18      	subs	r0, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	bfbc      	itt	lt
 8007938:	580b      	ldrlt	r3, [r1, r0]
 800793a:	18c0      	addlt	r0, r0, r3
 800793c:	4770      	bx	lr

0800793e <__sfputc_r>:
 800793e:	6893      	ldr	r3, [r2, #8]
 8007940:	3b01      	subs	r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	b410      	push	{r4}
 8007946:	6093      	str	r3, [r2, #8]
 8007948:	da08      	bge.n	800795c <__sfputc_r+0x1e>
 800794a:	6994      	ldr	r4, [r2, #24]
 800794c:	42a3      	cmp	r3, r4
 800794e:	db01      	blt.n	8007954 <__sfputc_r+0x16>
 8007950:	290a      	cmp	r1, #10
 8007952:	d103      	bne.n	800795c <__sfputc_r+0x1e>
 8007954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007958:	f000 b934 	b.w	8007bc4 <__swbuf_r>
 800795c:	6813      	ldr	r3, [r2, #0]
 800795e:	1c58      	adds	r0, r3, #1
 8007960:	6010      	str	r0, [r2, #0]
 8007962:	7019      	strb	r1, [r3, #0]
 8007964:	4608      	mov	r0, r1
 8007966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796a:	4770      	bx	lr

0800796c <__sfputs_r>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	4606      	mov	r6, r0
 8007970:	460f      	mov	r7, r1
 8007972:	4614      	mov	r4, r2
 8007974:	18d5      	adds	r5, r2, r3
 8007976:	42ac      	cmp	r4, r5
 8007978:	d101      	bne.n	800797e <__sfputs_r+0x12>
 800797a:	2000      	movs	r0, #0
 800797c:	e007      	b.n	800798e <__sfputs_r+0x22>
 800797e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007982:	463a      	mov	r2, r7
 8007984:	4630      	mov	r0, r6
 8007986:	f7ff ffda 	bl	800793e <__sfputc_r>
 800798a:	1c43      	adds	r3, r0, #1
 800798c:	d1f3      	bne.n	8007976 <__sfputs_r+0xa>
 800798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007990 <_vfiprintf_r>:
 8007990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007994:	460d      	mov	r5, r1
 8007996:	b09d      	sub	sp, #116	; 0x74
 8007998:	4614      	mov	r4, r2
 800799a:	4698      	mov	r8, r3
 800799c:	4606      	mov	r6, r0
 800799e:	b118      	cbz	r0, 80079a8 <_vfiprintf_r+0x18>
 80079a0:	6a03      	ldr	r3, [r0, #32]
 80079a2:	b90b      	cbnz	r3, 80079a8 <_vfiprintf_r+0x18>
 80079a4:	f7fe f8d8 	bl	8005b58 <__sinit>
 80079a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079aa:	07d9      	lsls	r1, r3, #31
 80079ac:	d405      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	059a      	lsls	r2, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_vfiprintf_r+0x2a>
 80079b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079b6:	f7fe f9e6 	bl	8005d86 <__retarget_lock_acquire_recursive>
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	071b      	lsls	r3, r3, #28
 80079be:	d501      	bpl.n	80079c4 <_vfiprintf_r+0x34>
 80079c0:	692b      	ldr	r3, [r5, #16]
 80079c2:	b99b      	cbnz	r3, 80079ec <_vfiprintf_r+0x5c>
 80079c4:	4629      	mov	r1, r5
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f93a 	bl	8007c40 <__swsetup_r>
 80079cc:	b170      	cbz	r0, 80079ec <_vfiprintf_r+0x5c>
 80079ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079d0:	07dc      	lsls	r4, r3, #31
 80079d2:	d504      	bpl.n	80079de <_vfiprintf_r+0x4e>
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	b01d      	add	sp, #116	; 0x74
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	0598      	lsls	r0, r3, #22
 80079e2:	d4f7      	bmi.n	80079d4 <_vfiprintf_r+0x44>
 80079e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079e6:	f7fe f9cf 	bl	8005d88 <__retarget_lock_release_recursive>
 80079ea:	e7f3      	b.n	80079d4 <_vfiprintf_r+0x44>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9309      	str	r3, [sp, #36]	; 0x24
 80079f0:	2320      	movs	r3, #32
 80079f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079fa:	2330      	movs	r3, #48	; 0x30
 80079fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007bb0 <_vfiprintf_r+0x220>
 8007a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a04:	f04f 0901 	mov.w	r9, #1
 8007a08:	4623      	mov	r3, r4
 8007a0a:	469a      	mov	sl, r3
 8007a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a10:	b10a      	cbz	r2, 8007a16 <_vfiprintf_r+0x86>
 8007a12:	2a25      	cmp	r2, #37	; 0x25
 8007a14:	d1f9      	bne.n	8007a0a <_vfiprintf_r+0x7a>
 8007a16:	ebba 0b04 	subs.w	fp, sl, r4
 8007a1a:	d00b      	beq.n	8007a34 <_vfiprintf_r+0xa4>
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	4622      	mov	r2, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	4630      	mov	r0, r6
 8007a24:	f7ff ffa2 	bl	800796c <__sfputs_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	f000 80a9 	beq.w	8007b80 <_vfiprintf_r+0x1f0>
 8007a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a30:	445a      	add	r2, fp
 8007a32:	9209      	str	r2, [sp, #36]	; 0x24
 8007a34:	f89a 3000 	ldrb.w	r3, [sl]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80a1 	beq.w	8007b80 <_vfiprintf_r+0x1f0>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a48:	f10a 0a01 	add.w	sl, sl, #1
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a54:	931a      	str	r3, [sp, #104]	; 0x68
 8007a56:	4654      	mov	r4, sl
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5e:	4854      	ldr	r0, [pc, #336]	; (8007bb0 <_vfiprintf_r+0x220>)
 8007a60:	f7f8 fbbe 	bl	80001e0 <memchr>
 8007a64:	9a04      	ldr	r2, [sp, #16]
 8007a66:	b9d8      	cbnz	r0, 8007aa0 <_vfiprintf_r+0x110>
 8007a68:	06d1      	lsls	r1, r2, #27
 8007a6a:	bf44      	itt	mi
 8007a6c:	2320      	movmi	r3, #32
 8007a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a72:	0713      	lsls	r3, r2, #28
 8007a74:	bf44      	itt	mi
 8007a76:	232b      	movmi	r3, #43	; 0x2b
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a80:	2b2a      	cmp	r3, #42	; 0x2a
 8007a82:	d015      	beq.n	8007ab0 <_vfiprintf_r+0x120>
 8007a84:	9a07      	ldr	r2, [sp, #28]
 8007a86:	4654      	mov	r4, sl
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f04f 0c0a 	mov.w	ip, #10
 8007a8e:	4621      	mov	r1, r4
 8007a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a94:	3b30      	subs	r3, #48	; 0x30
 8007a96:	2b09      	cmp	r3, #9
 8007a98:	d94d      	bls.n	8007b36 <_vfiprintf_r+0x1a6>
 8007a9a:	b1b0      	cbz	r0, 8007aca <_vfiprintf_r+0x13a>
 8007a9c:	9207      	str	r2, [sp, #28]
 8007a9e:	e014      	b.n	8007aca <_vfiprintf_r+0x13a>
 8007aa0:	eba0 0308 	sub.w	r3, r0, r8
 8007aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	46a2      	mov	sl, r4
 8007aae:	e7d2      	b.n	8007a56 <_vfiprintf_r+0xc6>
 8007ab0:	9b03      	ldr	r3, [sp, #12]
 8007ab2:	1d19      	adds	r1, r3, #4
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	9103      	str	r1, [sp, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bfbb      	ittet	lt
 8007abc:	425b      	neglt	r3, r3
 8007abe:	f042 0202 	orrlt.w	r2, r2, #2
 8007ac2:	9307      	strge	r3, [sp, #28]
 8007ac4:	9307      	strlt	r3, [sp, #28]
 8007ac6:	bfb8      	it	lt
 8007ac8:	9204      	strlt	r2, [sp, #16]
 8007aca:	7823      	ldrb	r3, [r4, #0]
 8007acc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ace:	d10c      	bne.n	8007aea <_vfiprintf_r+0x15a>
 8007ad0:	7863      	ldrb	r3, [r4, #1]
 8007ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad4:	d134      	bne.n	8007b40 <_vfiprintf_r+0x1b0>
 8007ad6:	9b03      	ldr	r3, [sp, #12]
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	9203      	str	r2, [sp, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	bfb8      	it	lt
 8007ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ae6:	3402      	adds	r4, #2
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bc0 <_vfiprintf_r+0x230>
 8007aee:	7821      	ldrb	r1, [r4, #0]
 8007af0:	2203      	movs	r2, #3
 8007af2:	4650      	mov	r0, sl
 8007af4:	f7f8 fb74 	bl	80001e0 <memchr>
 8007af8:	b138      	cbz	r0, 8007b0a <_vfiprintf_r+0x17a>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	eba0 000a 	sub.w	r0, r0, sl
 8007b00:	2240      	movs	r2, #64	; 0x40
 8007b02:	4082      	lsls	r2, r0
 8007b04:	4313      	orrs	r3, r2
 8007b06:	3401      	adds	r4, #1
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0e:	4829      	ldr	r0, [pc, #164]	; (8007bb4 <_vfiprintf_r+0x224>)
 8007b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b14:	2206      	movs	r2, #6
 8007b16:	f7f8 fb63 	bl	80001e0 <memchr>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d03f      	beq.n	8007b9e <_vfiprintf_r+0x20e>
 8007b1e:	4b26      	ldr	r3, [pc, #152]	; (8007bb8 <_vfiprintf_r+0x228>)
 8007b20:	bb1b      	cbnz	r3, 8007b6a <_vfiprintf_r+0x1da>
 8007b22:	9b03      	ldr	r3, [sp, #12]
 8007b24:	3307      	adds	r3, #7
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	9303      	str	r3, [sp, #12]
 8007b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b30:	443b      	add	r3, r7
 8007b32:	9309      	str	r3, [sp, #36]	; 0x24
 8007b34:	e768      	b.n	8007a08 <_vfiprintf_r+0x78>
 8007b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	e7a6      	b.n	8007a8e <_vfiprintf_r+0xfe>
 8007b40:	2300      	movs	r3, #0
 8007b42:	3401      	adds	r4, #1
 8007b44:	9305      	str	r3, [sp, #20]
 8007b46:	4619      	mov	r1, r3
 8007b48:	f04f 0c0a 	mov.w	ip, #10
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b52:	3a30      	subs	r2, #48	; 0x30
 8007b54:	2a09      	cmp	r2, #9
 8007b56:	d903      	bls.n	8007b60 <_vfiprintf_r+0x1d0>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0c6      	beq.n	8007aea <_vfiprintf_r+0x15a>
 8007b5c:	9105      	str	r1, [sp, #20]
 8007b5e:	e7c4      	b.n	8007aea <_vfiprintf_r+0x15a>
 8007b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b64:	4604      	mov	r4, r0
 8007b66:	2301      	movs	r3, #1
 8007b68:	e7f0      	b.n	8007b4c <_vfiprintf_r+0x1bc>
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <_vfiprintf_r+0x22c>)
 8007b72:	a904      	add	r1, sp, #16
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7fd fb9d 	bl	80052b4 <_printf_float>
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	1c78      	adds	r0, r7, #1
 8007b7e:	d1d6      	bne.n	8007b2e <_vfiprintf_r+0x19e>
 8007b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_vfiprintf_r+0x202>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	059a      	lsls	r2, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_vfiprintf_r+0x202>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8e:	f7fe f8fb 	bl	8005d88 <__retarget_lock_release_recursive>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	065b      	lsls	r3, r3, #25
 8007b96:	f53f af1d 	bmi.w	80079d4 <_vfiprintf_r+0x44>
 8007b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9c:	e71c      	b.n	80079d8 <_vfiprintf_r+0x48>
 8007b9e:	ab03      	add	r3, sp, #12
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	462a      	mov	r2, r5
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <_vfiprintf_r+0x22c>)
 8007ba6:	a904      	add	r1, sp, #16
 8007ba8:	4630      	mov	r0, r6
 8007baa:	f7fd fe27 	bl	80057fc <_printf_i>
 8007bae:	e7e4      	b.n	8007b7a <_vfiprintf_r+0x1ea>
 8007bb0:	08009434 	.word	0x08009434
 8007bb4:	0800943e 	.word	0x0800943e
 8007bb8:	080052b5 	.word	0x080052b5
 8007bbc:	0800796d 	.word	0x0800796d
 8007bc0:	0800943a 	.word	0x0800943a

08007bc4 <__swbuf_r>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b118      	cbz	r0, 8007bd6 <__swbuf_r+0x12>
 8007bce:	6a03      	ldr	r3, [r0, #32]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <__swbuf_r+0x12>
 8007bd2:	f7fd ffc1 	bl	8005b58 <__sinit>
 8007bd6:	69a3      	ldr	r3, [r4, #24]
 8007bd8:	60a3      	str	r3, [r4, #8]
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	071a      	lsls	r2, r3, #28
 8007bde:	d525      	bpl.n	8007c2c <__swbuf_r+0x68>
 8007be0:	6923      	ldr	r3, [r4, #16]
 8007be2:	b31b      	cbz	r3, 8007c2c <__swbuf_r+0x68>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	6922      	ldr	r2, [r4, #16]
 8007be8:	1a98      	subs	r0, r3, r2
 8007bea:	6963      	ldr	r3, [r4, #20]
 8007bec:	b2f6      	uxtb	r6, r6
 8007bee:	4283      	cmp	r3, r0
 8007bf0:	4637      	mov	r7, r6
 8007bf2:	dc04      	bgt.n	8007bfe <__swbuf_r+0x3a>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f7ff fd9e 	bl	8007738 <_fflush_r>
 8007bfc:	b9e0      	cbnz	r0, 8007c38 <__swbuf_r+0x74>
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	60a3      	str	r3, [r4, #8]
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	6022      	str	r2, [r4, #0]
 8007c0a:	701e      	strb	r6, [r3, #0]
 8007c0c:	6962      	ldr	r2, [r4, #20]
 8007c0e:	1c43      	adds	r3, r0, #1
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d004      	beq.n	8007c1e <__swbuf_r+0x5a>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	07db      	lsls	r3, r3, #31
 8007c18:	d506      	bpl.n	8007c28 <__swbuf_r+0x64>
 8007c1a:	2e0a      	cmp	r6, #10
 8007c1c:	d104      	bne.n	8007c28 <__swbuf_r+0x64>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	f7ff fd89 	bl	8007738 <_fflush_r>
 8007c26:	b938      	cbnz	r0, 8007c38 <__swbuf_r+0x74>
 8007c28:	4638      	mov	r0, r7
 8007c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f806 	bl	8007c40 <__swsetup_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d0d5      	beq.n	8007be4 <__swbuf_r+0x20>
 8007c38:	f04f 37ff 	mov.w	r7, #4294967295
 8007c3c:	e7f4      	b.n	8007c28 <__swbuf_r+0x64>
	...

08007c40 <__swsetup_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4b2a      	ldr	r3, [pc, #168]	; (8007cec <__swsetup_r+0xac>)
 8007c44:	4605      	mov	r5, r0
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	460c      	mov	r4, r1
 8007c4a:	b118      	cbz	r0, 8007c54 <__swsetup_r+0x14>
 8007c4c:	6a03      	ldr	r3, [r0, #32]
 8007c4e:	b90b      	cbnz	r3, 8007c54 <__swsetup_r+0x14>
 8007c50:	f7fd ff82 	bl	8005b58 <__sinit>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c5a:	0718      	lsls	r0, r3, #28
 8007c5c:	d422      	bmi.n	8007ca4 <__swsetup_r+0x64>
 8007c5e:	06d9      	lsls	r1, r3, #27
 8007c60:	d407      	bmi.n	8007c72 <__swsetup_r+0x32>
 8007c62:	2309      	movs	r3, #9
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	e034      	b.n	8007cdc <__swsetup_r+0x9c>
 8007c72:	0758      	lsls	r0, r3, #29
 8007c74:	d512      	bpl.n	8007c9c <__swsetup_r+0x5c>
 8007c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c78:	b141      	cbz	r1, 8007c8c <__swsetup_r+0x4c>
 8007c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d002      	beq.n	8007c88 <__swsetup_r+0x48>
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7fe fefe 	bl	8006a84 <_free_r>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6363      	str	r3, [r4, #52]	; 0x34
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	2300      	movs	r3, #0
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f043 0308 	orr.w	r3, r3, #8
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	b94b      	cbnz	r3, 8007cbc <__swsetup_r+0x7c>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cb2:	d003      	beq.n	8007cbc <__swsetup_r+0x7c>
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f000 f884 	bl	8007dc4 <__smakebuf_r>
 8007cbc:	89a0      	ldrh	r0, [r4, #12]
 8007cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cc2:	f010 0301 	ands.w	r3, r0, #1
 8007cc6:	d00a      	beq.n	8007cde <__swsetup_r+0x9e>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60a3      	str	r3, [r4, #8]
 8007ccc:	6963      	ldr	r3, [r4, #20]
 8007cce:	425b      	negs	r3, r3
 8007cd0:	61a3      	str	r3, [r4, #24]
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	b943      	cbnz	r3, 8007ce8 <__swsetup_r+0xa8>
 8007cd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cda:	d1c4      	bne.n	8007c66 <__swsetup_r+0x26>
 8007cdc:	bd38      	pop	{r3, r4, r5, pc}
 8007cde:	0781      	lsls	r1, r0, #30
 8007ce0:	bf58      	it	pl
 8007ce2:	6963      	ldrpl	r3, [r4, #20]
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	e7f4      	b.n	8007cd2 <__swsetup_r+0x92>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	e7f7      	b.n	8007cdc <__swsetup_r+0x9c>
 8007cec:	20000064 	.word	0x20000064

08007cf0 <_raise_r>:
 8007cf0:	291f      	cmp	r1, #31
 8007cf2:	b538      	push	{r3, r4, r5, lr}
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	d904      	bls.n	8007d04 <_raise_r+0x14>
 8007cfa:	2316      	movs	r3, #22
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d06:	b112      	cbz	r2, 8007d0e <_raise_r+0x1e>
 8007d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d0c:	b94b      	cbnz	r3, 8007d22 <_raise_r+0x32>
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f830 	bl	8007d74 <_getpid_r>
 8007d14:	462a      	mov	r2, r5
 8007d16:	4601      	mov	r1, r0
 8007d18:	4620      	mov	r0, r4
 8007d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1e:	f000 b817 	b.w	8007d50 <_kill_r>
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d00a      	beq.n	8007d3c <_raise_r+0x4c>
 8007d26:	1c59      	adds	r1, r3, #1
 8007d28:	d103      	bne.n	8007d32 <_raise_r+0x42>
 8007d2a:	2316      	movs	r3, #22
 8007d2c:	6003      	str	r3, [r0, #0]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	e7e7      	b.n	8007d02 <_raise_r+0x12>
 8007d32:	2400      	movs	r4, #0
 8007d34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d38:	4628      	mov	r0, r5
 8007d3a:	4798      	blx	r3
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e7e0      	b.n	8007d02 <_raise_r+0x12>

08007d40 <raise>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <raise+0xc>)
 8007d42:	4601      	mov	r1, r0
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7ff bfd3 	b.w	8007cf0 <_raise_r>
 8007d4a:	bf00      	nop
 8007d4c:	20000064 	.word	0x20000064

08007d50 <_kill_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	; (8007d70 <_kill_r+0x20>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	f7f9 fabf 	bl	80012e0 <_kill>
 8007d62:	1c43      	adds	r3, r0, #1
 8007d64:	d102      	bne.n	8007d6c <_kill_r+0x1c>
 8007d66:	682b      	ldr	r3, [r5, #0]
 8007d68:	b103      	cbz	r3, 8007d6c <_kill_r+0x1c>
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000c38 	.word	0x20000c38

08007d74 <_getpid_r>:
 8007d74:	f7f9 baac 	b.w	80012d0 <_getpid>

08007d78 <__swhatbuf_r>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d80:	2900      	cmp	r1, #0
 8007d82:	b096      	sub	sp, #88	; 0x58
 8007d84:	4615      	mov	r5, r2
 8007d86:	461e      	mov	r6, r3
 8007d88:	da0d      	bge.n	8007da6 <__swhatbuf_r+0x2e>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d90:	f04f 0100 	mov.w	r1, #0
 8007d94:	bf0c      	ite	eq
 8007d96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d9a:	2340      	movne	r3, #64	; 0x40
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	6031      	str	r1, [r6, #0]
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	b016      	add	sp, #88	; 0x58
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
 8007da6:	466a      	mov	r2, sp
 8007da8:	f000 f848 	bl	8007e3c <_fstat_r>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	dbec      	blt.n	8007d8a <__swhatbuf_r+0x12>
 8007db0:	9901      	ldr	r1, [sp, #4]
 8007db2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007db6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007dba:	4259      	negs	r1, r3
 8007dbc:	4159      	adcs	r1, r3
 8007dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc2:	e7eb      	b.n	8007d9c <__swhatbuf_r+0x24>

08007dc4 <__smakebuf_r>:
 8007dc4:	898b      	ldrh	r3, [r1, #12]
 8007dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dc8:	079d      	lsls	r5, r3, #30
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	d507      	bpl.n	8007de0 <__smakebuf_r+0x1c>
 8007dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	6163      	str	r3, [r4, #20]
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	ab01      	add	r3, sp, #4
 8007de2:	466a      	mov	r2, sp
 8007de4:	f7ff ffc8 	bl	8007d78 <__swhatbuf_r>
 8007de8:	9900      	ldr	r1, [sp, #0]
 8007dea:	4605      	mov	r5, r0
 8007dec:	4630      	mov	r0, r6
 8007dee:	f7fe febd 	bl	8006b6c <_malloc_r>
 8007df2:	b948      	cbnz	r0, 8007e08 <__smakebuf_r+0x44>
 8007df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df8:	059a      	lsls	r2, r3, #22
 8007dfa:	d4ef      	bmi.n	8007ddc <__smakebuf_r+0x18>
 8007dfc:	f023 0303 	bic.w	r3, r3, #3
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	e7e3      	b.n	8007dd0 <__smakebuf_r+0xc>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	6020      	str	r0, [r4, #0]
 8007e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	9b00      	ldr	r3, [sp, #0]
 8007e14:	6163      	str	r3, [r4, #20]
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	6120      	str	r0, [r4, #16]
 8007e1a:	b15b      	cbz	r3, 8007e34 <__smakebuf_r+0x70>
 8007e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f81d 	bl	8007e60 <_isatty_r>
 8007e26:	b128      	cbz	r0, 8007e34 <__smakebuf_r+0x70>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	f043 0301 	orr.w	r3, r3, #1
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	431d      	orrs	r5, r3
 8007e38:	81a5      	strh	r5, [r4, #12]
 8007e3a:	e7cf      	b.n	8007ddc <__smakebuf_r+0x18>

08007e3c <_fstat_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4d07      	ldr	r5, [pc, #28]	; (8007e5c <_fstat_r+0x20>)
 8007e40:	2300      	movs	r3, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	4608      	mov	r0, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	f7f9 faa8 	bl	800139e <_fstat>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	d102      	bne.n	8007e58 <_fstat_r+0x1c>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	b103      	cbz	r3, 8007e58 <_fstat_r+0x1c>
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	bd38      	pop	{r3, r4, r5, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20000c38 	.word	0x20000c38

08007e60 <_isatty_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4d06      	ldr	r5, [pc, #24]	; (8007e7c <_isatty_r+0x1c>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	f7f9 faa7 	bl	80013be <_isatty>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_isatty_r+0x1a>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_isatty_r+0x1a>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	20000c38 	.word	0x20000c38

08007e80 <pow>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	ed2d 8b02 	vpush	{d8}
 8007e86:	eeb0 8a40 	vmov.f32	s16, s0
 8007e8a:	eef0 8a60 	vmov.f32	s17, s1
 8007e8e:	ec55 4b11 	vmov	r4, r5, d1
 8007e92:	f000 fb21 	bl	80084d8 <__ieee754_pow>
 8007e96:	4622      	mov	r2, r4
 8007e98:	462b      	mov	r3, r5
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	ec57 6b10 	vmov	r6, r7, d0
 8007ea2:	f7f8 fe4b 	bl	8000b3c <__aeabi_dcmpun>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d13b      	bne.n	8007f22 <pow+0xa2>
 8007eaa:	ec51 0b18 	vmov	r0, r1, d8
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f7f8 fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eb6:	b1b8      	cbz	r0, 8007ee8 <pow+0x68>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	f7f8 fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d146      	bne.n	8007f56 <pow+0xd6>
 8007ec8:	ec45 4b10 	vmov	d0, r4, r5
 8007ecc:	f000 fa1d 	bl	800830a <finite>
 8007ed0:	b338      	cbz	r0, 8007f22 <pow+0xa2>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f7f8 fe07 	bl	8000aec <__aeabi_dcmplt>
 8007ede:	b300      	cbz	r0, 8007f22 <pow+0xa2>
 8007ee0:	f7fd ff26 	bl	8005d30 <__errno>
 8007ee4:	2322      	movs	r3, #34	; 0x22
 8007ee6:	e01b      	b.n	8007f20 <pow+0xa0>
 8007ee8:	ec47 6b10 	vmov	d0, r6, r7
 8007eec:	f000 fa0d 	bl	800830a <finite>
 8007ef0:	b9e0      	cbnz	r0, 8007f2c <pow+0xac>
 8007ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ef6:	eef0 0a68 	vmov.f32	s1, s17
 8007efa:	f000 fa06 	bl	800830a <finite>
 8007efe:	b1a8      	cbz	r0, 8007f2c <pow+0xac>
 8007f00:	ec45 4b10 	vmov	d0, r4, r5
 8007f04:	f000 fa01 	bl	800830a <finite>
 8007f08:	b180      	cbz	r0, 8007f2c <pow+0xac>
 8007f0a:	4632      	mov	r2, r6
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	4630      	mov	r0, r6
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fe13 	bl	8000b3c <__aeabi_dcmpun>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d0e2      	beq.n	8007ee0 <pow+0x60>
 8007f1a:	f7fd ff09 	bl	8005d30 <__errno>
 8007f1e:	2321      	movs	r3, #33	; 0x21
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	ecbd 8b02 	vpop	{d8}
 8007f26:	ec47 6b10 	vmov	d0, r6, r7
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4630      	mov	r0, r6
 8007f32:	4639      	mov	r1, r7
 8007f34:	f7f8 fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d0f2      	beq.n	8007f22 <pow+0xa2>
 8007f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f40:	eef0 0a68 	vmov.f32	s1, s17
 8007f44:	f000 f9e1 	bl	800830a <finite>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0ea      	beq.n	8007f22 <pow+0xa2>
 8007f4c:	ec45 4b10 	vmov	d0, r4, r5
 8007f50:	f000 f9db 	bl	800830a <finite>
 8007f54:	e7c3      	b.n	8007ede <pow+0x5e>
 8007f56:	4f01      	ldr	r7, [pc, #4]	; (8007f5c <pow+0xdc>)
 8007f58:	2600      	movs	r6, #0
 8007f5a:	e7e2      	b.n	8007f22 <pow+0xa2>
 8007f5c:	3ff00000 	.word	0x3ff00000

08007f60 <sqrt>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	ed2d 8b02 	vpush	{d8}
 8007f66:	ec55 4b10 	vmov	r4, r5, d0
 8007f6a:	f000 f9d9 	bl	8008320 <__ieee754_sqrt>
 8007f6e:	4622      	mov	r2, r4
 8007f70:	462b      	mov	r3, r5
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	eeb0 8a40 	vmov.f32	s16, s0
 8007f7a:	eef0 8a60 	vmov.f32	s17, s1
 8007f7e:	f7f8 fddd 	bl	8000b3c <__aeabi_dcmpun>
 8007f82:	b990      	cbnz	r0, 8007faa <sqrt+0x4a>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4620      	mov	r0, r4
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	f7f8 fdae 	bl	8000aec <__aeabi_dcmplt>
 8007f90:	b158      	cbz	r0, 8007faa <sqrt+0x4a>
 8007f92:	f7fd fecd 	bl	8005d30 <__errno>
 8007f96:	2321      	movs	r3, #33	; 0x21
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f7f8 fc5b 	bl	800085c <__aeabi_ddiv>
 8007fa6:	ec41 0b18 	vmov	d8, r0, r1
 8007faa:	eeb0 0a48 	vmov.f32	s0, s16
 8007fae:	eef0 0a68 	vmov.f32	s1, s17
 8007fb2:	ecbd 8b02 	vpop	{d8}
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}

08007fb8 <atan>:
 8007fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	ec55 4b10 	vmov	r4, r5, d0
 8007fc0:	4bc3      	ldr	r3, [pc, #780]	; (80082d0 <atan+0x318>)
 8007fc2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fc6:	429e      	cmp	r6, r3
 8007fc8:	46ab      	mov	fp, r5
 8007fca:	dd18      	ble.n	8007ffe <atan+0x46>
 8007fcc:	4bc1      	ldr	r3, [pc, #772]	; (80082d4 <atan+0x31c>)
 8007fce:	429e      	cmp	r6, r3
 8007fd0:	dc01      	bgt.n	8007fd6 <atan+0x1e>
 8007fd2:	d109      	bne.n	8007fe8 <atan+0x30>
 8007fd4:	b144      	cbz	r4, 8007fe8 <atan+0x30>
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	462b      	mov	r3, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7f8 f95d 	bl	800029c <__adddf3>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	460d      	mov	r5, r1
 8007fe6:	e006      	b.n	8007ff6 <atan+0x3e>
 8007fe8:	f1bb 0f00 	cmp.w	fp, #0
 8007fec:	f300 8131 	bgt.w	8008252 <atan+0x29a>
 8007ff0:	a59b      	add	r5, pc, #620	; (adr r5, 8008260 <atan+0x2a8>)
 8007ff2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ff6:	ec45 4b10 	vmov	d0, r4, r5
 8007ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffe:	4bb6      	ldr	r3, [pc, #728]	; (80082d8 <atan+0x320>)
 8008000:	429e      	cmp	r6, r3
 8008002:	dc14      	bgt.n	800802e <atan+0x76>
 8008004:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008008:	429e      	cmp	r6, r3
 800800a:	dc0d      	bgt.n	8008028 <atan+0x70>
 800800c:	a396      	add	r3, pc, #600	; (adr r3, 8008268 <atan+0x2b0>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	ee10 0a10 	vmov	r0, s0
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 f940 	bl	800029c <__adddf3>
 800801c:	4baf      	ldr	r3, [pc, #700]	; (80082dc <atan+0x324>)
 800801e:	2200      	movs	r2, #0
 8008020:	f7f8 fd82 	bl	8000b28 <__aeabi_dcmpgt>
 8008024:	2800      	cmp	r0, #0
 8008026:	d1e6      	bne.n	8007ff6 <atan+0x3e>
 8008028:	f04f 3aff 	mov.w	sl, #4294967295
 800802c:	e02b      	b.n	8008086 <atan+0xce>
 800802e:	f000 f963 	bl	80082f8 <fabs>
 8008032:	4bab      	ldr	r3, [pc, #684]	; (80082e0 <atan+0x328>)
 8008034:	429e      	cmp	r6, r3
 8008036:	ec55 4b10 	vmov	r4, r5, d0
 800803a:	f300 80bf 	bgt.w	80081bc <atan+0x204>
 800803e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008042:	429e      	cmp	r6, r3
 8008044:	f300 80a0 	bgt.w	8008188 <atan+0x1d0>
 8008048:	ee10 2a10 	vmov	r2, s0
 800804c:	ee10 0a10 	vmov	r0, s0
 8008050:	462b      	mov	r3, r5
 8008052:	4629      	mov	r1, r5
 8008054:	f7f8 f922 	bl	800029c <__adddf3>
 8008058:	4ba0      	ldr	r3, [pc, #640]	; (80082dc <atan+0x324>)
 800805a:	2200      	movs	r2, #0
 800805c:	f7f8 f91c 	bl	8000298 <__aeabi_dsub>
 8008060:	2200      	movs	r2, #0
 8008062:	4606      	mov	r6, r0
 8008064:	460f      	mov	r7, r1
 8008066:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800806a:	4620      	mov	r0, r4
 800806c:	4629      	mov	r1, r5
 800806e:	f7f8 f915 	bl	800029c <__adddf3>
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4630      	mov	r0, r6
 8008078:	4639      	mov	r1, r7
 800807a:	f7f8 fbef 	bl	800085c <__aeabi_ddiv>
 800807e:	f04f 0a00 	mov.w	sl, #0
 8008082:	4604      	mov	r4, r0
 8008084:	460d      	mov	r5, r1
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 fabb 	bl	8000608 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4680      	mov	r8, r0
 8008098:	4689      	mov	r9, r1
 800809a:	f7f8 fab5 	bl	8000608 <__aeabi_dmul>
 800809e:	a374      	add	r3, pc, #464	; (adr r3, 8008270 <atan+0x2b8>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	4606      	mov	r6, r0
 80080a6:	460f      	mov	r7, r1
 80080a8:	f7f8 faae 	bl	8000608 <__aeabi_dmul>
 80080ac:	a372      	add	r3, pc, #456	; (adr r3, 8008278 <atan+0x2c0>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f8f3 	bl	800029c <__adddf3>
 80080b6:	4632      	mov	r2, r6
 80080b8:	463b      	mov	r3, r7
 80080ba:	f7f8 faa5 	bl	8000608 <__aeabi_dmul>
 80080be:	a370      	add	r3, pc, #448	; (adr r3, 8008280 <atan+0x2c8>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 f8ea 	bl	800029c <__adddf3>
 80080c8:	4632      	mov	r2, r6
 80080ca:	463b      	mov	r3, r7
 80080cc:	f7f8 fa9c 	bl	8000608 <__aeabi_dmul>
 80080d0:	a36d      	add	r3, pc, #436	; (adr r3, 8008288 <atan+0x2d0>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f7f8 f8e1 	bl	800029c <__adddf3>
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 fa93 	bl	8000608 <__aeabi_dmul>
 80080e2:	a36b      	add	r3, pc, #428	; (adr r3, 8008290 <atan+0x2d8>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f8d8 	bl	800029c <__adddf3>
 80080ec:	4632      	mov	r2, r6
 80080ee:	463b      	mov	r3, r7
 80080f0:	f7f8 fa8a 	bl	8000608 <__aeabi_dmul>
 80080f4:	a368      	add	r3, pc, #416	; (adr r3, 8008298 <atan+0x2e0>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f8cf 	bl	800029c <__adddf3>
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	f7f8 fa81 	bl	8000608 <__aeabi_dmul>
 8008106:	a366      	add	r3, pc, #408	; (adr r3, 80082a0 <atan+0x2e8>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	4680      	mov	r8, r0
 800810e:	4689      	mov	r9, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 fa78 	bl	8000608 <__aeabi_dmul>
 8008118:	a363      	add	r3, pc, #396	; (adr r3, 80082a8 <atan+0x2f0>)
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	f7f8 f8bb 	bl	8000298 <__aeabi_dsub>
 8008122:	4632      	mov	r2, r6
 8008124:	463b      	mov	r3, r7
 8008126:	f7f8 fa6f 	bl	8000608 <__aeabi_dmul>
 800812a:	a361      	add	r3, pc, #388	; (adr r3, 80082b0 <atan+0x2f8>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 f8b2 	bl	8000298 <__aeabi_dsub>
 8008134:	4632      	mov	r2, r6
 8008136:	463b      	mov	r3, r7
 8008138:	f7f8 fa66 	bl	8000608 <__aeabi_dmul>
 800813c:	a35e      	add	r3, pc, #376	; (adr r3, 80082b8 <atan+0x300>)
 800813e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008142:	f7f8 f8a9 	bl	8000298 <__aeabi_dsub>
 8008146:	4632      	mov	r2, r6
 8008148:	463b      	mov	r3, r7
 800814a:	f7f8 fa5d 	bl	8000608 <__aeabi_dmul>
 800814e:	a35c      	add	r3, pc, #368	; (adr r3, 80082c0 <atan+0x308>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f8a0 	bl	8000298 <__aeabi_dsub>
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	f7f8 fa54 	bl	8000608 <__aeabi_dmul>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4640      	mov	r0, r8
 8008166:	4649      	mov	r1, r9
 8008168:	f7f8 f898 	bl	800029c <__adddf3>
 800816c:	4622      	mov	r2, r4
 800816e:	462b      	mov	r3, r5
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	d14b      	bne.n	8008216 <atan+0x25e>
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 f889 	bl	8000298 <__aeabi_dsub>
 8008186:	e72c      	b.n	8007fe2 <atan+0x2a>
 8008188:	ee10 0a10 	vmov	r0, s0
 800818c:	4b53      	ldr	r3, [pc, #332]	; (80082dc <atan+0x324>)
 800818e:	2200      	movs	r2, #0
 8008190:	4629      	mov	r1, r5
 8008192:	f7f8 f881 	bl	8000298 <__aeabi_dsub>
 8008196:	4b51      	ldr	r3, [pc, #324]	; (80082dc <atan+0x324>)
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	2200      	movs	r2, #0
 800819e:	4620      	mov	r0, r4
 80081a0:	4629      	mov	r1, r5
 80081a2:	f7f8 f87b 	bl	800029c <__adddf3>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4630      	mov	r0, r6
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 fb55 	bl	800085c <__aeabi_ddiv>
 80081b2:	f04f 0a01 	mov.w	sl, #1
 80081b6:	4604      	mov	r4, r0
 80081b8:	460d      	mov	r5, r1
 80081ba:	e764      	b.n	8008086 <atan+0xce>
 80081bc:	4b49      	ldr	r3, [pc, #292]	; (80082e4 <atan+0x32c>)
 80081be:	429e      	cmp	r6, r3
 80081c0:	da1d      	bge.n	80081fe <atan+0x246>
 80081c2:	ee10 0a10 	vmov	r0, s0
 80081c6:	4b48      	ldr	r3, [pc, #288]	; (80082e8 <atan+0x330>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4629      	mov	r1, r5
 80081cc:	f7f8 f864 	bl	8000298 <__aeabi_dsub>
 80081d0:	4b45      	ldr	r3, [pc, #276]	; (80082e8 <atan+0x330>)
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	2200      	movs	r2, #0
 80081d8:	4620      	mov	r0, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f8 fa14 	bl	8000608 <__aeabi_dmul>
 80081e0:	4b3e      	ldr	r3, [pc, #248]	; (80082dc <atan+0x324>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	f7f8 f85a 	bl	800029c <__adddf3>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4630      	mov	r0, r6
 80081ee:	4639      	mov	r1, r7
 80081f0:	f7f8 fb34 	bl	800085c <__aeabi_ddiv>
 80081f4:	f04f 0a02 	mov.w	sl, #2
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	e743      	b.n	8008086 <atan+0xce>
 80081fe:	462b      	mov	r3, r5
 8008200:	ee10 2a10 	vmov	r2, s0
 8008204:	4939      	ldr	r1, [pc, #228]	; (80082ec <atan+0x334>)
 8008206:	2000      	movs	r0, #0
 8008208:	f7f8 fb28 	bl	800085c <__aeabi_ddiv>
 800820c:	f04f 0a03 	mov.w	sl, #3
 8008210:	4604      	mov	r4, r0
 8008212:	460d      	mov	r5, r1
 8008214:	e737      	b.n	8008086 <atan+0xce>
 8008216:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <atan+0x338>)
 8008218:	4e36      	ldr	r6, [pc, #216]	; (80082f4 <atan+0x33c>)
 800821a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f7f8 f839 	bl	8000298 <__aeabi_dsub>
 8008226:	4622      	mov	r2, r4
 8008228:	462b      	mov	r3, r5
 800822a:	f7f8 f835 	bl	8000298 <__aeabi_dsub>
 800822e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	e9d6 0100 	ldrd	r0, r1, [r6]
 800823a:	f7f8 f82d 	bl	8000298 <__aeabi_dsub>
 800823e:	f1bb 0f00 	cmp.w	fp, #0
 8008242:	4604      	mov	r4, r0
 8008244:	460d      	mov	r5, r1
 8008246:	f6bf aed6 	bge.w	8007ff6 <atan+0x3e>
 800824a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800824e:	461d      	mov	r5, r3
 8008250:	e6d1      	b.n	8007ff6 <atan+0x3e>
 8008252:	a51d      	add	r5, pc, #116	; (adr r5, 80082c8 <atan+0x310>)
 8008254:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008258:	e6cd      	b.n	8007ff6 <atan+0x3e>
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w
 8008260:	54442d18 	.word	0x54442d18
 8008264:	bff921fb 	.word	0xbff921fb
 8008268:	8800759c 	.word	0x8800759c
 800826c:	7e37e43c 	.word	0x7e37e43c
 8008270:	e322da11 	.word	0xe322da11
 8008274:	3f90ad3a 	.word	0x3f90ad3a
 8008278:	24760deb 	.word	0x24760deb
 800827c:	3fa97b4b 	.word	0x3fa97b4b
 8008280:	a0d03d51 	.word	0xa0d03d51
 8008284:	3fb10d66 	.word	0x3fb10d66
 8008288:	c54c206e 	.word	0xc54c206e
 800828c:	3fb745cd 	.word	0x3fb745cd
 8008290:	920083ff 	.word	0x920083ff
 8008294:	3fc24924 	.word	0x3fc24924
 8008298:	5555550d 	.word	0x5555550d
 800829c:	3fd55555 	.word	0x3fd55555
 80082a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80082a4:	bfa2b444 	.word	0xbfa2b444
 80082a8:	52defd9a 	.word	0x52defd9a
 80082ac:	3fadde2d 	.word	0x3fadde2d
 80082b0:	af749a6d 	.word	0xaf749a6d
 80082b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80082b8:	fe231671 	.word	0xfe231671
 80082bc:	3fbc71c6 	.word	0x3fbc71c6
 80082c0:	9998ebc4 	.word	0x9998ebc4
 80082c4:	3fc99999 	.word	0x3fc99999
 80082c8:	54442d18 	.word	0x54442d18
 80082cc:	3ff921fb 	.word	0x3ff921fb
 80082d0:	440fffff 	.word	0x440fffff
 80082d4:	7ff00000 	.word	0x7ff00000
 80082d8:	3fdbffff 	.word	0x3fdbffff
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	3ff2ffff 	.word	0x3ff2ffff
 80082e4:	40038000 	.word	0x40038000
 80082e8:	3ff80000 	.word	0x3ff80000
 80082ec:	bff00000 	.word	0xbff00000
 80082f0:	080095b0 	.word	0x080095b0
 80082f4:	08009590 	.word	0x08009590

080082f8 <fabs>:
 80082f8:	ec51 0b10 	vmov	r0, r1, d0
 80082fc:	ee10 2a10 	vmov	r2, s0
 8008300:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008304:	ec43 2b10 	vmov	d0, r2, r3
 8008308:	4770      	bx	lr

0800830a <finite>:
 800830a:	b082      	sub	sp, #8
 800830c:	ed8d 0b00 	vstr	d0, [sp]
 8008310:	9801      	ldr	r0, [sp, #4]
 8008312:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008316:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800831a:	0fc0      	lsrs	r0, r0, #31
 800831c:	b002      	add	sp, #8
 800831e:	4770      	bx	lr

08008320 <__ieee754_sqrt>:
 8008320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	ec55 4b10 	vmov	r4, r5, d0
 8008328:	4e67      	ldr	r6, [pc, #412]	; (80084c8 <__ieee754_sqrt+0x1a8>)
 800832a:	43ae      	bics	r6, r5
 800832c:	ee10 0a10 	vmov	r0, s0
 8008330:	ee10 2a10 	vmov	r2, s0
 8008334:	4629      	mov	r1, r5
 8008336:	462b      	mov	r3, r5
 8008338:	d10d      	bne.n	8008356 <__ieee754_sqrt+0x36>
 800833a:	f7f8 f965 	bl	8000608 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4620      	mov	r0, r4
 8008344:	4629      	mov	r1, r5
 8008346:	f7f7 ffa9 	bl	800029c <__adddf3>
 800834a:	4604      	mov	r4, r0
 800834c:	460d      	mov	r5, r1
 800834e:	ec45 4b10 	vmov	d0, r4, r5
 8008352:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	2d00      	cmp	r5, #0
 8008358:	dc0b      	bgt.n	8008372 <__ieee754_sqrt+0x52>
 800835a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800835e:	4326      	orrs	r6, r4
 8008360:	d0f5      	beq.n	800834e <__ieee754_sqrt+0x2e>
 8008362:	b135      	cbz	r5, 8008372 <__ieee754_sqrt+0x52>
 8008364:	f7f7 ff98 	bl	8000298 <__aeabi_dsub>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	f7f8 fa76 	bl	800085c <__aeabi_ddiv>
 8008370:	e7eb      	b.n	800834a <__ieee754_sqrt+0x2a>
 8008372:	1509      	asrs	r1, r1, #20
 8008374:	f000 808d 	beq.w	8008492 <__ieee754_sqrt+0x172>
 8008378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800837c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008384:	07c9      	lsls	r1, r1, #31
 8008386:	bf5c      	itt	pl
 8008388:	005b      	lslpl	r3, r3, #1
 800838a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800838e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008392:	bf58      	it	pl
 8008394:	0052      	lslpl	r2, r2, #1
 8008396:	2500      	movs	r5, #0
 8008398:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800839c:	1076      	asrs	r6, r6, #1
 800839e:	0052      	lsls	r2, r2, #1
 80083a0:	f04f 0e16 	mov.w	lr, #22
 80083a4:	46ac      	mov	ip, r5
 80083a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083aa:	eb0c 0001 	add.w	r0, ip, r1
 80083ae:	4298      	cmp	r0, r3
 80083b0:	bfde      	ittt	le
 80083b2:	1a1b      	suble	r3, r3, r0
 80083b4:	eb00 0c01 	addle.w	ip, r0, r1
 80083b8:	186d      	addle	r5, r5, r1
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	f1be 0e01 	subs.w	lr, lr, #1
 80083c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80083c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80083cc:	d1ed      	bne.n	80083aa <__ieee754_sqrt+0x8a>
 80083ce:	4674      	mov	r4, lr
 80083d0:	2720      	movs	r7, #32
 80083d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80083d6:	4563      	cmp	r3, ip
 80083d8:	eb01 000e 	add.w	r0, r1, lr
 80083dc:	dc02      	bgt.n	80083e4 <__ieee754_sqrt+0xc4>
 80083de:	d113      	bne.n	8008408 <__ieee754_sqrt+0xe8>
 80083e0:	4290      	cmp	r0, r2
 80083e2:	d811      	bhi.n	8008408 <__ieee754_sqrt+0xe8>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	eb00 0e01 	add.w	lr, r0, r1
 80083ea:	da57      	bge.n	800849c <__ieee754_sqrt+0x17c>
 80083ec:	f1be 0f00 	cmp.w	lr, #0
 80083f0:	db54      	blt.n	800849c <__ieee754_sqrt+0x17c>
 80083f2:	f10c 0801 	add.w	r8, ip, #1
 80083f6:	eba3 030c 	sub.w	r3, r3, ip
 80083fa:	4290      	cmp	r0, r2
 80083fc:	bf88      	it	hi
 80083fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008402:	1a12      	subs	r2, r2, r0
 8008404:	440c      	add	r4, r1
 8008406:	46c4      	mov	ip, r8
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	3f01      	subs	r7, #1
 800840c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008410:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008414:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008418:	d1dd      	bne.n	80083d6 <__ieee754_sqrt+0xb6>
 800841a:	4313      	orrs	r3, r2
 800841c:	d01b      	beq.n	8008456 <__ieee754_sqrt+0x136>
 800841e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80084cc <__ieee754_sqrt+0x1ac>
 8008422:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80084d0 <__ieee754_sqrt+0x1b0>
 8008426:	e9da 0100 	ldrd	r0, r1, [sl]
 800842a:	e9db 2300 	ldrd	r2, r3, [fp]
 800842e:	f7f7 ff33 	bl	8000298 <__aeabi_dsub>
 8008432:	e9da 8900 	ldrd	r8, r9, [sl]
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f8 fb5f 	bl	8000b00 <__aeabi_dcmple>
 8008442:	b140      	cbz	r0, 8008456 <__ieee754_sqrt+0x136>
 8008444:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008448:	e9da 0100 	ldrd	r0, r1, [sl]
 800844c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008450:	d126      	bne.n	80084a0 <__ieee754_sqrt+0x180>
 8008452:	3501      	adds	r5, #1
 8008454:	463c      	mov	r4, r7
 8008456:	106a      	asrs	r2, r5, #1
 8008458:	0863      	lsrs	r3, r4, #1
 800845a:	07e9      	lsls	r1, r5, #31
 800845c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008460:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008464:	bf48      	it	mi
 8008466:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800846a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800846e:	461c      	mov	r4, r3
 8008470:	e76d      	b.n	800834e <__ieee754_sqrt+0x2e>
 8008472:	0ad3      	lsrs	r3, r2, #11
 8008474:	3815      	subs	r0, #21
 8008476:	0552      	lsls	r2, r2, #21
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0fa      	beq.n	8008472 <__ieee754_sqrt+0x152>
 800847c:	02dc      	lsls	r4, r3, #11
 800847e:	d50a      	bpl.n	8008496 <__ieee754_sqrt+0x176>
 8008480:	f1c1 0420 	rsb	r4, r1, #32
 8008484:	fa22 f404 	lsr.w	r4, r2, r4
 8008488:	1e4d      	subs	r5, r1, #1
 800848a:	408a      	lsls	r2, r1
 800848c:	4323      	orrs	r3, r4
 800848e:	1b41      	subs	r1, r0, r5
 8008490:	e772      	b.n	8008378 <__ieee754_sqrt+0x58>
 8008492:	4608      	mov	r0, r1
 8008494:	e7f0      	b.n	8008478 <__ieee754_sqrt+0x158>
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	3101      	adds	r1, #1
 800849a:	e7ef      	b.n	800847c <__ieee754_sqrt+0x15c>
 800849c:	46e0      	mov	r8, ip
 800849e:	e7aa      	b.n	80083f6 <__ieee754_sqrt+0xd6>
 80084a0:	f7f7 fefc 	bl	800029c <__adddf3>
 80084a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f8 fb1c 	bl	8000aec <__aeabi_dcmplt>
 80084b4:	b120      	cbz	r0, 80084c0 <__ieee754_sqrt+0x1a0>
 80084b6:	1ca0      	adds	r0, r4, #2
 80084b8:	bf08      	it	eq
 80084ba:	3501      	addeq	r5, #1
 80084bc:	3402      	adds	r4, #2
 80084be:	e7ca      	b.n	8008456 <__ieee754_sqrt+0x136>
 80084c0:	3401      	adds	r4, #1
 80084c2:	f024 0401 	bic.w	r4, r4, #1
 80084c6:	e7c6      	b.n	8008456 <__ieee754_sqrt+0x136>
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	200001d8 	.word	0x200001d8
 80084d0:	200001e0 	.word	0x200001e0
 80084d4:	00000000 	.word	0x00000000

080084d8 <__ieee754_pow>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	ed2d 8b06 	vpush	{d8-d10}
 80084e0:	b089      	sub	sp, #36	; 0x24
 80084e2:	ed8d 1b00 	vstr	d1, [sp]
 80084e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80084ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80084ee:	ea58 0102 	orrs.w	r1, r8, r2
 80084f2:	ec57 6b10 	vmov	r6, r7, d0
 80084f6:	d115      	bne.n	8008524 <__ieee754_pow+0x4c>
 80084f8:	19b3      	adds	r3, r6, r6
 80084fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80084fe:	4152      	adcs	r2, r2
 8008500:	4299      	cmp	r1, r3
 8008502:	4b89      	ldr	r3, [pc, #548]	; (8008728 <__ieee754_pow+0x250>)
 8008504:	4193      	sbcs	r3, r2
 8008506:	f080 84d1 	bcs.w	8008eac <__ieee754_pow+0x9d4>
 800850a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850e:	4630      	mov	r0, r6
 8008510:	4639      	mov	r1, r7
 8008512:	f7f7 fec3 	bl	800029c <__adddf3>
 8008516:	ec41 0b10 	vmov	d0, r0, r1
 800851a:	b009      	add	sp, #36	; 0x24
 800851c:	ecbd 8b06 	vpop	{d8-d10}
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	4b81      	ldr	r3, [pc, #516]	; (800872c <__ieee754_pow+0x254>)
 8008526:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800852a:	429c      	cmp	r4, r3
 800852c:	ee10 aa10 	vmov	sl, s0
 8008530:	463d      	mov	r5, r7
 8008532:	dc06      	bgt.n	8008542 <__ieee754_pow+0x6a>
 8008534:	d101      	bne.n	800853a <__ieee754_pow+0x62>
 8008536:	2e00      	cmp	r6, #0
 8008538:	d1e7      	bne.n	800850a <__ieee754_pow+0x32>
 800853a:	4598      	cmp	r8, r3
 800853c:	dc01      	bgt.n	8008542 <__ieee754_pow+0x6a>
 800853e:	d10f      	bne.n	8008560 <__ieee754_pow+0x88>
 8008540:	b172      	cbz	r2, 8008560 <__ieee754_pow+0x88>
 8008542:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008546:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800854a:	ea55 050a 	orrs.w	r5, r5, sl
 800854e:	d1dc      	bne.n	800850a <__ieee754_pow+0x32>
 8008550:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008554:	18db      	adds	r3, r3, r3
 8008556:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800855a:	4152      	adcs	r2, r2
 800855c:	429d      	cmp	r5, r3
 800855e:	e7d0      	b.n	8008502 <__ieee754_pow+0x2a>
 8008560:	2d00      	cmp	r5, #0
 8008562:	da3b      	bge.n	80085dc <__ieee754_pow+0x104>
 8008564:	4b72      	ldr	r3, [pc, #456]	; (8008730 <__ieee754_pow+0x258>)
 8008566:	4598      	cmp	r8, r3
 8008568:	dc51      	bgt.n	800860e <__ieee754_pow+0x136>
 800856a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800856e:	4598      	cmp	r8, r3
 8008570:	f340 84ab 	ble.w	8008eca <__ieee754_pow+0x9f2>
 8008574:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008578:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800857c:	2b14      	cmp	r3, #20
 800857e:	dd0f      	ble.n	80085a0 <__ieee754_pow+0xc8>
 8008580:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008584:	fa22 f103 	lsr.w	r1, r2, r3
 8008588:	fa01 f303 	lsl.w	r3, r1, r3
 800858c:	4293      	cmp	r3, r2
 800858e:	f040 849c 	bne.w	8008eca <__ieee754_pow+0x9f2>
 8008592:	f001 0101 	and.w	r1, r1, #1
 8008596:	f1c1 0302 	rsb	r3, r1, #2
 800859a:	9304      	str	r3, [sp, #16]
 800859c:	b182      	cbz	r2, 80085c0 <__ieee754_pow+0xe8>
 800859e:	e05f      	b.n	8008660 <__ieee754_pow+0x188>
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	d15b      	bne.n	800865c <__ieee754_pow+0x184>
 80085a4:	f1c3 0314 	rsb	r3, r3, #20
 80085a8:	fa48 f103 	asr.w	r1, r8, r3
 80085ac:	fa01 f303 	lsl.w	r3, r1, r3
 80085b0:	4543      	cmp	r3, r8
 80085b2:	f040 8487 	bne.w	8008ec4 <__ieee754_pow+0x9ec>
 80085b6:	f001 0101 	and.w	r1, r1, #1
 80085ba:	f1c1 0302 	rsb	r3, r1, #2
 80085be:	9304      	str	r3, [sp, #16]
 80085c0:	4b5c      	ldr	r3, [pc, #368]	; (8008734 <__ieee754_pow+0x25c>)
 80085c2:	4598      	cmp	r8, r3
 80085c4:	d132      	bne.n	800862c <__ieee754_pow+0x154>
 80085c6:	f1b9 0f00 	cmp.w	r9, #0
 80085ca:	f280 8477 	bge.w	8008ebc <__ieee754_pow+0x9e4>
 80085ce:	4959      	ldr	r1, [pc, #356]	; (8008734 <__ieee754_pow+0x25c>)
 80085d0:	4632      	mov	r2, r6
 80085d2:	463b      	mov	r3, r7
 80085d4:	2000      	movs	r0, #0
 80085d6:	f7f8 f941 	bl	800085c <__aeabi_ddiv>
 80085da:	e79c      	b.n	8008516 <__ieee754_pow+0x3e>
 80085dc:	2300      	movs	r3, #0
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	d13d      	bne.n	8008660 <__ieee754_pow+0x188>
 80085e4:	4b51      	ldr	r3, [pc, #324]	; (800872c <__ieee754_pow+0x254>)
 80085e6:	4598      	cmp	r8, r3
 80085e8:	d1ea      	bne.n	80085c0 <__ieee754_pow+0xe8>
 80085ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085f2:	ea53 030a 	orrs.w	r3, r3, sl
 80085f6:	f000 8459 	beq.w	8008eac <__ieee754_pow+0x9d4>
 80085fa:	4b4f      	ldr	r3, [pc, #316]	; (8008738 <__ieee754_pow+0x260>)
 80085fc:	429c      	cmp	r4, r3
 80085fe:	dd08      	ble.n	8008612 <__ieee754_pow+0x13a>
 8008600:	f1b9 0f00 	cmp.w	r9, #0
 8008604:	f2c0 8456 	blt.w	8008eb4 <__ieee754_pow+0x9dc>
 8008608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800860c:	e783      	b.n	8008516 <__ieee754_pow+0x3e>
 800860e:	2302      	movs	r3, #2
 8008610:	e7e5      	b.n	80085de <__ieee754_pow+0x106>
 8008612:	f1b9 0f00 	cmp.w	r9, #0
 8008616:	f04f 0000 	mov.w	r0, #0
 800861a:	f04f 0100 	mov.w	r1, #0
 800861e:	f6bf af7a 	bge.w	8008516 <__ieee754_pow+0x3e>
 8008622:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008626:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800862a:	e774      	b.n	8008516 <__ieee754_pow+0x3e>
 800862c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008630:	d106      	bne.n	8008640 <__ieee754_pow+0x168>
 8008632:	4632      	mov	r2, r6
 8008634:	463b      	mov	r3, r7
 8008636:	4630      	mov	r0, r6
 8008638:	4639      	mov	r1, r7
 800863a:	f7f7 ffe5 	bl	8000608 <__aeabi_dmul>
 800863e:	e76a      	b.n	8008516 <__ieee754_pow+0x3e>
 8008640:	4b3e      	ldr	r3, [pc, #248]	; (800873c <__ieee754_pow+0x264>)
 8008642:	4599      	cmp	r9, r3
 8008644:	d10c      	bne.n	8008660 <__ieee754_pow+0x188>
 8008646:	2d00      	cmp	r5, #0
 8008648:	db0a      	blt.n	8008660 <__ieee754_pow+0x188>
 800864a:	ec47 6b10 	vmov	d0, r6, r7
 800864e:	b009      	add	sp, #36	; 0x24
 8008650:	ecbd 8b06 	vpop	{d8-d10}
 8008654:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008658:	f7ff be62 	b.w	8008320 <__ieee754_sqrt>
 800865c:	2300      	movs	r3, #0
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	ec47 6b10 	vmov	d0, r6, r7
 8008664:	f7ff fe48 	bl	80082f8 <fabs>
 8008668:	ec51 0b10 	vmov	r0, r1, d0
 800866c:	f1ba 0f00 	cmp.w	sl, #0
 8008670:	d129      	bne.n	80086c6 <__ieee754_pow+0x1ee>
 8008672:	b124      	cbz	r4, 800867e <__ieee754_pow+0x1a6>
 8008674:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <__ieee754_pow+0x25c>)
 8008676:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800867a:	429a      	cmp	r2, r3
 800867c:	d123      	bne.n	80086c6 <__ieee754_pow+0x1ee>
 800867e:	f1b9 0f00 	cmp.w	r9, #0
 8008682:	da05      	bge.n	8008690 <__ieee754_pow+0x1b8>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	2000      	movs	r0, #0
 800868a:	492a      	ldr	r1, [pc, #168]	; (8008734 <__ieee754_pow+0x25c>)
 800868c:	f7f8 f8e6 	bl	800085c <__aeabi_ddiv>
 8008690:	2d00      	cmp	r5, #0
 8008692:	f6bf af40 	bge.w	8008516 <__ieee754_pow+0x3e>
 8008696:	9b04      	ldr	r3, [sp, #16]
 8008698:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800869c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80086a0:	431c      	orrs	r4, r3
 80086a2:	d108      	bne.n	80086b6 <__ieee754_pow+0x1de>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4610      	mov	r0, r2
 80086aa:	4619      	mov	r1, r3
 80086ac:	f7f7 fdf4 	bl	8000298 <__aeabi_dsub>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	e78f      	b.n	80085d6 <__ieee754_pow+0xfe>
 80086b6:	9b04      	ldr	r3, [sp, #16]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	f47f af2c 	bne.w	8008516 <__ieee754_pow+0x3e>
 80086be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086c2:	4619      	mov	r1, r3
 80086c4:	e727      	b.n	8008516 <__ieee754_pow+0x3e>
 80086c6:	0feb      	lsrs	r3, r5, #31
 80086c8:	3b01      	subs	r3, #1
 80086ca:	9306      	str	r3, [sp, #24]
 80086cc:	9a06      	ldr	r2, [sp, #24]
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	d102      	bne.n	80086da <__ieee754_pow+0x202>
 80086d4:	4632      	mov	r2, r6
 80086d6:	463b      	mov	r3, r7
 80086d8:	e7e6      	b.n	80086a8 <__ieee754_pow+0x1d0>
 80086da:	4b19      	ldr	r3, [pc, #100]	; (8008740 <__ieee754_pow+0x268>)
 80086dc:	4598      	cmp	r8, r3
 80086de:	f340 80fb 	ble.w	80088d8 <__ieee754_pow+0x400>
 80086e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086e6:	4598      	cmp	r8, r3
 80086e8:	4b13      	ldr	r3, [pc, #76]	; (8008738 <__ieee754_pow+0x260>)
 80086ea:	dd0c      	ble.n	8008706 <__ieee754_pow+0x22e>
 80086ec:	429c      	cmp	r4, r3
 80086ee:	dc0f      	bgt.n	8008710 <__ieee754_pow+0x238>
 80086f0:	f1b9 0f00 	cmp.w	r9, #0
 80086f4:	da0f      	bge.n	8008716 <__ieee754_pow+0x23e>
 80086f6:	2000      	movs	r0, #0
 80086f8:	b009      	add	sp, #36	; 0x24
 80086fa:	ecbd 8b06 	vpop	{d8-d10}
 80086fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008702:	f000 bcba 	b.w	800907a <__math_oflow>
 8008706:	429c      	cmp	r4, r3
 8008708:	dbf2      	blt.n	80086f0 <__ieee754_pow+0x218>
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <__ieee754_pow+0x25c>)
 800870c:	429c      	cmp	r4, r3
 800870e:	dd19      	ble.n	8008744 <__ieee754_pow+0x26c>
 8008710:	f1b9 0f00 	cmp.w	r9, #0
 8008714:	dcef      	bgt.n	80086f6 <__ieee754_pow+0x21e>
 8008716:	2000      	movs	r0, #0
 8008718:	b009      	add	sp, #36	; 0x24
 800871a:	ecbd 8b06 	vpop	{d8-d10}
 800871e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008722:	f000 bca1 	b.w	8009068 <__math_uflow>
 8008726:	bf00      	nop
 8008728:	fff00000 	.word	0xfff00000
 800872c:	7ff00000 	.word	0x7ff00000
 8008730:	433fffff 	.word	0x433fffff
 8008734:	3ff00000 	.word	0x3ff00000
 8008738:	3fefffff 	.word	0x3fefffff
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	41e00000 	.word	0x41e00000
 8008744:	4b60      	ldr	r3, [pc, #384]	; (80088c8 <__ieee754_pow+0x3f0>)
 8008746:	2200      	movs	r2, #0
 8008748:	f7f7 fda6 	bl	8000298 <__aeabi_dsub>
 800874c:	a354      	add	r3, pc, #336	; (adr r3, 80088a0 <__ieee754_pow+0x3c8>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	4604      	mov	r4, r0
 8008754:	460d      	mov	r5, r1
 8008756:	f7f7 ff57 	bl	8000608 <__aeabi_dmul>
 800875a:	a353      	add	r3, pc, #332	; (adr r3, 80088a8 <__ieee754_pow+0x3d0>)
 800875c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008760:	4606      	mov	r6, r0
 8008762:	460f      	mov	r7, r1
 8008764:	4620      	mov	r0, r4
 8008766:	4629      	mov	r1, r5
 8008768:	f7f7 ff4e 	bl	8000608 <__aeabi_dmul>
 800876c:	4b57      	ldr	r3, [pc, #348]	; (80088cc <__ieee754_pow+0x3f4>)
 800876e:	4682      	mov	sl, r0
 8008770:	468b      	mov	fp, r1
 8008772:	2200      	movs	r2, #0
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f7f7 ff46 	bl	8000608 <__aeabi_dmul>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	a14b      	add	r1, pc, #300	; (adr r1, 80088b0 <__ieee754_pow+0x3d8>)
 8008782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008786:	f7f7 fd87 	bl	8000298 <__aeabi_dsub>
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	f7f7 ff3b 	bl	8000608 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	2000      	movs	r0, #0
 8008798:	494d      	ldr	r1, [pc, #308]	; (80088d0 <__ieee754_pow+0x3f8>)
 800879a:	f7f7 fd7d 	bl	8000298 <__aeabi_dsub>
 800879e:	4622      	mov	r2, r4
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	462b      	mov	r3, r5
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 ff2d 	bl	8000608 <__aeabi_dmul>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 ff27 	bl	8000608 <__aeabi_dmul>
 80087ba:	a33f      	add	r3, pc, #252	; (adr r3, 80088b8 <__ieee754_pow+0x3e0>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 ff22 	bl	8000608 <__aeabi_dmul>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4650      	mov	r0, sl
 80087ca:	4659      	mov	r1, fp
 80087cc:	f7f7 fd64 	bl	8000298 <__aeabi_dsub>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4680      	mov	r8, r0
 80087d6:	4689      	mov	r9, r1
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f7 fd5e 	bl	800029c <__adddf3>
 80087e0:	2000      	movs	r0, #0
 80087e2:	4632      	mov	r2, r6
 80087e4:	463b      	mov	r3, r7
 80087e6:	4604      	mov	r4, r0
 80087e8:	460d      	mov	r5, r1
 80087ea:	f7f7 fd55 	bl	8000298 <__aeabi_dsub>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f7f7 fd4f 	bl	8000298 <__aeabi_dsub>
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	9a06      	ldr	r2, [sp, #24]
 80087fe:	3b01      	subs	r3, #1
 8008800:	4313      	orrs	r3, r2
 8008802:	4682      	mov	sl, r0
 8008804:	468b      	mov	fp, r1
 8008806:	f040 81e7 	bne.w	8008bd8 <__ieee754_pow+0x700>
 800880a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80088c0 <__ieee754_pow+0x3e8>
 800880e:	eeb0 8a47 	vmov.f32	s16, s14
 8008812:	eef0 8a67 	vmov.f32	s17, s15
 8008816:	e9dd 6700 	ldrd	r6, r7, [sp]
 800881a:	2600      	movs	r6, #0
 800881c:	4632      	mov	r2, r6
 800881e:	463b      	mov	r3, r7
 8008820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008824:	f7f7 fd38 	bl	8000298 <__aeabi_dsub>
 8008828:	4622      	mov	r2, r4
 800882a:	462b      	mov	r3, r5
 800882c:	f7f7 feec 	bl	8000608 <__aeabi_dmul>
 8008830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	4650      	mov	r0, sl
 800883a:	4659      	mov	r1, fp
 800883c:	f7f7 fee4 	bl	8000608 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f7 fd28 	bl	800029c <__adddf3>
 800884c:	4632      	mov	r2, r6
 800884e:	463b      	mov	r3, r7
 8008850:	4680      	mov	r8, r0
 8008852:	4689      	mov	r9, r1
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 fed6 	bl	8000608 <__aeabi_dmul>
 800885c:	460b      	mov	r3, r1
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	4602      	mov	r2, r0
 8008864:	4649      	mov	r1, r9
 8008866:	4640      	mov	r0, r8
 8008868:	f7f7 fd18 	bl	800029c <__adddf3>
 800886c:	4b19      	ldr	r3, [pc, #100]	; (80088d4 <__ieee754_pow+0x3fc>)
 800886e:	4299      	cmp	r1, r3
 8008870:	ec45 4b19 	vmov	d9, r4, r5
 8008874:	4606      	mov	r6, r0
 8008876:	460f      	mov	r7, r1
 8008878:	468b      	mov	fp, r1
 800887a:	f340 82f0 	ble.w	8008e5e <__ieee754_pow+0x986>
 800887e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008882:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008886:	4303      	orrs	r3, r0
 8008888:	f000 81e4 	beq.w	8008c54 <__ieee754_pow+0x77c>
 800888c:	ec51 0b18 	vmov	r0, r1, d8
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	f7f8 f92a 	bl	8000aec <__aeabi_dcmplt>
 8008898:	3800      	subs	r0, #0
 800889a:	bf18      	it	ne
 800889c:	2001      	movne	r0, #1
 800889e:	e72b      	b.n	80086f8 <__ieee754_pow+0x220>
 80088a0:	60000000 	.word	0x60000000
 80088a4:	3ff71547 	.word	0x3ff71547
 80088a8:	f85ddf44 	.word	0xf85ddf44
 80088ac:	3e54ae0b 	.word	0x3e54ae0b
 80088b0:	55555555 	.word	0x55555555
 80088b4:	3fd55555 	.word	0x3fd55555
 80088b8:	652b82fe 	.word	0x652b82fe
 80088bc:	3ff71547 	.word	0x3ff71547
 80088c0:	00000000 	.word	0x00000000
 80088c4:	bff00000 	.word	0xbff00000
 80088c8:	3ff00000 	.word	0x3ff00000
 80088cc:	3fd00000 	.word	0x3fd00000
 80088d0:	3fe00000 	.word	0x3fe00000
 80088d4:	408fffff 	.word	0x408fffff
 80088d8:	4bd5      	ldr	r3, [pc, #852]	; (8008c30 <__ieee754_pow+0x758>)
 80088da:	402b      	ands	r3, r5
 80088dc:	2200      	movs	r2, #0
 80088de:	b92b      	cbnz	r3, 80088ec <__ieee754_pow+0x414>
 80088e0:	4bd4      	ldr	r3, [pc, #848]	; (8008c34 <__ieee754_pow+0x75c>)
 80088e2:	f7f7 fe91 	bl	8000608 <__aeabi_dmul>
 80088e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088ea:	460c      	mov	r4, r1
 80088ec:	1523      	asrs	r3, r4, #20
 80088ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088f2:	4413      	add	r3, r2
 80088f4:	9305      	str	r3, [sp, #20]
 80088f6:	4bd0      	ldr	r3, [pc, #832]	; (8008c38 <__ieee754_pow+0x760>)
 80088f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80088fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008900:	429c      	cmp	r4, r3
 8008902:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008906:	dd08      	ble.n	800891a <__ieee754_pow+0x442>
 8008908:	4bcc      	ldr	r3, [pc, #816]	; (8008c3c <__ieee754_pow+0x764>)
 800890a:	429c      	cmp	r4, r3
 800890c:	f340 8162 	ble.w	8008bd4 <__ieee754_pow+0x6fc>
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	3301      	adds	r3, #1
 8008914:	9305      	str	r3, [sp, #20]
 8008916:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800891a:	2400      	movs	r4, #0
 800891c:	00e3      	lsls	r3, r4, #3
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	4bc7      	ldr	r3, [pc, #796]	; (8008c40 <__ieee754_pow+0x768>)
 8008922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008926:	ed93 7b00 	vldr	d7, [r3]
 800892a:	4629      	mov	r1, r5
 800892c:	ec53 2b17 	vmov	r2, r3, d7
 8008930:	eeb0 9a47 	vmov.f32	s18, s14
 8008934:	eef0 9a67 	vmov.f32	s19, s15
 8008938:	4682      	mov	sl, r0
 800893a:	f7f7 fcad 	bl	8000298 <__aeabi_dsub>
 800893e:	4652      	mov	r2, sl
 8008940:	4606      	mov	r6, r0
 8008942:	460f      	mov	r7, r1
 8008944:	462b      	mov	r3, r5
 8008946:	ec51 0b19 	vmov	r0, r1, d9
 800894a:	f7f7 fca7 	bl	800029c <__adddf3>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	2000      	movs	r0, #0
 8008954:	49bb      	ldr	r1, [pc, #748]	; (8008c44 <__ieee754_pow+0x76c>)
 8008956:	f7f7 ff81 	bl	800085c <__aeabi_ddiv>
 800895a:	ec41 0b1a 	vmov	d10, r0, r1
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fe4f 	bl	8000608 <__aeabi_dmul>
 800896a:	2300      	movs	r3, #0
 800896c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008976:	46ab      	mov	fp, r5
 8008978:	106d      	asrs	r5, r5, #1
 800897a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800897e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008982:	ec41 0b18 	vmov	d8, r0, r1
 8008986:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800898a:	2200      	movs	r2, #0
 800898c:	4640      	mov	r0, r8
 800898e:	4649      	mov	r1, r9
 8008990:	4614      	mov	r4, r2
 8008992:	461d      	mov	r5, r3
 8008994:	f7f7 fe38 	bl	8000608 <__aeabi_dmul>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4630      	mov	r0, r6
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f7 fc7a 	bl	8000298 <__aeabi_dsub>
 80089a4:	ec53 2b19 	vmov	r2, r3, d9
 80089a8:	4606      	mov	r6, r0
 80089aa:	460f      	mov	r7, r1
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 fc72 	bl	8000298 <__aeabi_dsub>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4650      	mov	r0, sl
 80089ba:	4659      	mov	r1, fp
 80089bc:	f7f7 fc6c 	bl	8000298 <__aeabi_dsub>
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	f7f7 fe20 	bl	8000608 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f7 fc62 	bl	8000298 <__aeabi_dsub>
 80089d4:	ec53 2b1a 	vmov	r2, r3, d10
 80089d8:	f7f7 fe16 	bl	8000608 <__aeabi_dmul>
 80089dc:	ec53 2b18 	vmov	r2, r3, d8
 80089e0:	ec41 0b19 	vmov	d9, r0, r1
 80089e4:	ec51 0b18 	vmov	r0, r1, d8
 80089e8:	f7f7 fe0e 	bl	8000608 <__aeabi_dmul>
 80089ec:	a37c      	add	r3, pc, #496	; (adr r3, 8008be0 <__ieee754_pow+0x708>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	4604      	mov	r4, r0
 80089f4:	460d      	mov	r5, r1
 80089f6:	f7f7 fe07 	bl	8000608 <__aeabi_dmul>
 80089fa:	a37b      	add	r3, pc, #492	; (adr r3, 8008be8 <__ieee754_pow+0x710>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f7f7 fc4c 	bl	800029c <__adddf3>
 8008a04:	4622      	mov	r2, r4
 8008a06:	462b      	mov	r3, r5
 8008a08:	f7f7 fdfe 	bl	8000608 <__aeabi_dmul>
 8008a0c:	a378      	add	r3, pc, #480	; (adr r3, 8008bf0 <__ieee754_pow+0x718>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fc43 	bl	800029c <__adddf3>
 8008a16:	4622      	mov	r2, r4
 8008a18:	462b      	mov	r3, r5
 8008a1a:	f7f7 fdf5 	bl	8000608 <__aeabi_dmul>
 8008a1e:	a376      	add	r3, pc, #472	; (adr r3, 8008bf8 <__ieee754_pow+0x720>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fc3a 	bl	800029c <__adddf3>
 8008a28:	4622      	mov	r2, r4
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	f7f7 fdec 	bl	8000608 <__aeabi_dmul>
 8008a30:	a373      	add	r3, pc, #460	; (adr r3, 8008c00 <__ieee754_pow+0x728>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fc31 	bl	800029c <__adddf3>
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	462b      	mov	r3, r5
 8008a3e:	f7f7 fde3 	bl	8000608 <__aeabi_dmul>
 8008a42:	a371      	add	r3, pc, #452	; (adr r3, 8008c08 <__ieee754_pow+0x730>)
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f7f7 fc28 	bl	800029c <__adddf3>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460f      	mov	r7, r1
 8008a52:	462b      	mov	r3, r5
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	f7f7 fdd6 	bl	8000608 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fdd0 	bl	8000608 <__aeabi_dmul>
 8008a68:	4642      	mov	r2, r8
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	460d      	mov	r5, r1
 8008a6e:	464b      	mov	r3, r9
 8008a70:	ec51 0b18 	vmov	r0, r1, d8
 8008a74:	f7f7 fc12 	bl	800029c <__adddf3>
 8008a78:	ec53 2b19 	vmov	r2, r3, d9
 8008a7c:	f7f7 fdc4 	bl	8000608 <__aeabi_dmul>
 8008a80:	4622      	mov	r2, r4
 8008a82:	462b      	mov	r3, r5
 8008a84:	f7f7 fc0a 	bl	800029c <__adddf3>
 8008a88:	4642      	mov	r2, r8
 8008a8a:	4682      	mov	sl, r0
 8008a8c:	468b      	mov	fp, r1
 8008a8e:	464b      	mov	r3, r9
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	4b6b      	ldr	r3, [pc, #428]	; (8008c48 <__ieee754_pow+0x770>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	4606      	mov	r6, r0
 8008a9e:	460f      	mov	r7, r1
 8008aa0:	f7f7 fbfc 	bl	800029c <__adddf3>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	f7f7 fbf8 	bl	800029c <__adddf3>
 8008aac:	2000      	movs	r0, #0
 8008aae:	4604      	mov	r4, r0
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	f7f7 fda5 	bl	8000608 <__aeabi_dmul>
 8008abe:	4b62      	ldr	r3, [pc, #392]	; (8008c48 <__ieee754_pow+0x770>)
 8008ac0:	4680      	mov	r8, r0
 8008ac2:	4689      	mov	r9, r1
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	f7f7 fbe5 	bl	8000298 <__aeabi_dsub>
 8008ace:	4632      	mov	r2, r6
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	f7f7 fbe1 	bl	8000298 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fbdb 	bl	8000298 <__aeabi_dsub>
 8008ae2:	ec53 2b18 	vmov	r2, r3, d8
 8008ae6:	f7f7 fd8f 	bl	8000608 <__aeabi_dmul>
 8008aea:	4622      	mov	r2, r4
 8008aec:	4606      	mov	r6, r0
 8008aee:	460f      	mov	r7, r1
 8008af0:	462b      	mov	r3, r5
 8008af2:	ec51 0b19 	vmov	r0, r1, d9
 8008af6:	f7f7 fd87 	bl	8000608 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	f7f7 fbcb 	bl	800029c <__adddf3>
 8008b06:	4606      	mov	r6, r0
 8008b08:	460f      	mov	r7, r1
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f7 fbc3 	bl	800029c <__adddf3>
 8008b16:	a33e      	add	r3, pc, #248	; (adr r3, 8008c10 <__ieee754_pow+0x738>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	460d      	mov	r5, r1
 8008b22:	f7f7 fd71 	bl	8000608 <__aeabi_dmul>
 8008b26:	4642      	mov	r2, r8
 8008b28:	ec41 0b18 	vmov	d8, r0, r1
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fbb1 	bl	8000298 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 fbab 	bl	8000298 <__aeabi_dsub>
 8008b42:	a335      	add	r3, pc, #212	; (adr r3, 8008c18 <__ieee754_pow+0x740>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fd5e 	bl	8000608 <__aeabi_dmul>
 8008b4c:	a334      	add	r3, pc, #208	; (adr r3, 8008c20 <__ieee754_pow+0x748>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	4606      	mov	r6, r0
 8008b54:	460f      	mov	r7, r1
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 fd55 	bl	8000608 <__aeabi_dmul>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fb99 	bl	800029c <__adddf3>
 8008b6a:	9a07      	ldr	r2, [sp, #28]
 8008b6c:	4b37      	ldr	r3, [pc, #220]	; (8008c4c <__ieee754_pow+0x774>)
 8008b6e:	4413      	add	r3, r2
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fb92 	bl	800029c <__adddf3>
 8008b78:	4682      	mov	sl, r0
 8008b7a:	9805      	ldr	r0, [sp, #20]
 8008b7c:	468b      	mov	fp, r1
 8008b7e:	f7f7 fcd9 	bl	8000534 <__aeabi_i2d>
 8008b82:	9a07      	ldr	r2, [sp, #28]
 8008b84:	4b32      	ldr	r3, [pc, #200]	; (8008c50 <__ieee754_pow+0x778>)
 8008b86:	4413      	add	r3, r2
 8008b88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4652      	mov	r2, sl
 8008b92:	465b      	mov	r3, fp
 8008b94:	ec51 0b18 	vmov	r0, r1, d8
 8008b98:	f7f7 fb80 	bl	800029c <__adddf3>
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	f7f7 fb7c 	bl	800029c <__adddf3>
 8008ba4:	4632      	mov	r2, r6
 8008ba6:	463b      	mov	r3, r7
 8008ba8:	f7f7 fb78 	bl	800029c <__adddf3>
 8008bac:	2000      	movs	r0, #0
 8008bae:	4632      	mov	r2, r6
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	f7f7 fb6f 	bl	8000298 <__aeabi_dsub>
 8008bba:	4642      	mov	r2, r8
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	f7f7 fb6b 	bl	8000298 <__aeabi_dsub>
 8008bc2:	ec53 2b18 	vmov	r2, r3, d8
 8008bc6:	f7f7 fb67 	bl	8000298 <__aeabi_dsub>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4650      	mov	r0, sl
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	e610      	b.n	80087f6 <__ieee754_pow+0x31e>
 8008bd4:	2401      	movs	r4, #1
 8008bd6:	e6a1      	b.n	800891c <__ieee754_pow+0x444>
 8008bd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008c28 <__ieee754_pow+0x750>
 8008bdc:	e617      	b.n	800880e <__ieee754_pow+0x336>
 8008bde:	bf00      	nop
 8008be0:	4a454eef 	.word	0x4a454eef
 8008be4:	3fca7e28 	.word	0x3fca7e28
 8008be8:	93c9db65 	.word	0x93c9db65
 8008bec:	3fcd864a 	.word	0x3fcd864a
 8008bf0:	a91d4101 	.word	0xa91d4101
 8008bf4:	3fd17460 	.word	0x3fd17460
 8008bf8:	518f264d 	.word	0x518f264d
 8008bfc:	3fd55555 	.word	0x3fd55555
 8008c00:	db6fabff 	.word	0xdb6fabff
 8008c04:	3fdb6db6 	.word	0x3fdb6db6
 8008c08:	33333303 	.word	0x33333303
 8008c0c:	3fe33333 	.word	0x3fe33333
 8008c10:	e0000000 	.word	0xe0000000
 8008c14:	3feec709 	.word	0x3feec709
 8008c18:	dc3a03fd 	.word	0xdc3a03fd
 8008c1c:	3feec709 	.word	0x3feec709
 8008c20:	145b01f5 	.word	0x145b01f5
 8008c24:	be3e2fe0 	.word	0xbe3e2fe0
 8008c28:	00000000 	.word	0x00000000
 8008c2c:	3ff00000 	.word	0x3ff00000
 8008c30:	7ff00000 	.word	0x7ff00000
 8008c34:	43400000 	.word	0x43400000
 8008c38:	0003988e 	.word	0x0003988e
 8008c3c:	000bb679 	.word	0x000bb679
 8008c40:	080095d0 	.word	0x080095d0
 8008c44:	3ff00000 	.word	0x3ff00000
 8008c48:	40080000 	.word	0x40080000
 8008c4c:	080095f0 	.word	0x080095f0
 8008c50:	080095e0 	.word	0x080095e0
 8008c54:	a3b3      	add	r3, pc, #716	; (adr r3, 8008f24 <__ieee754_pow+0xa4c>)
 8008c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	f7f7 fb1d 	bl	800029c <__adddf3>
 8008c62:	4622      	mov	r2, r4
 8008c64:	ec41 0b1a 	vmov	d10, r0, r1
 8008c68:	462b      	mov	r3, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	f7f7 fb13 	bl	8000298 <__aeabi_dsub>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	ec51 0b1a 	vmov	r0, r1, d10
 8008c7a:	f7f7 ff55 	bl	8000b28 <__aeabi_dcmpgt>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f47f ae04 	bne.w	800888c <__ieee754_pow+0x3b4>
 8008c84:	4aa2      	ldr	r2, [pc, #648]	; (8008f10 <__ieee754_pow+0xa38>)
 8008c86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	f340 8107 	ble.w	8008e9e <__ieee754_pow+0x9c6>
 8008c90:	151b      	asrs	r3, r3, #20
 8008c92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008c9a:	fa4a fa03 	asr.w	sl, sl, r3
 8008c9e:	44da      	add	sl, fp
 8008ca0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008ca4:	489b      	ldr	r0, [pc, #620]	; (8008f14 <__ieee754_pow+0xa3c>)
 8008ca6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008caa:	4108      	asrs	r0, r1
 8008cac:	ea00 030a 	and.w	r3, r0, sl
 8008cb0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008cb4:	f1c1 0114 	rsb	r1, r1, #20
 8008cb8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008cbc:	fa4a fa01 	asr.w	sl, sl, r1
 8008cc0:	f1bb 0f00 	cmp.w	fp, #0
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	4620      	mov	r0, r4
 8008cca:	4629      	mov	r1, r5
 8008ccc:	bfb8      	it	lt
 8008cce:	f1ca 0a00 	rsblt	sl, sl, #0
 8008cd2:	f7f7 fae1 	bl	8000298 <__aeabi_dsub>
 8008cd6:	ec41 0b19 	vmov	d9, r0, r1
 8008cda:	4642      	mov	r2, r8
 8008cdc:	464b      	mov	r3, r9
 8008cde:	ec51 0b19 	vmov	r0, r1, d9
 8008ce2:	f7f7 fadb 	bl	800029c <__adddf3>
 8008ce6:	a37a      	add	r3, pc, #488	; (adr r3, 8008ed0 <__ieee754_pow+0x9f8>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	2000      	movs	r0, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	f7f7 fc89 	bl	8000608 <__aeabi_dmul>
 8008cf6:	ec53 2b19 	vmov	r2, r3, d9
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4629      	mov	r1, r5
 8008d02:	f7f7 fac9 	bl	8000298 <__aeabi_dsub>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	f7f7 fac3 	bl	8000298 <__aeabi_dsub>
 8008d12:	a371      	add	r3, pc, #452	; (adr r3, 8008ed8 <__ieee754_pow+0xa00>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fc76 	bl	8000608 <__aeabi_dmul>
 8008d1c:	a370      	add	r3, pc, #448	; (adr r3, 8008ee0 <__ieee754_pow+0xa08>)
 8008d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d22:	4680      	mov	r8, r0
 8008d24:	4689      	mov	r9, r1
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fc6d 	bl	8000608 <__aeabi_dmul>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 fab1 	bl	800029c <__adddf3>
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 faa9 	bl	800029c <__adddf3>
 8008d4a:	4632      	mov	r2, r6
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4689      	mov	r9, r1
 8008d52:	f7f7 faa1 	bl	8000298 <__aeabi_dsub>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 fa9b 	bl	8000298 <__aeabi_dsub>
 8008d62:	4642      	mov	r2, r8
 8008d64:	4606      	mov	r6, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	464b      	mov	r3, r9
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fc4b 	bl	8000608 <__aeabi_dmul>
 8008d72:	a35d      	add	r3, pc, #372	; (adr r3, 8008ee8 <__ieee754_pow+0xa10>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	4604      	mov	r4, r0
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	f7f7 fc44 	bl	8000608 <__aeabi_dmul>
 8008d80:	a35b      	add	r3, pc, #364	; (adr r3, 8008ef0 <__ieee754_pow+0xa18>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f7f7 fa87 	bl	8000298 <__aeabi_dsub>
 8008d8a:	4622      	mov	r2, r4
 8008d8c:	462b      	mov	r3, r5
 8008d8e:	f7f7 fc3b 	bl	8000608 <__aeabi_dmul>
 8008d92:	a359      	add	r3, pc, #356	; (adr r3, 8008ef8 <__ieee754_pow+0xa20>)
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f7f7 fa80 	bl	800029c <__adddf3>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	462b      	mov	r3, r5
 8008da0:	f7f7 fc32 	bl	8000608 <__aeabi_dmul>
 8008da4:	a356      	add	r3, pc, #344	; (adr r3, 8008f00 <__ieee754_pow+0xa28>)
 8008da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008daa:	f7f7 fa75 	bl	8000298 <__aeabi_dsub>
 8008dae:	4622      	mov	r2, r4
 8008db0:	462b      	mov	r3, r5
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	a354      	add	r3, pc, #336	; (adr r3, 8008f08 <__ieee754_pow+0xa30>)
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f7f7 fa6e 	bl	800029c <__adddf3>
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	f7f7 fc20 	bl	8000608 <__aeabi_dmul>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4640      	mov	r0, r8
 8008dce:	4649      	mov	r1, r9
 8008dd0:	f7f7 fa62 	bl	8000298 <__aeabi_dsub>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fc12 	bl	8000608 <__aeabi_dmul>
 8008de4:	2200      	movs	r2, #0
 8008de6:	ec41 0b19 	vmov	d9, r0, r1
 8008dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fa51 	bl	8000298 <__aeabi_dsub>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	ec51 0b19 	vmov	r0, r1, d9
 8008dfe:	f7f7 fd2d 	bl	800085c <__aeabi_ddiv>
 8008e02:	4632      	mov	r2, r6
 8008e04:	4604      	mov	r4, r0
 8008e06:	460d      	mov	r5, r1
 8008e08:	463b      	mov	r3, r7
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fbfb 	bl	8000608 <__aeabi_dmul>
 8008e12:	4632      	mov	r2, r6
 8008e14:	463b      	mov	r3, r7
 8008e16:	f7f7 fa41 	bl	800029c <__adddf3>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fa39 	bl	8000298 <__aeabi_dsub>
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	f7f7 fa35 	bl	8000298 <__aeabi_dsub>
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4602      	mov	r2, r0
 8008e32:	4939      	ldr	r1, [pc, #228]	; (8008f18 <__ieee754_pow+0xa40>)
 8008e34:	2000      	movs	r0, #0
 8008e36:	f7f7 fa2f 	bl	8000298 <__aeabi_dsub>
 8008e3a:	ec41 0b10 	vmov	d0, r0, r1
 8008e3e:	ee10 3a90 	vmov	r3, s1
 8008e42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e4a:	da2b      	bge.n	8008ea4 <__ieee754_pow+0x9cc>
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	f000 f86f 	bl	8008f30 <scalbn>
 8008e52:	ec51 0b10 	vmov	r0, r1, d0
 8008e56:	ec53 2b18 	vmov	r2, r3, d8
 8008e5a:	f7ff bbee 	b.w	800863a <__ieee754_pow+0x162>
 8008e5e:	4b2f      	ldr	r3, [pc, #188]	; (8008f1c <__ieee754_pow+0xa44>)
 8008e60:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e64:	429e      	cmp	r6, r3
 8008e66:	f77f af0d 	ble.w	8008c84 <__ieee754_pow+0x7ac>
 8008e6a:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <__ieee754_pow+0xa48>)
 8008e6c:	440b      	add	r3, r1
 8008e6e:	4303      	orrs	r3, r0
 8008e70:	d009      	beq.n	8008e86 <__ieee754_pow+0x9ae>
 8008e72:	ec51 0b18 	vmov	r0, r1, d8
 8008e76:	2200      	movs	r2, #0
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f7f7 fe37 	bl	8000aec <__aeabi_dcmplt>
 8008e7e:	3800      	subs	r0, #0
 8008e80:	bf18      	it	ne
 8008e82:	2001      	movne	r0, #1
 8008e84:	e448      	b.n	8008718 <__ieee754_pow+0x240>
 8008e86:	4622      	mov	r2, r4
 8008e88:	462b      	mov	r3, r5
 8008e8a:	f7f7 fa05 	bl	8000298 <__aeabi_dsub>
 8008e8e:	4642      	mov	r2, r8
 8008e90:	464b      	mov	r3, r9
 8008e92:	f7f7 fe3f 	bl	8000b14 <__aeabi_dcmpge>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f aef4 	beq.w	8008c84 <__ieee754_pow+0x7ac>
 8008e9c:	e7e9      	b.n	8008e72 <__ieee754_pow+0x99a>
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	e71a      	b.n	8008cda <__ieee754_pow+0x802>
 8008ea4:	ec51 0b10 	vmov	r0, r1, d0
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	e7d4      	b.n	8008e56 <__ieee754_pow+0x97e>
 8008eac:	491a      	ldr	r1, [pc, #104]	; (8008f18 <__ieee754_pow+0xa40>)
 8008eae:	2000      	movs	r0, #0
 8008eb0:	f7ff bb31 	b.w	8008516 <__ieee754_pow+0x3e>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f7ff bb2d 	b.w	8008516 <__ieee754_pow+0x3e>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	f7ff bb29 	b.w	8008516 <__ieee754_pow+0x3e>
 8008ec4:	9204      	str	r2, [sp, #16]
 8008ec6:	f7ff bb7b 	b.w	80085c0 <__ieee754_pow+0xe8>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f7ff bb65 	b.w	800859a <__ieee754_pow+0xc2>
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	3fe62e43 	.word	0x3fe62e43
 8008ed8:	fefa39ef 	.word	0xfefa39ef
 8008edc:	3fe62e42 	.word	0x3fe62e42
 8008ee0:	0ca86c39 	.word	0x0ca86c39
 8008ee4:	be205c61 	.word	0xbe205c61
 8008ee8:	72bea4d0 	.word	0x72bea4d0
 8008eec:	3e663769 	.word	0x3e663769
 8008ef0:	c5d26bf1 	.word	0xc5d26bf1
 8008ef4:	3ebbbd41 	.word	0x3ebbbd41
 8008ef8:	af25de2c 	.word	0xaf25de2c
 8008efc:	3f11566a 	.word	0x3f11566a
 8008f00:	16bebd93 	.word	0x16bebd93
 8008f04:	3f66c16c 	.word	0x3f66c16c
 8008f08:	5555553e 	.word	0x5555553e
 8008f0c:	3fc55555 	.word	0x3fc55555
 8008f10:	3fe00000 	.word	0x3fe00000
 8008f14:	fff00000 	.word	0xfff00000
 8008f18:	3ff00000 	.word	0x3ff00000
 8008f1c:	4090cbff 	.word	0x4090cbff
 8008f20:	3f6f3400 	.word	0x3f6f3400
 8008f24:	652b82fe 	.word	0x652b82fe
 8008f28:	3c971547 	.word	0x3c971547
 8008f2c:	00000000 	.word	0x00000000

08008f30 <scalbn>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	ec55 4b10 	vmov	r4, r5, d0
 8008f36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	462b      	mov	r3, r5
 8008f3e:	b999      	cbnz	r1, 8008f68 <scalbn+0x38>
 8008f40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f44:	4323      	orrs	r3, r4
 8008f46:	d03f      	beq.n	8008fc8 <scalbn+0x98>
 8008f48:	4b35      	ldr	r3, [pc, #212]	; (8009020 <scalbn+0xf0>)
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	ee10 0a10 	vmov	r0, s0
 8008f50:	2200      	movs	r2, #0
 8008f52:	f7f7 fb59 	bl	8000608 <__aeabi_dmul>
 8008f56:	4b33      	ldr	r3, [pc, #204]	; (8009024 <scalbn+0xf4>)
 8008f58:	429e      	cmp	r6, r3
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	da10      	bge.n	8008f82 <scalbn+0x52>
 8008f60:	a327      	add	r3, pc, #156	; (adr r3, 8009000 <scalbn+0xd0>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	e01f      	b.n	8008fa8 <scalbn+0x78>
 8008f68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008f6c:	4291      	cmp	r1, r2
 8008f6e:	d10c      	bne.n	8008f8a <scalbn+0x5a>
 8008f70:	ee10 2a10 	vmov	r2, s0
 8008f74:	4620      	mov	r0, r4
 8008f76:	4629      	mov	r1, r5
 8008f78:	f7f7 f990 	bl	800029c <__adddf3>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	460d      	mov	r5, r1
 8008f80:	e022      	b.n	8008fc8 <scalbn+0x98>
 8008f82:	460b      	mov	r3, r1
 8008f84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008f88:	3936      	subs	r1, #54	; 0x36
 8008f8a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008f8e:	4296      	cmp	r6, r2
 8008f90:	dd0d      	ble.n	8008fae <scalbn+0x7e>
 8008f92:	2d00      	cmp	r5, #0
 8008f94:	a11c      	add	r1, pc, #112	; (adr r1, 8009008 <scalbn+0xd8>)
 8008f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f9a:	da02      	bge.n	8008fa2 <scalbn+0x72>
 8008f9c:	a11c      	add	r1, pc, #112	; (adr r1, 8009010 <scalbn+0xe0>)
 8008f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa2:	a319      	add	r3, pc, #100	; (adr r3, 8009008 <scalbn+0xd8>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 fb2e 	bl	8000608 <__aeabi_dmul>
 8008fac:	e7e6      	b.n	8008f7c <scalbn+0x4c>
 8008fae:	1872      	adds	r2, r6, r1
 8008fb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008fb4:	428a      	cmp	r2, r1
 8008fb6:	dcec      	bgt.n	8008f92 <scalbn+0x62>
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	dd08      	ble.n	8008fce <scalbn+0x9e>
 8008fbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fc8:	ec45 4b10 	vmov	d0, r4, r5
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008fd2:	da08      	bge.n	8008fe6 <scalbn+0xb6>
 8008fd4:	2d00      	cmp	r5, #0
 8008fd6:	a10a      	add	r1, pc, #40	; (adr r1, 8009000 <scalbn+0xd0>)
 8008fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fdc:	dac0      	bge.n	8008f60 <scalbn+0x30>
 8008fde:	a10e      	add	r1, pc, #56	; (adr r1, 8009018 <scalbn+0xe8>)
 8008fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe4:	e7bc      	b.n	8008f60 <scalbn+0x30>
 8008fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fea:	3236      	adds	r2, #54	; 0x36
 8008fec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ff0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <scalbn+0xf8>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	e7d5      	b.n	8008fa8 <scalbn+0x78>
 8008ffc:	f3af 8000 	nop.w
 8009000:	c2f8f359 	.word	0xc2f8f359
 8009004:	01a56e1f 	.word	0x01a56e1f
 8009008:	8800759c 	.word	0x8800759c
 800900c:	7e37e43c 	.word	0x7e37e43c
 8009010:	8800759c 	.word	0x8800759c
 8009014:	fe37e43c 	.word	0xfe37e43c
 8009018:	c2f8f359 	.word	0xc2f8f359
 800901c:	81a56e1f 	.word	0x81a56e1f
 8009020:	43500000 	.word	0x43500000
 8009024:	ffff3cb0 	.word	0xffff3cb0
 8009028:	3c900000 	.word	0x3c900000

0800902c <with_errno>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4604      	mov	r4, r0
 8009030:	460d      	mov	r5, r1
 8009032:	4616      	mov	r6, r2
 8009034:	f7fc fe7c 	bl	8005d30 <__errno>
 8009038:	4629      	mov	r1, r5
 800903a:	6006      	str	r6, [r0, #0]
 800903c:	4620      	mov	r0, r4
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <xflow>:
 8009040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009042:	4614      	mov	r4, r2
 8009044:	461d      	mov	r5, r3
 8009046:	b108      	cbz	r0, 800904c <xflow+0xc>
 8009048:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800904c:	e9cd 2300 	strd	r2, r3, [sp]
 8009050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009054:	4620      	mov	r0, r4
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fad6 	bl	8000608 <__aeabi_dmul>
 800905c:	2222      	movs	r2, #34	; 0x22
 800905e:	b003      	add	sp, #12
 8009060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009064:	f7ff bfe2 	b.w	800902c <with_errno>

08009068 <__math_uflow>:
 8009068:	b508      	push	{r3, lr}
 800906a:	2200      	movs	r2, #0
 800906c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009070:	f7ff ffe6 	bl	8009040 <xflow>
 8009074:	ec41 0b10 	vmov	d0, r0, r1
 8009078:	bd08      	pop	{r3, pc}

0800907a <__math_oflow>:
 800907a:	b508      	push	{r3, lr}
 800907c:	2200      	movs	r2, #0
 800907e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009082:	f7ff ffdd 	bl	8009040 <xflow>
 8009086:	ec41 0b10 	vmov	d0, r0, r1
 800908a:	bd08      	pop	{r3, pc}

0800908c <_init>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr

08009098 <_fini>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	bf00      	nop
 800909c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800909e:	bc08      	pop	{r3}
 80090a0:	469e      	mov	lr, r3
 80090a2:	4770      	bx	lr
