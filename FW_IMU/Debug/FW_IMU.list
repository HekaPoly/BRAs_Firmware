
FW_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e8c  08003e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  2000000c  08003ea0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08003ea0  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160cb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e80  00000000  00000000  0003614a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f68  00000000  00000000  000393c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cbb  00000000  00000000  0003a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012374  00000000  00000000  00050fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ea6f  00000000  00000000  00063357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005538  00000000  00000000  000f1dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f7300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e54 	.word	0x08003e54

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003e54 	.word	0x08003e54

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <MX_GPIO_Init+0xd0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a2c      	ldr	r2, [pc, #176]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a25      	ldr	r2, [pc, #148]	; (80005b0 <MX_GPIO_Init+0xd0>)
 800051c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b23      	ldr	r3, [pc, #140]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <MX_GPIO_Init+0xd0>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_GPIO_Init+0xd0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	4812      	ldr	r0, [pc, #72]	; (80005b4 <MX_GPIO_Init+0xd4>)
 800056c:	f000 fd22 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000576:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_GPIO_Init+0xd8>)
 8000588:	f000 fb90 	bl	8000cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058c:	2320      	movs	r3, #32
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_GPIO_Init+0xd4>)
 80005a4:	f000 fb82 	bl	8000cac <HAL_GPIO_Init>

}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40020800 	.word	0x40020800

080005bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_I2C1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x50>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_I2C1_Init+0x58>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_I2C1_Init+0x50>)
 80005da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_I2C1_Init+0x50>)
 80005fa:	f000 fcf5 	bl	8000fe8 <HAL_I2C_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f8d0 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000028 	.word	0x20000028
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a19      	ldr	r2, [pc, #100]	; (800069c <HAL_I2C_MspInit+0x84>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d12c      	bne.n	8000694 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000656:	f44f 7340 	mov.w	r3, #768	; 0x300
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065c:	2312      	movs	r3, #18
 800065e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000668:	2304      	movs	r3, #4
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <HAL_I2C_MspInit+0x8c>)
 8000674:	f000 fb1a 	bl	8000cac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_I2C_MspInit+0x88>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40005400 	.word	0x40005400
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020400 	.word	0x40020400

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 f981 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f80d 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff13 	bl	80004e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 f8df 	bl	800087c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006be:	f7ff ff7d 	bl	80005bc <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  lsm6dsr_read_data_polling();
 80006c2:	f003 fa1f 	bl	8003b04 <lsm6dsr_read_data_polling>
	  HAL_Delay(50);
 80006c6:	2032      	movs	r0, #50	; 0x32
 80006c8:	f000 f9e6 	bl	8000a98 <HAL_Delay>
	  lsm6dsr_read_data_polling();
 80006cc:	e7f9      	b.n	80006c2 <main+0x1a>
	...

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fb8c 	bl	8003dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a28      	ldr	r2, [pc, #160]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd4>)
 800071e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fc04 	bl	8001f68 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f81f 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2102      	movs	r1, #2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fe66 	bl	8002458 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000792:	f000 f809 	bl	80007a8 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f2:	2007      	movs	r0, #7
 80007f4:	f000 fa26 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f902 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f001 fff0 	bl	8002898 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f7ff ff73 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000007c 	.word	0x2000007c
 80008cc:	40004400 	.word	0x40004400

080008d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a19      	ldr	r2, [pc, #100]	; (8000954 <HAL_UART_MspInit+0x84>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d12b      	bne.n	800094a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x88>)
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_UART_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092a:	230c      	movs	r3, #12
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093a:	2307      	movs	r3, #7
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <HAL_UART_MspInit+0x8c>)
 8000946:	f000 f9b1 	bl	8000cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40004400 	.word	0x40004400
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098a:	f7ff ff65 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f003 fa3d 	bl	8003e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fe89 	bl	80006a8 <main>
  bx  lr    
 8000996:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000998:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	08003e94 	.word	0x08003e94
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	200004dc 	.word	0x200004dc

080009b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f931 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fee4 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f93b 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f000 f911 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200000c0 	.word	0x200000c0

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000c0 	.word	0x200000c0

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff47 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff5c 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffb0 	bl	8000c00 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e159      	b.n	8000f7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 8148 	bne.w	8000f76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80a2 	beq.w	8000f76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x2ec>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x202>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x1fe>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <HAL_GPIO_Init+0x2f8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x1fa>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_GPIO_Init+0x2fc>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x1f6>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_GPIO_Init+0x300>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x1f2>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e008      	b.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <HAL_GPIO_Init+0x2ec>)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ef2:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f1c:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f46:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_GPIO_Init+0x304>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	f67f aea2 	bls.w	8000cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40013c00 	.word	0x40013c00

08000fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc4:	787b      	ldrb	r3, [r7, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd0:	e003      	b.n	8000fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	041a      	lsls	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e12b      	b.n	8001252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fb02 	bl	8000618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2224      	movs	r2, #36	; 0x24
 8001018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800103a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800104a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800104c:	f001 fbfc 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8001050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a81      	ldr	r2, [pc, #516]	; (800125c <HAL_I2C_Init+0x274>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d807      	bhi.n	800106c <HAL_I2C_Init+0x84>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4a80      	ldr	r2, [pc, #512]	; (8001260 <HAL_I2C_Init+0x278>)
 8001060:	4293      	cmp	r3, r2
 8001062:	bf94      	ite	ls
 8001064:	2301      	movls	r3, #1
 8001066:	2300      	movhi	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e006      	b.n	800107a <HAL_I2C_Init+0x92>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4a7d      	ldr	r2, [pc, #500]	; (8001264 <HAL_I2C_Init+0x27c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	bf94      	ite	ls
 8001074:	2301      	movls	r3, #1
 8001076:	2300      	movhi	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0e7      	b.n	8001252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4a78      	ldr	r2, [pc, #480]	; (8001268 <HAL_I2C_Init+0x280>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	430a      	orrs	r2, r1
 80010a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a6a      	ldr	r2, [pc, #424]	; (800125c <HAL_I2C_Init+0x274>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d802      	bhi.n	80010bc <HAL_I2C_Init+0xd4>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3301      	adds	r3, #1
 80010ba:	e009      	b.n	80010d0 <HAL_I2C_Init+0xe8>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	4a69      	ldr	r2, [pc, #420]	; (800126c <HAL_I2C_Init+0x284>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	099b      	lsrs	r3, r3, #6
 80010ce:	3301      	adds	r3, #1
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	495c      	ldr	r1, [pc, #368]	; (800125c <HAL_I2C_Init+0x274>)
 80010ec:	428b      	cmp	r3, r1
 80010ee:	d819      	bhi.n	8001124 <HAL_I2C_Init+0x13c>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	1e59      	subs	r1, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fe:	1c59      	adds	r1, r3, #1
 8001100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001104:	400b      	ands	r3, r1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <HAL_I2C_Init+0x138>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1e59      	subs	r1, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fbb1 f3f3 	udiv	r3, r1, r3
 8001118:	3301      	adds	r3, #1
 800111a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111e:	e051      	b.n	80011c4 <HAL_I2C_Init+0x1dc>
 8001120:	2304      	movs	r3, #4
 8001122:	e04f      	b.n	80011c4 <HAL_I2C_Init+0x1dc>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d111      	bne.n	8001150 <HAL_I2C_Init+0x168>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1e58      	subs	r0, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	440b      	add	r3, r1
 800113a:	fbb0 f3f3 	udiv	r3, r0, r3
 800113e:	3301      	adds	r3, #1
 8001140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	e012      	b.n	8001176 <HAL_I2C_Init+0x18e>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	1e58      	subs	r0, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	0099      	lsls	r1, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	fbb0 f3f3 	udiv	r3, r0, r3
 8001166:	3301      	adds	r3, #1
 8001168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf0c      	ite	eq
 8001170:	2301      	moveq	r3, #1
 8001172:	2300      	movne	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_Init+0x196>
 800117a:	2301      	movs	r3, #1
 800117c:	e022      	b.n	80011c4 <HAL_I2C_Init+0x1dc>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10e      	bne.n	80011a4 <HAL_I2C_Init+0x1bc>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1e58      	subs	r0, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6859      	ldr	r1, [r3, #4]
 800118e:	460b      	mov	r3, r1
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	440b      	add	r3, r1
 8001194:	fbb0 f3f3 	udiv	r3, r0, r3
 8001198:	3301      	adds	r3, #1
 800119a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a2:	e00f      	b.n	80011c4 <HAL_I2C_Init+0x1dc>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1e58      	subs	r0, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	0099      	lsls	r1, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	6809      	ldr	r1, [r1, #0]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69da      	ldr	r2, [r3, #28]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6911      	ldr	r1, [r2, #16]
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68d2      	ldr	r2, [r2, #12]
 80011fe:	4311      	orrs	r1, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	430b      	orrs	r3, r1
 8001206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2220      	movs	r2, #32
 800123e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	000186a0 	.word	0x000186a0
 8001260:	001e847f 	.word	0x001e847f
 8001264:	003d08ff 	.word	0x003d08ff
 8001268:	431bde83 	.word	0x431bde83
 800126c:	10624dd3 	.word	0x10624dd3

08001270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	461a      	mov	r2, r3
 800127e:	4603      	mov	r3, r0
 8001280:	817b      	strh	r3, [r7, #10]
 8001282:	460b      	mov	r3, r1
 8001284:	813b      	strh	r3, [r7, #8]
 8001286:	4613      	mov	r3, r2
 8001288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800128a:	f7ff fbf9 	bl	8000a80 <HAL_GetTick>
 800128e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b20      	cmp	r3, #32
 800129a:	f040 80d9 	bne.w	8001450 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2319      	movs	r3, #25
 80012a4:	2201      	movs	r2, #1
 80012a6:	496d      	ldr	r1, [pc, #436]	; (800145c <HAL_I2C_Mem_Write+0x1ec>)
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fc7f 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012b4:	2302      	movs	r3, #2
 80012b6:	e0cc      	b.n	8001452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_I2C_Mem_Write+0x56>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e0c5      	b.n	8001452 <HAL_I2C_Mem_Write+0x1e2>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d007      	beq.n	80012ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2221      	movs	r2, #33	; 0x21
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2240      	movs	r2, #64	; 0x40
 8001308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a3a      	ldr	r2, [r7, #32]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800131c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001322:	b29a      	uxth	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_I2C_Mem_Write+0x1f0>)
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800132e:	88f8      	ldrh	r0, [r7, #6]
 8001330:	893a      	ldrh	r2, [r7, #8]
 8001332:	8979      	ldrh	r1, [r7, #10]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4603      	mov	r3, r0
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 fab6 	bl	80018b0 <I2C_RequestMemoryWrite>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d052      	beq.n	80013f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e081      	b.n	8001452 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 fd00 	bl	8001d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00d      	beq.n	800137a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2b04      	cmp	r3, #4
 8001364:	d107      	bne.n	8001376 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e06b      	b.n	8001452 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3b01      	subs	r3, #1
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d11b      	bne.n	80013f0 <HAL_I2C_Mem_Write+0x180>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d017      	beq.n	80013f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013da:	3b01      	subs	r3, #1
 80013dc:	b29a      	uxth	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3b01      	subs	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1aa      	bne.n	800134e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 fcec 	bl	8001dda <I2C_WaitOnBTFFlagUntilTimeout>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00d      	beq.n	8001424 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	2b04      	cmp	r3, #4
 800140e:	d107      	bne.n	8001420 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800141e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e016      	b.n	8001452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2220      	movs	r2, #32
 8001438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	e000      	b.n	8001452 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001450:	2302      	movs	r3, #2
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	00100002 	.word	0x00100002
 8001460:	ffff0000 	.word	0xffff0000

08001464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af02      	add	r7, sp, #8
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4603      	mov	r3, r0
 8001474:	817b      	strh	r3, [r7, #10]
 8001476:	460b      	mov	r3, r1
 8001478:	813b      	strh	r3, [r7, #8]
 800147a:	4613      	mov	r3, r2
 800147c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800147e:	f7ff faff 	bl	8000a80 <HAL_GetTick>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b20      	cmp	r3, #32
 800148e:	f040 8208 	bne.w	80018a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2319      	movs	r3, #25
 8001498:	2201      	movs	r2, #1
 800149a:	497b      	ldr	r1, [pc, #492]	; (8001688 <HAL_I2C_Mem_Read+0x224>)
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 fb85 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80014a8:	2302      	movs	r3, #2
 80014aa:	e1fb      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Mem_Read+0x56>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e1f4      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d007      	beq.n	80014e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2222      	movs	r2, #34	; 0x22
 80014f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_I2C_Mem_Read+0x228>)
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001522:	88f8      	ldrh	r0, [r7, #6]
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	8979      	ldrh	r1, [r7, #10]
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4603      	mov	r3, r0
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 fa52 	bl	80019dc <I2C_RequestMemoryRead>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1b0      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001546:	2b00      	cmp	r3, #0
 8001548:	d113      	bne.n	8001572 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	623b      	str	r3, [r7, #32]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e184      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	2b01      	cmp	r3, #1
 8001578:	d11b      	bne.n	80015b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e164      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d11b      	bne.n	80015f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	e144      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001608:	e138      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	2b03      	cmp	r3, #3
 8001610:	f200 80f1 	bhi.w	80017f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	2b01      	cmp	r3, #1
 800161a:	d123      	bne.n	8001664 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fc1b 	bl	8001e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e139      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164c:	3b01      	subs	r3, #1
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001662:	e10b      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	2b02      	cmp	r3, #2
 800166a:	d14e      	bne.n	800170a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001672:	2200      	movs	r2, #0
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <HAL_I2C_Mem_Read+0x22c>)
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fa98 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e10e      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
 8001686:	bf00      	nop
 8001688:	00100002 	.word	0x00100002
 800168c:	ffff0000 	.word	0xffff0000
 8001690:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001708:	e0b8      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001710:	2200      	movs	r2, #0
 8001712:	4966      	ldr	r1, [pc, #408]	; (80018ac <HAL_I2C_Mem_Read+0x448>)
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 fa49 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0bf      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176c:	2200      	movs	r2, #0
 800176e:	494f      	ldr	r1, [pc, #316]	; (80018ac <HAL_I2C_Mem_Read+0x448>)
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fa1b 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e091      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017f4:	e042      	b.n	800187c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fb2e 	bl	8001e5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e04c      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b04      	cmp	r3, #4
 8001848:	d118      	bne.n	800187c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	2b00      	cmp	r3, #0
 8001882:	f47f aec2 	bne.w	800160a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	00010004 	.word	0x00010004

080018b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
 80018c2:	460b      	mov	r3, r1
 80018c4:	813b      	strh	r3, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	6a3b      	ldr	r3, [r7, #32]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f960 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001900:	d103      	bne.n	800190a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e05f      	b.n	80019ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800190e:	897b      	ldrh	r3, [r7, #10]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800191c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	492d      	ldr	r1, [pc, #180]	; (80019d8 <I2C_RequestMemoryWrite+0x128>)
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f998 	bl	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e04c      	b.n	80019ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194c:	6a39      	ldr	r1, [r7, #32]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fa02 	bl	8001d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2b04      	cmp	r3, #4
 8001960:	d107      	bne.n	8001972 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001970:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e02b      	b.n	80019ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800197c:	893b      	ldrh	r3, [r7, #8]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	e021      	b.n	80019cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001988:	893b      	ldrh	r3, [r7, #8]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	b2da      	uxtb	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f9dc 	bl	8001d58 <I2C_WaitOnTXEFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d107      	bne.n	80019be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e005      	b.n	80019ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019c2:	893b      	ldrh	r3, [r7, #8]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	00010002 	.word	0x00010002

080019dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	817b      	strh	r3, [r7, #10]
 80019ee:	460b      	mov	r3, r1
 80019f0:	813b      	strh	r3, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f8c2 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00d      	beq.n	8001a4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d103      	bne.n	8001a46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0aa      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a4a:	897b      	ldrh	r3, [r7, #10]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	6a3a      	ldr	r2, [r7, #32]
 8001a5e:	4952      	ldr	r1, [pc, #328]	; (8001ba8 <I2C_RequestMemoryRead+0x1cc>)
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f8fa 	bl	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e097      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	6a39      	ldr	r1, [r7, #32]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f964 	bl	8001d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00d      	beq.n	8001ab2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d107      	bne.n	8001aae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e076      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab8:	893b      	ldrh	r3, [r7, #8]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	e021      	b.n	8001b08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ac4:	893b      	ldrh	r3, [r7, #8]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f93e 	bl	8001d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00d      	beq.n	8001afe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d107      	bne.n	8001afa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e050      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001afe:	893b      	ldrh	r3, [r7, #8]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	6a39      	ldr	r1, [r7, #32]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f923 	bl	8001d58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d107      	bne.n	8001b30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e035      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f82b 	bl	8001bac <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00d      	beq.n	8001b78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b6a:	d103      	bne.n	8001b74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e013      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	6a3a      	ldr	r2, [r7, #32]
 8001b8c:	4906      	ldr	r1, [pc, #24]	; (8001ba8 <I2C_RequestMemoryRead+0x1cc>)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f863 	bl	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	00010002 	.word	0x00010002

08001bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bbc:	e025      	b.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d021      	beq.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7fe ff5b 	bl	8000a80 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d116      	bne.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e023      	b.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10d      	bne.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	e00c      	b.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d0b6      	beq.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c68:	e051      	b.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d123      	bne.n	8001cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f043 0204 	orr.w	r2, r3, #4
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e046      	b.n	8001d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d021      	beq.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cca:	f7fe fed9 	bl	8000a80 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d116      	bne.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f043 0220 	orr.w	r2, r3, #32
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e020      	b.n	8001d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d10c      	bne.n	8001d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4013      	ands	r3, r2
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	e00b      	b.n	8001d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d18d      	bne.n	8001c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d64:	e02d      	b.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f8ce 	bl	8001f08 <I2C_IsAcknowledgeFailed>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e02d      	b.n	8001dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d021      	beq.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7e:	f7fe fe7f 	bl	8000a80 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d302      	bcc.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d116      	bne.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f043 0220 	orr.w	r2, r3, #32
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e007      	b.n	8001dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d1ca      	bne.n	8001d66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001de6:	e02d      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f88d 	bl	8001f08 <I2C_IsAcknowledgeFailed>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e02d      	b.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	d021      	beq.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e00:	f7fe fe3e 	bl	8000a80 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d302      	bcc.n	8001e16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e007      	b.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d1ca      	bne.n	8001de8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e68:	e042      	b.n	8001ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 0310 	and.w	r3, r3, #16
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d119      	bne.n	8001eac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0210 	mvn.w	r2, #16
 8001e80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e029      	b.n	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eac:	f7fe fde8 	bl	8000a80 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d302      	bcc.n	8001ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f043 0220 	orr.w	r2, r3, #32
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e007      	b.n	8001f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d1b5      	bne.n	8001e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1e:	d11b      	bne.n	8001f58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f043 0204 	orr.w	r2, r3, #4
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e267      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00c      	beq.n	8001fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4b7e      	ldr	r3, [pc, #504]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05b      	beq.n	8002070 <HAL_RCC_OscConfig+0x108>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e242      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x74>
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a75      	ldr	r2, [pc, #468]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b70      	ldr	r3, [pc, #448]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6f      	ldr	r2, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6c      	ldr	r2, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8002000:	4b69      	ldr	r3, [pc, #420]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a68      	ldr	r2, [pc, #416]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a65      	ldr	r2, [pc, #404]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7fe fd2e 	bl	8000a80 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe fd2a 	bl	8000a80 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e207      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fd1a 	bl	8000a80 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe fd16 	bl	8000a80 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1f3      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0xe8>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d063      	beq.n	8002146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002092:	2b08      	cmp	r3, #8
 8002094:	d11c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b44      	ldr	r3, [pc, #272]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e1c7      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4937      	ldr	r1, [pc, #220]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	e03a      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_OscConfig+0x244>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe fccf 	bl	8000a80 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e6:	f7fe fccb 	bl	8000a80 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e1a8      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b28      	ldr	r3, [pc, #160]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4925      	ldr	r1, [pc, #148]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x244>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fcae 	bl	8000a80 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002128:	f7fe fcaa 	bl	8000a80 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e187      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d036      	beq.n	80021c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <HAL_RCC_OscConfig+0x248>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7fe fc8e 	bl	8000a80 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe fc8a 	bl	8000a80 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e167      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_OscConfig+0x240>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
 8002186:	e01b      	b.n	80021c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x248>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe fc77 	bl	8000a80 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	e00e      	b.n	80021b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fc73 	bl	8000a80 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d907      	bls.n	80021b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e150      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
 80021b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ea      	bne.n	8002196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8097 	beq.w	80022fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d2:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b7d      	ldr	r3, [pc, #500]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a7c      	ldr	r2, [pc, #496]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b77      	ldr	r3, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220a:	4b74      	ldr	r3, [pc, #464]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a73      	ldr	r2, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7fe fc33 	bl	8000a80 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7fe fc2f 	bl	8000a80 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e10c      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x474>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x2ea>
 8002244:	4b64      	ldr	r3, [pc, #400]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x324>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b05      	cmp	r3, #5
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x30c>
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a5e      	ldr	r2, [pc, #376]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a5b      	ldr	r2, [pc, #364]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0x324>
 8002274:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	4a57      	ldr	r2, [pc, #348]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6713      	str	r3, [r2, #112]	; 0x70
 8002280:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a54      	ldr	r2, [pc, #336]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002294:	f7fe fbf4 	bl	8000a80 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7fe fbf0 	bl	8000a80 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0cb      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b2:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ee      	beq.n	800229c <HAL_RCC_OscConfig+0x334>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7fe fbde 	bl	8000a80 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe fbda 	bl	8000a80 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0b5      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022de:	4b3e      	ldr	r3, [pc, #248]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ee      	bne.n	80022c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a38      	ldr	r2, [pc, #224]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a1 	beq.w	8002448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d05c      	beq.n	80023cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d141      	bne.n	800239e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_RCC_OscConfig+0x478>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fbae 	bl	8000a80 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fbaa 	bl	8000a80 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e087      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	3b01      	subs	r3, #1
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	061b      	lsls	r3, r3, #24
 800236a:	491b      	ldr	r1, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x478>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fb83 	bl	8000a80 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fb7f 	bl	8000a80 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e05c      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x416>
 800239c:	e054      	b.n	8002448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0x478>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fb6c 	bl	8000a80 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fb68 	bl	8000a80 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e045      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_OscConfig+0x470>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e038      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_RCC_OscConfig+0x4ec>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d028      	beq.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d121      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d11a      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002414:	4013      	ands	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800241a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800241c:	4293      	cmp	r3, r2
 800241e:	d111      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	3b01      	subs	r3, #1
 800242e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0cc      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d90c      	bls.n	8002494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b65      	ldr	r3, [pc, #404]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d044      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d119      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e067      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 0203 	bic.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4934      	ldr	r1, [pc, #208]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7fe fa9a 	bl	8000a80 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7fe fa96 	bl	8000a80 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e04f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 020c 	and.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1eb      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d20c      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe f9fa 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00
 8002614:	40023800 	.word	0x40023800
 8002618:	08003e6c 	.word	0x08003e6c
 800261c:	20000000 	.word	0x20000000
 8002620:	20000004 	.word	0x20000004

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b094      	sub	sp, #80	; 0x50
 800262a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	647b      	str	r3, [r7, #68]	; 0x44
 8002630:	2300      	movs	r3, #0
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002634:	2300      	movs	r3, #0
 8002636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263c:	4b79      	ldr	r3, [pc, #484]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d00d      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x40>
 8002648:	2b08      	cmp	r3, #8
 800264a:	f200 80e1 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x3a>
 8002656:	e0db      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b73      	ldr	r3, [pc, #460]	; (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 800265a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800265c:	e0db      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265e:	4b73      	ldr	r3, [pc, #460]	; (800282c <HAL_RCC_GetSysClockFreq+0x208>)
 8002660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002662:	e0d8      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266e:	4b6d      	ldr	r3, [pc, #436]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	63bb      	str	r3, [r7, #56]	; 0x38
 8002684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
 8002692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	6139      	str	r1, [r7, #16]
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c8:	4659      	mov	r1, fp
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4651      	mov	r1, sl
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4651      	mov	r1, sl
 80026d8:	ebb2 0801 	subs.w	r8, r2, r1
 80026dc:	4659      	mov	r1, fp
 80026de:	eb63 0901 	sbc.w	r9, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f6:	4690      	mov	r8, r2
 80026f8:	4699      	mov	r9, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb18 0303 	adds.w	r3, r8, r3
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	462b      	mov	r3, r5
 8002704:	eb49 0303 	adc.w	r3, r9, r3
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002716:	4629      	mov	r1, r5
 8002718:	024b      	lsls	r3, r1, #9
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002720:	4621      	mov	r1, r4
 8002722:	024a      	lsls	r2, r1, #9
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800272a:	2200      	movs	r2, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 800272e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002734:	f7fd fd56 	bl	80001e4 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	e058      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2200      	movs	r2, #0
 800274a:	4618      	mov	r0, r3
 800274c:	4611      	mov	r1, r2
 800274e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
 8002758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	f04f 0000 	mov.w	r0, #0
 8002764:	f04f 0100 	mov.w	r1, #0
 8002768:	0159      	lsls	r1, r3, #5
 800276a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276e:	0150      	lsls	r0, r2, #5
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4641      	mov	r1, r8
 8002776:	ebb2 0a01 	subs.w	sl, r2, r1
 800277a:	4649      	mov	r1, r9
 800277c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800278c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002794:	ebb2 040a 	subs.w	r4, r2, sl
 8002798:	eb63 050b 	sbc.w	r5, r3, fp
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	00eb      	lsls	r3, r5, #3
 80027a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027aa:	00e2      	lsls	r2, r4, #3
 80027ac:	4614      	mov	r4, r2
 80027ae:	461d      	mov	r5, r3
 80027b0:	4643      	mov	r3, r8
 80027b2:	18e3      	adds	r3, r4, r3
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	464b      	mov	r3, r9
 80027b8:	eb45 0303 	adc.w	r3, r5, r3
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	2200      	movs	r2, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	61fa      	str	r2, [r7, #28]
 80027e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e8:	f7fd fcfc 	bl	80001e4 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetSysClockFreq+0x204>)
 8002812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002818:	4618      	mov	r0, r3
 800281a:	3750      	adds	r7, #80	; 0x50
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCC_GetHCLKFreq+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff0 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0a9b      	lsrs	r3, r3, #10
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	08003e7c 	.word	0x08003e7c

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffdc 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0b5b      	lsrs	r3, r3, #13
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08003e7c 	.word	0x08003e7c

08002898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e03f      	b.n	800292a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe f806 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f929 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b08a      	sub	sp, #40	; 0x28
 8002936:	af02      	add	r7, sp, #8
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	d17c      	bne.n	8002a4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_UART_Transmit+0x2c>
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e075      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_UART_Transmit+0x3e>
 800296c:	2302      	movs	r3, #2
 800296e:	e06e      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2221      	movs	r2, #33	; 0x21
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002986:	f7fe f87b 	bl	8000a80 <HAL_GetTick>
 800298a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	88fa      	ldrh	r2, [r7, #6]
 8002990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a0:	d108      	bne.n	80029b4 <HAL_UART_Transmit+0x82>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e003      	b.n	80029bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029c4:	e02a      	b.n	8002a1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2180      	movs	r1, #128	; 0x80
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f840 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e036      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	3302      	adds	r3, #2
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	e007      	b.n	8002a0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1cf      	bne.n	80029c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f810 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e006      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e000      	b.n	8002a4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a4c:	2302      	movs	r3, #2
  }
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b090      	sub	sp, #64	; 0x40
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a66:	e050      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d04c      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a76:	f7fe f803 	bl	8000a80 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d241      	bcs.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ada:	623a      	str	r2, [r7, #32]
 8002adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	69f9      	ldr	r1, [r7, #28]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e5      	bne.n	8002aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e00f      	b.n	8002b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d09f      	beq.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3740      	adds	r7, #64	; 0x40
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0c0      	sub	sp, #256	; 0x100
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	ea40 0301 	orr.w	r3, r0, r1
 8002b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b8c:	f021 010c 	bic.w	r1, r1, #12
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bae:	6999      	ldr	r1, [r3, #24]
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	ea40 0301 	orr.w	r3, r0, r1
 8002bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b8f      	ldr	r3, [pc, #572]	; (8002e00 <UART_SetConfig+0x2cc>)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d005      	beq.n	8002bd4 <UART_SetConfig+0xa0>
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b8d      	ldr	r3, [pc, #564]	; (8002e04 <UART_SetConfig+0x2d0>)
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d104      	bne.n	8002bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff fe4c 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8002bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002bdc:	e003      	b.n	8002be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff fe33 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8002be2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf0:	f040 810c 	bne.w	8002e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c06:	4622      	mov	r2, r4
 8002c08:	462b      	mov	r3, r5
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c16:	4621      	mov	r1, r4
 8002c18:	eb12 0801 	adds.w	r8, r2, r1
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb43 0901 	adc.w	r9, r3, r1
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c36:	4690      	mov	r8, r2
 8002c38:	4699      	mov	r9, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	eb18 0303 	adds.w	r3, r8, r3
 8002c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c44:	462b      	mov	r3, r5
 8002c46:	eb49 0303 	adc.w	r3, r9, r3
 8002c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c62:	460b      	mov	r3, r1
 8002c64:	18db      	adds	r3, r3, r3
 8002c66:	653b      	str	r3, [r7, #80]	; 0x50
 8002c68:	4613      	mov	r3, r2
 8002c6a:	eb42 0303 	adc.w	r3, r2, r3
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c78:	f7fd fab4 	bl	80001e4 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011c      	lsls	r4, r3, #4
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cac:	4641      	mov	r1, r8
 8002cae:	eb12 0a01 	adds.w	sl, r2, r1
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ccc:	4692      	mov	sl, r2
 8002cce:	469b      	mov	fp, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	18db      	adds	r3, r3, r3
 8002cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cfe:	4613      	mov	r3, r2
 8002d00:	eb42 0303 	adc.w	r3, r2, r3
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
 8002d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d0e:	f7fd fa69 	bl	80001e4 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2264      	movs	r2, #100	; 0x64
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	1acb      	subs	r3, r1, r3
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002d30:	fba3 2302 	umull	r2, r3, r3, r2
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6339      	str	r1, [r7, #48]	; 0x30
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d94:	464b      	mov	r3, r9
 8002d96:	460a      	mov	r2, r1
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002db4:	460b      	mov	r3, r1
 8002db6:	18db      	adds	r3, r3, r3
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	4613      	mov	r3, r2
 8002dbc:	eb42 0303 	adc.w	r3, r2, r3
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dca:	f7fd fa0b 	bl	80001e4 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3332      	adds	r3, #50	; 0x32
 8002de6:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <UART_SetConfig+0x2d4>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f003 0207 	and.w	r2, r3, #7
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4422      	add	r2, r4
 8002dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dfc:	e106      	b.n	800300c <UART_SetConfig+0x4d8>
 8002dfe:	bf00      	nop
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e1e:	4642      	mov	r2, r8
 8002e20:	464b      	mov	r3, r9
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	6239      	str	r1, [r7, #32]
 8002e26:	415b      	adcs	r3, r3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e2e:	4641      	mov	r1, r8
 8002e30:	1854      	adds	r4, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb43 0501 	adc.w	r5, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	00eb      	lsls	r3, r5, #3
 8002e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e46:	00e2      	lsls	r2, r4, #3
 8002e48:	4614      	mov	r4, r2
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	18e3      	adds	r3, r4, r3
 8002e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e54:	464b      	mov	r3, r9
 8002e56:	eb45 0303 	adc.w	r3, r5, r3
 8002e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	008b      	lsls	r3, r1, #2
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e84:	4621      	mov	r1, r4
 8002e86:	008a      	lsls	r2, r1, #2
 8002e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e8c:	f7fd f9aa 	bl	80001e4 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b60      	ldr	r3, [pc, #384]	; (8003018 <UART_SetConfig+0x4e4>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011c      	lsls	r4, r3, #4
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	61b9      	str	r1, [r7, #24]
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	1851      	adds	r1, r2, r1
 8002ec4:	6139      	str	r1, [r7, #16]
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	414b      	adcs	r3, r1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed8:	4659      	mov	r1, fp
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4642      	mov	r2, r8
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f18:	4649      	mov	r1, r9
 8002f1a:	008b      	lsls	r3, r1, #2
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f22:	4641      	mov	r1, r8
 8002f24:	008a      	lsls	r2, r1, #2
 8002f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f2a:	f7fd f95b 	bl	80001e4 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <UART_SetConfig+0x4e4>)
 8002f36:	fba3 2301 	umull	r2, r3, r3, r1
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2264      	movs	r2, #100	; 0x64
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	1acb      	subs	r3, r1, r3
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	3332      	adds	r3, #50	; 0x32
 8002f48:	4a33      	ldr	r2, [pc, #204]	; (8003018 <UART_SetConfig+0x4e4>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f54:	441c      	add	r4, r3
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8002f5e:	677a      	str	r2, [r7, #116]	; 0x74
 8002f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f74:	4641      	mov	r1, r8
 8002f76:	1851      	adds	r1, r2, r1
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4651      	mov	r1, sl
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	460a      	mov	r2, r1
 8002faa:	eb42 0303 	adc.w	r3, r2, r3
 8002fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fba:	667a      	str	r2, [r7, #100]	; 0x64
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fc8:	4649      	mov	r1, r9
 8002fca:	008b      	lsls	r3, r1, #2
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	008a      	lsls	r2, r1, #2
 8002fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fda:	f7fd f903 	bl	80001e4 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <UART_SetConfig+0x4e4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a08      	ldr	r2, [pc, #32]	; (8003018 <UART_SetConfig+0x4e4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4422      	add	r2, r4
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003012:	46bd      	mov	sp, r7
 8003014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003018:	51eb851f 	.word	0x51eb851f

0800301c <lsm6dsr_read_reg>:
  *
  */
int32_t __weak lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	460b      	mov	r3, r1
 800302a:	72fb      	strb	r3, [r7, #11]
 800302c:	4613      	mov	r3, r2
 800302e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685c      	ldr	r4, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68d8      	ldr	r0, [r3, #12]
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	7af9      	ldrb	r1, [r7, #11]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	47a0      	blx	r4
 8003040:	6178      	str	r0, [r7, #20]

  return ret;
 8003042:	697b      	ldr	r3, [r7, #20]
}
 8003044:	4618      	mov	r0, r3
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}

0800304c <lsm6dsr_write_reg>:
  *
  */
int32_t __weak lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	461a      	mov	r2, r3
 8003058:	460b      	mov	r3, r1
 800305a:	72fb      	strb	r3, [r7, #11]
 800305c:	4613      	mov	r3, r2
 800305e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681c      	ldr	r4, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	68d8      	ldr	r0, [r3, #12]
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	7af9      	ldrb	r1, [r7, #11]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	47a0      	blx	r4
 8003070:	6178      	str	r0, [r7, #20]

  return ret;
 8003072:	697b      	ldr	r3, [r7, #20]
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}

0800307c <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003092:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80030a8 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8003096:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	3d79db23 	.word	0x3d79db23

080030ac <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80030d8 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80030c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	428c0000 	.word	0x428c0000

080030dc <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80030e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030f2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003110 <lsm6dsr_from_lsb_to_celsius+0x34>
 80030f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80030fe:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8003102:	eeb0 0a67 	vmov.f32	s0, s15
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	43800000 	.word	0x43800000

08003114 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003120:	f107 0208 	add.w	r2, r7, #8
 8003124:	2301      	movs	r3, #1
 8003126:	2110      	movs	r1, #16
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff77 	bl	800301c <lsm6dsr_read_reg>
 800312e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	b2da      	uxtb	r2, r3
 800313e:	7a3b      	ldrb	r3, [r7, #8]
 8003140:	f362 0383 	bfi	r3, r2, #2, #2
 8003144:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8003146:	f107 0208 	add.w	r2, r7, #8
 800314a:	2301      	movs	r3, #1
 800314c:	2110      	movs	r1, #16
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff7c 	bl	800304c <lsm6dsr_write_reg>
 8003154:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	4619      	mov	r1, r3
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fc50 	bl	8003a1c <lsm6dsr_fsm_enable_get>
 800317c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f040 80c4 	bne.w	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003186:	7b3b      	ldrb	r3, [r7, #12]
 8003188:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800318c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800318e:	7b3b      	ldrb	r3, [r7, #12]
 8003190:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003194:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003196:	4313      	orrs	r3, r2
 8003198:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800319a:	7b3b      	ldrb	r3, [r7, #12]
 800319c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80031a6:	7b3b      	ldrb	r3, [r7, #12]
 80031a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80031ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80031b2:	7b3b      	ldrb	r3, [r7, #12]
 80031b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80031b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80031ba:	4313      	orrs	r3, r2
 80031bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80031be:	7b3b      	ldrb	r3, [r7, #12]
 80031c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80031c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80031ca:	7b3b      	ldrb	r3, [r7, #12]
 80031cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80031d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80031d2:	4313      	orrs	r3, r2
 80031d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80031d6:	7b3b      	ldrb	r3, [r7, #12]
 80031d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80031dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80031de:	4313      	orrs	r3, r2
 80031e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80031e2:	7b7b      	ldrb	r3, [r7, #13]
 80031e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80031ea:	4313      	orrs	r3, r2
 80031ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80031ee:	7b7b      	ldrb	r3, [r7, #13]
 80031f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80031fa:	7b7b      	ldrb	r3, [r7, #13]
 80031fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003200:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003202:	4313      	orrs	r3, r2
 8003204:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003206:	7b7b      	ldrb	r3, [r7, #13]
 8003208:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800320c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800320e:	4313      	orrs	r3, r2
 8003210:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003218:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800321a:	4313      	orrs	r3, r2
 800321c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800321e:	7b7b      	ldrb	r3, [r7, #13]
 8003220:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003226:	4313      	orrs	r3, r2
 8003228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800322a:	7b7b      	ldrb	r3, [r7, #13]
 800322c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003232:	4313      	orrs	r3, r2
 8003234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003236:	7b7b      	ldrb	r3, [r7, #13]
 8003238:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800323c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800323e:	4313      	orrs	r3, r2
 8003240:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003242:	2b01      	cmp	r3, #1
 8003244:	d163      	bne.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8003246:	f107 030b 	add.w	r3, r7, #11
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fc11 	bl	8003a74 <lsm6dsr_fsm_data_rate_get>
 8003252:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d159      	bne.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d853      	bhi.n	8003308 <lsm6dsr_xl_data_rate_set+0x1a8>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <lsm6dsr_xl_data_rate_set+0x108>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	0800328b 	.word	0x0800328b
 8003270:	080032a9 	.word	0x080032a9
 8003274:	080032d3 	.word	0x080032d3
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003282:	e044      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	75fb      	strb	r3, [r7, #23]
            break;
 8003288:	e041      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8003290:	2302      	movs	r3, #2
 8003292:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8003294:	e03b      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d102      	bne.n	80032a2 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800329c:	2302      	movs	r3, #2
 800329e:	75fb      	strb	r3, [r7, #23]
            break;
 80032a0:	e035      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	75fb      	strb	r3, [r7, #23]
            break;
 80032a6:	e032      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80032ae:	2303      	movs	r3, #3
 80032b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80032b2:	e02c      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80032ba:	2303      	movs	r3, #3
 80032bc:	75fb      	strb	r3, [r7, #23]
            break;
 80032be:	e026      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d102      	bne.n	80032cc <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80032c6:	2303      	movs	r3, #3
 80032c8:	75fb      	strb	r3, [r7, #23]
            break;
 80032ca:	e020      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	75fb      	strb	r3, [r7, #23]
            break;
 80032d0:	e01d      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80032d8:	2304      	movs	r3, #4
 80032da:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80032dc:	e017      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d102      	bne.n	80032ea <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80032e4:	2304      	movs	r3, #4
 80032e6:	75fb      	strb	r3, [r7, #23]
            break;
 80032e8:	e011      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d102      	bne.n	80032f6 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80032f0:	2304      	movs	r3, #4
 80032f2:	75fb      	strb	r3, [r7, #23]
            break;
 80032f4:	e00b      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d102      	bne.n	8003302 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80032fc:	2304      	movs	r3, #4
 80032fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003300:	e005      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>
              odr_xl = val;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	75fb      	strb	r3, [r7, #23]
            break;
 8003306:	e002      	b.n	800330e <lsm6dsr_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	75fb      	strb	r3, [r7, #23]
            break;
 800330c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d107      	bne.n	8003324 <lsm6dsr_xl_data_rate_set+0x1c4>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003314:	f107 0208 	add.w	r2, r7, #8
 8003318:	2301      	movs	r3, #1
 800331a:	2110      	movs	r1, #16
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff fe7d 	bl	800301c <lsm6dsr_read_reg>
 8003322:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <lsm6dsr_xl_data_rate_set+0x1ea>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	b2da      	uxtb	r2, r3
 8003332:	7a3b      	ldrb	r3, [r7, #8]
 8003334:	f362 1307 	bfi	r3, r2, #4, #4
 8003338:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800333a:	f107 0208 	add.w	r2, r7, #8
 800333e:	2301      	movs	r3, #1
 8003340:	2110      	movs	r1, #16
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fe82 	bl	800304c <lsm6dsr_write_reg>
 8003348:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800334a:	693b      	ldr	r3, [r7, #16]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003360:	f107 0208 	add.w	r2, r7, #8
 8003364:	2301      	movs	r3, #1
 8003366:	2111      	movs	r1, #17
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fe57 	bl	800301c <lsm6dsr_read_reg>
 800336e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10f      	bne.n	8003396 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	7a3b      	ldrb	r3, [r7, #8]
 8003380:	f362 0303 	bfi	r3, r2, #0, #4
 8003384:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003386:	f107 0208 	add.w	r2, r7, #8
 800338a:	2301      	movs	r3, #1
 800338c:	2111      	movs	r1, #17
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fe5c 	bl	800304c <lsm6dsr_write_reg>
 8003394:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fb30 	bl	8003a1c <lsm6dsr_fsm_enable_get>
 80033bc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 80c4 	bne.w	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80033c6:	7b3b      	ldrb	r3, [r7, #12]
 80033c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80033ce:	7b3b      	ldrb	r3, [r7, #12]
 80033d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033d4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80033da:	7b3b      	ldrb	r3, [r7, #12]
 80033dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80033e6:	7b3b      	ldrb	r3, [r7, #12]
 80033e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80033f2:	7b3b      	ldrb	r3, [r7, #12]
 80033f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80033fe:	7b3b      	ldrb	r3, [r7, #12]
 8003400:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8003406:	4313      	orrs	r3, r2
 8003408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800340a:	7b3b      	ldrb	r3, [r7, #12]
 800340c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003410:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8003412:	4313      	orrs	r3, r2
 8003414:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8003416:	7b3b      	ldrb	r3, [r7, #12]
 8003418:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800341c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800341e:	4313      	orrs	r3, r2
 8003420:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003422:	7b7b      	ldrb	r3, [r7, #13]
 8003424:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003428:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800342a:	4313      	orrs	r3, r2
 800342c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800342e:	7b7b      	ldrb	r3, [r7, #13]
 8003430:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003434:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8003436:	4313      	orrs	r3, r2
 8003438:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800343a:	7b7b      	ldrb	r3, [r7, #13]
 800343c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003440:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8003442:	4313      	orrs	r3, r2
 8003444:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8003446:	7b7b      	ldrb	r3, [r7, #13]
 8003448:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800344c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800344e:	4313      	orrs	r3, r2
 8003450:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003452:	7b7b      	ldrb	r3, [r7, #13]
 8003454:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003458:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800345a:	4313      	orrs	r3, r2
 800345c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800345e:	7b7b      	ldrb	r3, [r7, #13]
 8003460:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003464:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8003466:	4313      	orrs	r3, r2
 8003468:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800346a:	7b7b      	ldrb	r3, [r7, #13]
 800346c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003470:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8003472:	4313      	orrs	r3, r2
 8003474:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8003476:	7b7b      	ldrb	r3, [r7, #13]
 8003478:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800347c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800347e:	4313      	orrs	r3, r2
 8003480:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8003482:	2b01      	cmp	r3, #1
 8003484:	d163      	bne.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8003486:	f107 030b 	add.w	r3, r7, #11
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 faf1 	bl	8003a74 <lsm6dsr_fsm_data_rate_get>
 8003492:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d159      	bne.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d853      	bhi.n	8003548 <lsm6dsr_gy_data_rate_set+0x1a8>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <lsm6dsr_gy_data_rate_set+0x108>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034cb 	.word	0x080034cb
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	08003513 	.word	0x08003513
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80034c2:	e044      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	75fb      	strb	r3, [r7, #23]
            break;
 80034c8:	e041      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80034d0:	2302      	movs	r3, #2
 80034d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80034d4:	e03b      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d102      	bne.n	80034e2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 80034dc:	2302      	movs	r3, #2
 80034de:	75fb      	strb	r3, [r7, #23]
            break;
 80034e0:	e035      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	75fb      	strb	r3, [r7, #23]
            break;
 80034e6:	e032      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80034ee:	2303      	movs	r3, #3
 80034f0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80034f2:	e02c      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 80034fa:	2303      	movs	r3, #3
 80034fc:	75fb      	strb	r3, [r7, #23]
            break;
 80034fe:	e026      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d102      	bne.n	800350c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8003506:	2303      	movs	r3, #3
 8003508:	75fb      	strb	r3, [r7, #23]
            break;
 800350a:	e020      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	75fb      	strb	r3, [r7, #23]
            break;
 8003510:	e01d      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003518:	2304      	movs	r3, #4
 800351a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800351c:	e017      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003524:	2304      	movs	r3, #4
 8003526:	75fb      	strb	r3, [r7, #23]
            break;
 8003528:	e011      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d102      	bne.n	8003536 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8003530:	2304      	movs	r3, #4
 8003532:	75fb      	strb	r3, [r7, #23]
            break;
 8003534:	e00b      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d102      	bne.n	8003542 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800353c:	2304      	movs	r3, #4
 800353e:	75fb      	strb	r3, [r7, #23]
            break;
 8003540:	e005      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>
              odr_gy = val;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	75fb      	strb	r3, [r7, #23]
            break;
 8003546:	e002      	b.n	800354e <lsm6dsr_gy_data_rate_set+0x1ae>

          default:
            odr_gy = val;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	75fb      	strb	r3, [r7, #23]
            break;
 800354c:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <lsm6dsr_gy_data_rate_set+0x1c4>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003554:	f107 0208 	add.w	r2, r7, #8
 8003558:	2301      	movs	r3, #1
 800355a:	2111      	movs	r1, #17
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fd5d 	bl	800301c <lsm6dsr_read_reg>
 8003562:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <lsm6dsr_gy_data_rate_set+0x1ea>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	b2da      	uxtb	r2, r3
 8003572:	7a3b      	ldrb	r3, [r7, #8]
 8003574:	f362 1307 	bfi	r3, r2, #4, #4
 8003578:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800357a:	f107 0208 	add.w	r2, r7, #8
 800357e:	2301      	movs	r3, #1
 8003580:	2111      	movs	r1, #17
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fd62 	bl	800304c <lsm6dsr_write_reg>
 8003588:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800358a:	693b      	ldr	r3, [r7, #16]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80035a0:	f107 0208 	add.w	r2, r7, #8
 80035a4:	2301      	movs	r3, #1
 80035a6:	2112      	movs	r1, #18
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fd37 	bl	800301c <lsm6dsr_read_reg>
 80035ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	7a3b      	ldrb	r3, [r7, #8]
 80035c0:	f362 1386 	bfi	r3, r2, #6, #1
 80035c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80035c6:	f107 0208 	add.w	r2, r7, #8
 80035ca:	2301      	movs	r3, #1
 80035cc:	2112      	movs	r1, #18
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fd3c 	bl	800304c <lsm6dsr_write_reg>
 80035d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80035ea:	f107 0208 	add.w	r2, r7, #8
 80035ee:	2301      	movs	r3, #1
 80035f0:	211e      	movs	r1, #30
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fd12 	bl	800301c <lsm6dsr_read_reg>
 80035f8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80035fa:	7a3b      	ldrb	r3, [r7, #8]
 80035fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	701a      	strb	r2, [r3, #0]

  return ret;
 8003608:	68fb      	ldr	r3, [r7, #12]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800361c:	f107 0208 	add.w	r2, r7, #8
 8003620:	2301      	movs	r3, #1
 8003622:	211e      	movs	r1, #30
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fcf9 	bl	800301c <lsm6dsr_read_reg>
 800362a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 800362c:	7a3b      	ldrb	r3, [r7, #8]
 800362e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	701a      	strb	r2, [r3, #0]

  return ret;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800364e:	f107 0208 	add.w	r2, r7, #8
 8003652:	2301      	movs	r3, #1
 8003654:	211e      	movs	r1, #30
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fce0 	bl	800301c <lsm6dsr_read_reg>
 800365c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 800365e:	7a3b      	ldrb	r3, [r7, #8]
 8003660:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	701a      	strb	r2, [r3, #0]

  return ret;
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8003680:	f107 0208 	add.w	r2, r7, #8
 8003684:	2302      	movs	r3, #2
 8003686:	2120      	movs	r1, #32
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fcc7 	bl	800301c <lsm6dsr_read_reg>
 800368e:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8003690:	7a7b      	ldrb	r3, [r7, #9]
 8003692:	b21a      	sxth	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	7a3b      	ldrb	r3, [r7, #8]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b21a      	sxth	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 80036c6:	f107 020c 	add.w	r2, r7, #12
 80036ca:	2306      	movs	r3, #6
 80036cc:	2122      	movs	r1, #34	; 0x22
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fca4 	bl	800301c <lsm6dsr_read_reg>
 80036d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80036d6:	7b7b      	ldrb	r3, [r7, #13]
 80036d8:	b21a      	sxth	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	7b3b      	ldrb	r3, [r7, #12]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b21a      	sxth	r2, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	3302      	adds	r3, #2
 80036fe:	b212      	sxth	r2, r2
 8003700:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	3302      	adds	r3, #2
 8003706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370a:	b29b      	uxth	r3, r3
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	b29a      	uxth	r2, r3
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	b29b      	uxth	r3, r3
 8003714:	4413      	add	r3, r2
 8003716:	b29a      	uxth	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	3302      	adds	r3, #2
 800371c:	b212      	sxth	r2, r2
 800371e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003720:	7c7a      	ldrb	r2, [r7, #17]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	3304      	adds	r3, #4
 8003726:	b212      	sxth	r2, r2
 8003728:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3304      	adds	r3, #4
 800372e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003732:	b29b      	uxth	r3, r3
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	b29a      	uxth	r2, r3
 8003738:	7c3b      	ldrb	r3, [r7, #16]
 800373a:	b29b      	uxth	r3, r3
 800373c:	4413      	add	r3, r2
 800373e:	b29a      	uxth	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	3304      	adds	r3, #4
 8003744:	b212      	sxth	r2, r2
 8003746:	801a      	strh	r2, [r3, #0]

  return ret;
 8003748:	697b      	ldr	r3, [r7, #20]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800375c:	f107 020c 	add.w	r2, r7, #12
 8003760:	2306      	movs	r3, #6
 8003762:	2128      	movs	r1, #40	; 0x28
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fc59 	bl	800301c <lsm6dsr_read_reg>
 800376a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800376c:	7b7b      	ldrb	r3, [r7, #13]
 800376e:	b21a      	sxth	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377a:	b29b      	uxth	r3, r3
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	b29a      	uxth	r2, r3
 8003780:	7b3b      	ldrb	r3, [r7, #12]
 8003782:	b29b      	uxth	r3, r3
 8003784:	4413      	add	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	b21a      	sxth	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	3302      	adds	r3, #2
 8003794:	b212      	sxth	r2, r2
 8003796:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	3302      	adds	r3, #2
 800379c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	7bbb      	ldrb	r3, [r7, #14]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3302      	adds	r3, #2
 80037b2:	b212      	sxth	r2, r2
 80037b4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80037b6:	7c7a      	ldrb	r2, [r7, #17]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	3304      	adds	r3, #4
 80037bc:	b212      	sxth	r2, r2
 80037be:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	3304      	adds	r3, #4
 80037c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	7c3b      	ldrb	r3, [r7, #16]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	b212      	sxth	r2, r2
 80037dc:	801a      	strh	r2, [r3, #0]

  return ret;
 80037de:	697b      	ldr	r3, [r7, #20]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80037f4:	f107 0208 	add.w	r2, r7, #8
 80037f8:	2301      	movs	r3, #1
 80037fa:	2101      	movs	r1, #1
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fc0d 	bl	800301c <lsm6dsr_read_reg>
 8003802:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	b2da      	uxtb	r2, r3
 8003812:	7a3b      	ldrb	r3, [r7, #8]
 8003814:	f362 1387 	bfi	r3, r2, #6, #2
 8003818:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800381a:	f107 0208 	add.w	r2, r7, #8
 800381e:	2301      	movs	r3, #1
 8003820:	2101      	movs	r1, #1
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fc12 	bl	800304c <lsm6dsr_write_reg>
 8003828:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800382a:	68fb      	ldr	r3, [r7, #12]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800383e:	2301      	movs	r3, #1
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	210f      	movs	r1, #15
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fbe9 	bl	800301c <lsm6dsr_read_reg>
 800384a:	60f8      	str	r0, [r7, #12]

  return ret;
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003862:	f107 0208 	add.w	r2, r7, #8
 8003866:	2301      	movs	r3, #1
 8003868:	2112      	movs	r1, #18
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fbd6 	bl	800301c <lsm6dsr_read_reg>
 8003870:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10f      	bne.n	8003898 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	7a3b      	ldrb	r3, [r7, #8]
 8003882:	f362 0300 	bfi	r3, r2, #0, #1
 8003886:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003888:	f107 0208 	add.w	r2, r7, #8
 800388c:	2301      	movs	r3, #1
 800388e:	2112      	movs	r1, #18
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fbdb 	bl	800304c <lsm6dsr_write_reg>
 8003896:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80038ac:	f107 0208 	add.w	r2, r7, #8
 80038b0:	2301      	movs	r3, #1
 80038b2:	2112      	movs	r1, #18
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fbb1 	bl	800301c <lsm6dsr_read_reg>
 80038ba:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80038bc:	7a3b      	ldrb	r3, [r7, #8]
 80038be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	701a      	strb	r2, [r3, #0]

  return ret;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80038e0:	f107 0208 	add.w	r2, r7, #8
 80038e4:	2301      	movs	r3, #1
 80038e6:	2110      	movs	r1, #16
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fb97 	bl	800301c <lsm6dsr_read_reg>
 80038ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	7a3b      	ldrb	r3, [r7, #8]
 8003900:	f362 0341 	bfi	r3, r2, #1, #1
 8003904:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8003906:	f107 0208 	add.w	r2, r7, #8
 800390a:	2301      	movs	r3, #1
 800390c:	2110      	movs	r1, #16
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fb9c 	bl	800304c <lsm6dsr_write_reg>
 8003914:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 800392c:	f107 0208 	add.w	r2, r7, #8
 8003930:	2301      	movs	r3, #1
 8003932:	2117      	movs	r1, #23
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fb71 	bl	800301c <lsm6dsr_read_reg>
 800393a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d121      	bne.n	8003986 <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	7a3b      	ldrb	r3, [r7, #8]
 800394e:	f362 0382 	bfi	r3, r2, #2, #1
 8003952:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	7a3b      	ldrb	r3, [r7, #8]
 8003960:	f362 1304 	bfi	r3, r2, #4, #1
 8003964:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	b2da      	uxtb	r2, r3
 800396e:	7a3b      	ldrb	r3, [r7, #8]
 8003970:	f362 1347 	bfi	r3, r2, #5, #3
 8003974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8003976:	f107 0208 	add.w	r2, r7, #8
 800397a:	2301      	movs	r3, #1
 800397c:	2117      	movs	r1, #23
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fb64 	bl	800304c <lsm6dsr_write_reg>
 8003984:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800399c:	f107 0210 	add.w	r2, r7, #16
 80039a0:	2301      	movs	r3, #1
 80039a2:	2118      	movs	r1, #24
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff fb39 	bl	800301c <lsm6dsr_read_reg>
 80039aa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d111      	bne.n	80039d6 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	09db      	lsrs	r3, r3, #7
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	7c3b      	ldrb	r3, [r7, #16]
 80039c0:	f362 0341 	bfi	r3, r2, #1, #1
 80039c4:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 80039c6:	f107 0210 	add.w	r2, r7, #16
 80039ca:	2301      	movs	r3, #1
 80039cc:	2118      	movs	r1, #24
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fb3c 	bl	800304c <lsm6dsr_write_reg>
 80039d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 80039dc:	f107 020c 	add.w	r2, r7, #12
 80039e0:	2301      	movs	r3, #1
 80039e2:	2162      	movs	r1, #98	; 0x62
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fb19 	bl	800301c <lsm6dsr_read_reg>
 80039ea:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	7b3b      	ldrb	r3, [r7, #12]
 80039fc:	f362 03c4 	bfi	r3, r2, #3, #2
 8003a00:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8003a02:	f107 020c 	add.w	r2, r7, #12
 8003a06:	2301      	movs	r3, #1
 8003a08:	2162      	movs	r1, #98	; 0x62
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fb1e 	bl	800304c <lsm6dsr_write_reg>
 8003a10:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8003a12:	697b      	ldr	r3, [r7, #20]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8003a26:	2102      	movs	r1, #2
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff fedd 	bl	80037e8 <lsm6dsr_mem_bank_set>
 8003a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8003a36:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8003a38:	2301      	movs	r3, #1
 8003a3a:	2146      	movs	r1, #70	; 0x46
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff faed 	bl	800301c <lsm6dsr_read_reg>
 8003a42:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8003a4e:	2301      	movs	r3, #1
 8003a50:	2147      	movs	r1, #71	; 0x47
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fae2 	bl	800301c <lsm6dsr_read_reg>
 8003a58:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8003a60:	2100      	movs	r1, #0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fec0 	bl	80037e8 <lsm6dsr_mem_bank_set>
 8003a68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8003a7e:	2102      	movs	r1, #2
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff feb1 	bl	80037e8 <lsm6dsr_mem_bank_set>
 8003a86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8003a8e:	f107 0208 	add.w	r2, r7, #8
 8003a92:	2301      	movs	r3, #1
 8003a94:	215f      	movs	r1, #95	; 0x5f
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fac0 	bl	800301c <lsm6dsr_read_reg>
 8003a9c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fe9e 	bl	80037e8 <lsm6dsr_mem_bank_set>
 8003aac:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8003aae:	7a3b      	ldrb	r3, [r7, #8]
 8003ab0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d81a      	bhi.n	8003af0 <lsm6dsr_fsm_data_rate_get+0x7c>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003ad1 	.word	0x08003ad1
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003ae1 	.word	0x08003ae1
 8003acc:	08003ae9 	.word	0x08003ae9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
      break;
 8003ad6:	e00f      	b.n	8003af8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
      break;
 8003ade:	e00b      	b.n	8003af8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e007      	b.n	8003af8 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
      break;
 8003aee:	e003      	b.n	8003af8 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
      break;
 8003af6:	bf00      	nop
  }

  return ret;
 8003af8:	68fb      	ldr	r3, [r7, #12]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop

08003b04 <lsm6dsr_read_data_polling>:
static void platform_delay(uint32_t ms);
static void platform_init(void);

/* Main Example --------------------------------------------------------------*/
void lsm6dsr_read_data_polling(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
  stmdev_ctx_t dev_ctx;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8003b0a:	4b80      	ldr	r3, [pc, #512]	; (8003d0c <lsm6dsr_read_data_polling+0x208>)
 8003b0c:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8003b0e:	4b80      	ldr	r3, [pc, #512]	; (8003d10 <lsm6dsr_read_data_polling+0x20c>)
 8003b10:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &hi2c1;
 8003b12:	4b80      	ldr	r3, [pc, #512]	; (8003d14 <lsm6dsr_read_data_polling+0x210>)
 8003b14:	617b      	str	r3, [r7, #20]
  /* Init test platform */
  platform_init();
 8003b16:	f000 f96a 	bl	8003dee <platform_init>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8003b1a:	200a      	movs	r0, #10
 8003b1c:	f000 f95c 	bl	8003dd8 <platform_delay>
  /* Check device ID */
  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	497c      	ldr	r1, [pc, #496]	; (8003d18 <lsm6dsr_read_data_polling+0x214>)
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fe84 	bl	8003834 <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 8003b2c:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <lsm6dsr_read_data_polling+0x214>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b6b      	cmp	r3, #107	; 0x6b
 8003b32:	f040 80e7 	bne.w	8003d04 <lsm6dsr_read_data_polling+0x200>
    return 0;

  /* Restore default configuration */
  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fe8a 	bl	8003856 <lsm6dsr_reset_set>

  do {
    lsm6dsr_reset_get(&dev_ctx, &rst);
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	4975      	ldr	r1, [pc, #468]	; (8003d1c <lsm6dsr_read_data_polling+0x218>)
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff feaa 	bl	80038a2 <lsm6dsr_reset_get>
  } while (rst);
 8003b4e:	4b73      	ldr	r3, [pc, #460]	; (8003d1c <lsm6dsr_read_data_polling+0x218>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f5      	bne.n	8003b42 <lsm6dsr_read_data_polling+0x3e>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff17 	bl	8003990 <lsm6dsr_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	2101      	movs	r1, #1
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fd13 	bl	8003594 <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff faf3 	bl	8003160 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	2101      	movs	r1, #1
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fc0d 	bl	80033a0 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_2g);
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fac1 	bl	8003114 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 8003b92:	f107 0308 	add.w	r3, r7, #8
 8003b96:	210c      	movs	r1, #12
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fbdb 	bl	8003354 <lsm6dsr_gy_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer - LPF1 + LPF2 path
   */
  lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	2104      	movs	r1, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff febb 	bl	8003920 <lsm6dsr_xl_hp_path_on_out_set>
  lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe8f 	bl	80038d4 <lsm6dsr_xl_filter_lp2_set>

  /* Read samples in polling mode */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    lsm6dsr_xl_flag_data_ready_get(&dev_ctx, &reg);
 8003bb6:	1dfa      	adds	r2, r7, #7
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fd0e 	bl	80035e0 <lsm6dsr_xl_flag_data_ready_get>

    if (reg) {
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d034      	beq.n	8003c34 <lsm6dsr_read_data_polling+0x130>
      /* Read acceleration field data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003bca:	2206      	movs	r2, #6
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4854      	ldr	r0, [pc, #336]	; (8003d20 <lsm6dsr_read_data_polling+0x21c>)
 8003bd0:	f000 f914 	bl	8003dfc <memset>
      lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	4951      	ldr	r1, [pc, #324]	; (8003d20 <lsm6dsr_read_data_polling+0x21c>)
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fdb9 	bl	8003752 <lsm6dsr_acceleration_raw_get>
      acceleration_mg[0] =
        lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8003be0:	4b4f      	ldr	r3, [pc, #316]	; (8003d20 <lsm6dsr_read_data_polling+0x21c>)
 8003be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fa48 	bl	800307c <lsm6dsr_from_fs2g_to_mg>
 8003bec:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <lsm6dsr_read_data_polling+0x220>)
 8003bf2:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] =
        lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <lsm6dsr_read_data_polling+0x21c>)
 8003bf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fa3d 	bl	800307c <lsm6dsr_from_fs2g_to_mg>
 8003c02:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <lsm6dsr_read_data_polling+0x220>)
 8003c08:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] =
        lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 8003c0c:	4b44      	ldr	r3, [pc, #272]	; (8003d20 <lsm6dsr_read_data_polling+0x21c>)
 8003c0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fa32 	bl	800307c <lsm6dsr_from_fs2g_to_mg>
 8003c18:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8003c1c:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <lsm6dsr_read_data_polling+0x220>)
 8003c1e:	edc3 7a02 	vstr	s15, [r3, #8]
      /*
      sprintf((char *)tx_buffer,
              "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
              */
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8003c22:	4841      	ldr	r0, [pc, #260]	; (8003d28 <lsm6dsr_read_data_polling+0x224>)
 8003c24:	f7fc fad6 	bl	80001d4 <strlen>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	483e      	ldr	r0, [pc, #248]	; (8003d28 <lsm6dsr_read_data_polling+0x224>)
 8003c30:	f000 f8be 	bl	8003db0 <tx_com>
    }

    lsm6dsr_gy_flag_data_ready_get(&dev_ctx, &reg);
 8003c34:	1dfa      	adds	r2, r7, #7
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fce8 	bl	8003612 <lsm6dsr_gy_flag_data_ready_get>

    if (reg) {
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d034      	beq.n	8003cb2 <lsm6dsr_read_data_polling+0x1ae>
      /* Read angular rate field data */
      memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003c48:	2206      	movs	r2, #6
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4837      	ldr	r0, [pc, #220]	; (8003d2c <lsm6dsr_read_data_polling+0x228>)
 8003c4e:	f000 f8d5 	bl	8003dfc <memset>
      lsm6dsr_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 8003c52:	f107 0308 	add.w	r3, r7, #8
 8003c56:	4935      	ldr	r1, [pc, #212]	; (8003d2c <lsm6dsr_read_data_polling+0x228>)
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fd2f 	bl	80036bc <lsm6dsr_angular_rate_raw_get>
      angular_rate_mdps[0] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8003c5e:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <lsm6dsr_read_data_polling+0x228>)
 8003c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fa21 	bl	80030ac <lsm6dsr_from_fs2000dps_to_mdps>
 8003c6a:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[0] =
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <lsm6dsr_read_data_polling+0x22c>)
 8003c70:	edc3 7a00 	vstr	s15, [r3]
      angular_rate_mdps[1] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <lsm6dsr_read_data_polling+0x228>)
 8003c76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fa16 	bl	80030ac <lsm6dsr_from_fs2000dps_to_mdps>
 8003c80:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[1] =
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <lsm6dsr_read_data_polling+0x22c>)
 8003c86:	edc3 7a01 	vstr	s15, [r3, #4]
      angular_rate_mdps[2] =
        lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <lsm6dsr_read_data_polling+0x228>)
 8003c8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fa0b 	bl	80030ac <lsm6dsr_from_fs2000dps_to_mdps>
 8003c96:	eef0 7a40 	vmov.f32	s15, s0
      angular_rate_mdps[2] =
 8003c9a:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <lsm6dsr_read_data_polling+0x22c>)
 8003c9c:	edc3 7a02 	vstr	s15, [r3, #8]
      /*
      sprintf((char *)tx_buffer,
              "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
              angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
              */
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8003ca0:	4821      	ldr	r0, [pc, #132]	; (8003d28 <lsm6dsr_read_data_polling+0x224>)
 8003ca2:	f7fc fa97 	bl	80001d4 <strlen>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4619      	mov	r1, r3
 8003cac:	481e      	ldr	r0, [pc, #120]	; (8003d28 <lsm6dsr_read_data_polling+0x224>)
 8003cae:	f000 f87f 	bl	8003db0 <tx_com>
    }

    lsm6dsr_temp_flag_data_ready_get(&dev_ctx, &reg);
 8003cb2:	1dfa      	adds	r2, r7, #7
 8003cb4:	f107 0308 	add.w	r3, r7, #8
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fcc2 	bl	8003644 <lsm6dsr_temp_flag_data_ready_get>

    if (reg) {
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f43f af77 	beq.w	8003bb6 <lsm6dsr_read_data_polling+0xb2>
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <lsm6dsr_read_data_polling+0x230>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	801a      	strh	r2, [r3, #0]
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
      lsm6dsr_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4918      	ldr	r1, [pc, #96]	; (8003d34 <lsm6dsr_read_data_polling+0x230>)
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fcce 	bl	8003676 <lsm6dsr_temperature_raw_get>
      temperature_degC = lsm6dsr_from_lsb_to_celsius(
 8003cda:	4b16      	ldr	r3, [pc, #88]	; (8003d34 <lsm6dsr_read_data_polling+0x230>)
 8003cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f9fb 	bl	80030dc <lsm6dsr_from_lsb_to_celsius>
 8003ce6:	eef0 7a40 	vmov.f32	s15, s0
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <lsm6dsr_read_data_polling+0x234>)
 8003cec:	edc3 7a00 	vstr	s15, [r3]
                           data_raw_temperature);

      /*
       sprintf((char *)tx_buffer,
              "Temperature [degC]:%6.2f\r\n", temperature_degC);*/
      tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8003cf0:	480d      	ldr	r0, [pc, #52]	; (8003d28 <lsm6dsr_read_data_polling+0x224>)
 8003cf2:	f7fc fa6f 	bl	80001d4 <strlen>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	480a      	ldr	r0, [pc, #40]	; (8003d28 <lsm6dsr_read_data_polling+0x224>)
 8003cfe:	f000 f857 	bl	8003db0 <tx_com>
  while (1) {
 8003d02:	e758      	b.n	8003bb6 <lsm6dsr_read_data_polling+0xb2>
    return 0;
 8003d04:	bf00      	nop
    }
  }
}
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d77 	.word	0x08003d77
 8003d14:	20000028 	.word	0x20000028
 8003d18:	200000f0 	.word	0x200000f0
 8003d1c:	200000f1 	.word	0x200000f1
 8003d20:	200000c4 	.word	0x200000c4
 8003d24:	200000d4 	.word	0x200000d4
 8003d28:	200000f4 	.word	0x200000f4
 8003d2c:	200000cc 	.word	0x200000cc
 8003d30:	200000e0 	.word	0x200000e0
 8003d34:	200000d2 	.word	0x200000d2
 8003d38:	200000ec 	.word	0x200000ec

08003d3c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af04      	add	r7, sp, #16
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	461a      	mov	r2, r3
 8003d48:	460b      	mov	r3, r1
 8003d4a:	72fb      	strb	r3, [r7, #11]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Write(handle, LSM6DSR_I2C_ADD_L, reg,
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2301      	movs	r3, #1
 8003d64:	21d5      	movs	r1, #213	; 0xd5
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7fd fa82 	bl	8001270 <HAL_I2C_Mem_Write>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_write(handle,  LSM6DSR_I2C_ADD_L & 0xFE, reg, (uint8_t*) bufp, len);
#endif
  return 0;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af04      	add	r7, sp, #16
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	461a      	mov	r2, r3
 8003d82:	460b      	mov	r3, r1
 8003d84:	72fb      	strb	r3, [r7, #11]
 8003d86:	4613      	mov	r3, r2
 8003d88:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F401RE)
  HAL_I2C_Mem_Read(handle, LSM6DSR_I2C_ADD_L, reg,
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d92:	9302      	str	r3, [sp, #8]
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	21d5      	movs	r1, #213	; 0xd5
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7fd fb5f 	bl	8001464 <HAL_I2C_Mem_Read>
  HAL_SPI_Receive(handle, bufp, len, 1000);
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
#elif defined(SPC584B_DIS)
  i2c_lld_read(handle, LSM6DSR_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
#if defined(NUCLEO_F401RE)
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4803      	ldr	r0, [pc, #12]	; (8003dd4 <tx_com+0x24>)
 8003dc6:	f7fe fdb4 	bl	8002932 <HAL_UART_Transmit>
#elif defined(STEVAL_MKI109V3)
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000007c 	.word	0x2000007c

08003dd8 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F401RE) | defined(STEVAL_MKI109V3)
  HAL_Delay(ms);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fc fe59 	bl	8000a98 <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <memset>:
 8003dfc:	4402      	add	r2, r0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d100      	bne.n	8003e06 <memset+0xa>
 8003e04:	4770      	bx	lr
 8003e06:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0a:	e7f9      	b.n	8003e00 <memset+0x4>

08003e0c <__libc_init_array>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	4d0d      	ldr	r5, [pc, #52]	; (8003e44 <__libc_init_array+0x38>)
 8003e10:	4c0d      	ldr	r4, [pc, #52]	; (8003e48 <__libc_init_array+0x3c>)
 8003e12:	1b64      	subs	r4, r4, r5
 8003e14:	10a4      	asrs	r4, r4, #2
 8003e16:	2600      	movs	r6, #0
 8003e18:	42a6      	cmp	r6, r4
 8003e1a:	d109      	bne.n	8003e30 <__libc_init_array+0x24>
 8003e1c:	4d0b      	ldr	r5, [pc, #44]	; (8003e4c <__libc_init_array+0x40>)
 8003e1e:	4c0c      	ldr	r4, [pc, #48]	; (8003e50 <__libc_init_array+0x44>)
 8003e20:	f000 f818 	bl	8003e54 <_init>
 8003e24:	1b64      	subs	r4, r4, r5
 8003e26:	10a4      	asrs	r4, r4, #2
 8003e28:	2600      	movs	r6, #0
 8003e2a:	42a6      	cmp	r6, r4
 8003e2c:	d105      	bne.n	8003e3a <__libc_init_array+0x2e>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e34:	4798      	blx	r3
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7ee      	b.n	8003e18 <__libc_init_array+0xc>
 8003e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3e:	4798      	blx	r3
 8003e40:	3601      	adds	r6, #1
 8003e42:	e7f2      	b.n	8003e2a <__libc_init_array+0x1e>
 8003e44:	08003e8c 	.word	0x08003e8c
 8003e48:	08003e8c 	.word	0x08003e8c
 8003e4c:	08003e8c 	.word	0x08003e8c
 8003e50:	08003e90 	.word	0x08003e90

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
